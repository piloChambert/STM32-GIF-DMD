
STM32 GIF DMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  0800e0f8  0800e0f8  0001e0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e894  0800e894  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e894  0800e894  0001e894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e89c  0800e89c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e89c  0800e89c  0001e89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8a0  0800e8a0  0001e8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800e8a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f6c0  2000020c  0800eab0  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  2001f8cc  0800eab0  0002f8cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ca8  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a11  00000000  00000000  00042ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001788  00000000  00000000  000478f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001550  00000000  00000000  00049080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bea6  00000000  00000000  0004a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000180bb  00000000  00000000  00066476  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009287b  00000000  00000000  0007e531  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110dac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000663c  00000000  00000000  00110e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e0e0 	.word	0x0800e0e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	0800e0e0 	.word	0x0800e0e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2f>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000610:	bf24      	itt	cs
 8000612:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000616:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800061a:	d90d      	bls.n	8000638 <__aeabi_d2f+0x30>
 800061c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000620:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000624:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000628:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800062c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000630:	bf08      	it	eq
 8000632:	f020 0001 	biceq.w	r0, r0, #1
 8000636:	4770      	bx	lr
 8000638:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800063c:	d121      	bne.n	8000682 <__aeabi_d2f+0x7a>
 800063e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000642:	bfbc      	itt	lt
 8000644:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000648:	4770      	bxlt	lr
 800064a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000652:	f1c2 0218 	rsb	r2, r2, #24
 8000656:	f1c2 0c20 	rsb	ip, r2, #32
 800065a:	fa10 f30c 	lsls.w	r3, r0, ip
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	bf18      	it	ne
 8000664:	f040 0001 	orrne.w	r0, r0, #1
 8000668:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000670:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000674:	ea40 000c 	orr.w	r0, r0, ip
 8000678:	fa23 f302 	lsr.w	r3, r3, r2
 800067c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000680:	e7cc      	b.n	800061c <__aeabi_d2f+0x14>
 8000682:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000686:	d107      	bne.n	8000698 <__aeabi_d2f+0x90>
 8000688:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800068c:	bf1e      	ittt	ne
 800068e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000692:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000696:	4770      	bxne	lr
 8000698:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800069c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b972 	b.w	80009a4 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9e08      	ldr	r6, [sp, #32]
 80006de:	4604      	mov	r4, r0
 80006e0:	4688      	mov	r8, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d14b      	bne.n	800077e <__udivmoddi4+0xa6>
 80006e6:	428a      	cmp	r2, r1
 80006e8:	4615      	mov	r5, r2
 80006ea:	d967      	bls.n	80007bc <__udivmoddi4+0xe4>
 80006ec:	fab2 f282 	clz	r2, r2
 80006f0:	b14a      	cbz	r2, 8000706 <__udivmoddi4+0x2e>
 80006f2:	f1c2 0720 	rsb	r7, r2, #32
 80006f6:	fa01 f302 	lsl.w	r3, r1, r2
 80006fa:	fa20 f707 	lsr.w	r7, r0, r7
 80006fe:	4095      	lsls	r5, r2
 8000700:	ea47 0803 	orr.w	r8, r7, r3
 8000704:	4094      	lsls	r4, r2
 8000706:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800070a:	0c23      	lsrs	r3, r4, #16
 800070c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000710:	fa1f fc85 	uxth.w	ip, r5
 8000714:	fb0e 8817 	mls	r8, lr, r7, r8
 8000718:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800071c:	fb07 f10c 	mul.w	r1, r7, ip
 8000720:	4299      	cmp	r1, r3
 8000722:	d909      	bls.n	8000738 <__udivmoddi4+0x60>
 8000724:	18eb      	adds	r3, r5, r3
 8000726:	f107 30ff 	add.w	r0, r7, #4294967295
 800072a:	f080 811b 	bcs.w	8000964 <__udivmoddi4+0x28c>
 800072e:	4299      	cmp	r1, r3
 8000730:	f240 8118 	bls.w	8000964 <__udivmoddi4+0x28c>
 8000734:	3f02      	subs	r7, #2
 8000736:	442b      	add	r3, r5
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	b2a4      	uxth	r4, r4
 800073c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000740:	fb0e 3310 	mls	r3, lr, r0, r3
 8000744:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000748:	fb00 fc0c 	mul.w	ip, r0, ip
 800074c:	45a4      	cmp	ip, r4
 800074e:	d909      	bls.n	8000764 <__udivmoddi4+0x8c>
 8000750:	192c      	adds	r4, r5, r4
 8000752:	f100 33ff 	add.w	r3, r0, #4294967295
 8000756:	f080 8107 	bcs.w	8000968 <__udivmoddi4+0x290>
 800075a:	45a4      	cmp	ip, r4
 800075c:	f240 8104 	bls.w	8000968 <__udivmoddi4+0x290>
 8000760:	3802      	subs	r0, #2
 8000762:	442c      	add	r4, r5
 8000764:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000768:	eba4 040c 	sub.w	r4, r4, ip
 800076c:	2700      	movs	r7, #0
 800076e:	b11e      	cbz	r6, 8000778 <__udivmoddi4+0xa0>
 8000770:	40d4      	lsrs	r4, r2
 8000772:	2300      	movs	r3, #0
 8000774:	e9c6 4300 	strd	r4, r3, [r6]
 8000778:	4639      	mov	r1, r7
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0xbe>
 8000782:	2e00      	cmp	r6, #0
 8000784:	f000 80eb 	beq.w	800095e <__udivmoddi4+0x286>
 8000788:	2700      	movs	r7, #0
 800078a:	e9c6 0100 	strd	r0, r1, [r6]
 800078e:	4638      	mov	r0, r7
 8000790:	4639      	mov	r1, r7
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f783 	clz	r7, r3
 800079a:	2f00      	cmp	r7, #0
 800079c:	d147      	bne.n	800082e <__udivmoddi4+0x156>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0xd0>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80fa 	bhi.w	800099c <__udivmoddi4+0x2c4>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0303 	sbc.w	r3, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	4698      	mov	r8, r3
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d0e0      	beq.n	8000778 <__udivmoddi4+0xa0>
 80007b6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ba:	e7dd      	b.n	8000778 <__udivmoddi4+0xa0>
 80007bc:	b902      	cbnz	r2, 80007c0 <__udivmoddi4+0xe8>
 80007be:	deff      	udf	#255	; 0xff
 80007c0:	fab2 f282 	clz	r2, r2
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	f040 808f 	bne.w	80008e8 <__udivmoddi4+0x210>
 80007ca:	1b49      	subs	r1, r1, r5
 80007cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007d0:	fa1f f885 	uxth.w	r8, r5
 80007d4:	2701      	movs	r7, #1
 80007d6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fb0e 111c 	mls	r1, lr, ip, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb08 f10c 	mul.w	r1, r8, ip
 80007e8:	4299      	cmp	r1, r3
 80007ea:	d907      	bls.n	80007fc <__udivmoddi4+0x124>
 80007ec:	18eb      	adds	r3, r5, r3
 80007ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0x122>
 80007f4:	4299      	cmp	r1, r3
 80007f6:	f200 80cd 	bhi.w	8000994 <__udivmoddi4+0x2bc>
 80007fa:	4684      	mov	ip, r0
 80007fc:	1a59      	subs	r1, r3, r1
 80007fe:	b2a3      	uxth	r3, r4
 8000800:	fbb1 f0fe 	udiv	r0, r1, lr
 8000804:	fb0e 1410 	mls	r4, lr, r0, r1
 8000808:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800080c:	fb08 f800 	mul.w	r8, r8, r0
 8000810:	45a0      	cmp	r8, r4
 8000812:	d907      	bls.n	8000824 <__udivmoddi4+0x14c>
 8000814:	192c      	adds	r4, r5, r4
 8000816:	f100 33ff 	add.w	r3, r0, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x14a>
 800081c:	45a0      	cmp	r8, r4
 800081e:	f200 80b6 	bhi.w	800098e <__udivmoddi4+0x2b6>
 8000822:	4618      	mov	r0, r3
 8000824:	eba4 0408 	sub.w	r4, r4, r8
 8000828:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800082c:	e79f      	b.n	800076e <__udivmoddi4+0x96>
 800082e:	f1c7 0c20 	rsb	ip, r7, #32
 8000832:	40bb      	lsls	r3, r7
 8000834:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000838:	ea4e 0e03 	orr.w	lr, lr, r3
 800083c:	fa01 f407 	lsl.w	r4, r1, r7
 8000840:	fa20 f50c 	lsr.w	r5, r0, ip
 8000844:	fa21 f30c 	lsr.w	r3, r1, ip
 8000848:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800084c:	4325      	orrs	r5, r4
 800084e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000852:	0c2c      	lsrs	r4, r5, #16
 8000854:	fb08 3319 	mls	r3, r8, r9, r3
 8000858:	fa1f fa8e 	uxth.w	sl, lr
 800085c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000860:	fb09 f40a 	mul.w	r4, r9, sl
 8000864:	429c      	cmp	r4, r3
 8000866:	fa02 f207 	lsl.w	r2, r2, r7
 800086a:	fa00 f107 	lsl.w	r1, r0, r7
 800086e:	d90b      	bls.n	8000888 <__udivmoddi4+0x1b0>
 8000870:	eb1e 0303 	adds.w	r3, lr, r3
 8000874:	f109 30ff 	add.w	r0, r9, #4294967295
 8000878:	f080 8087 	bcs.w	800098a <__udivmoddi4+0x2b2>
 800087c:	429c      	cmp	r4, r3
 800087e:	f240 8084 	bls.w	800098a <__udivmoddi4+0x2b2>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4473      	add	r3, lr
 8000888:	1b1b      	subs	r3, r3, r4
 800088a:	b2ad      	uxth	r5, r5
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3310 	mls	r3, r8, r0, r3
 8000894:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000898:	fb00 fa0a 	mul.w	sl, r0, sl
 800089c:	45a2      	cmp	sl, r4
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x1da>
 80008a0:	eb1e 0404 	adds.w	r4, lr, r4
 80008a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008a8:	d26b      	bcs.n	8000982 <__udivmoddi4+0x2aa>
 80008aa:	45a2      	cmp	sl, r4
 80008ac:	d969      	bls.n	8000982 <__udivmoddi4+0x2aa>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4474      	add	r4, lr
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	fba0 8902 	umull	r8, r9, r0, r2
 80008ba:	eba4 040a 	sub.w	r4, r4, sl
 80008be:	454c      	cmp	r4, r9
 80008c0:	46c2      	mov	sl, r8
 80008c2:	464b      	mov	r3, r9
 80008c4:	d354      	bcc.n	8000970 <__udivmoddi4+0x298>
 80008c6:	d051      	beq.n	800096c <__udivmoddi4+0x294>
 80008c8:	2e00      	cmp	r6, #0
 80008ca:	d069      	beq.n	80009a0 <__udivmoddi4+0x2c8>
 80008cc:	ebb1 050a 	subs.w	r5, r1, sl
 80008d0:	eb64 0403 	sbc.w	r4, r4, r3
 80008d4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008d8:	40fd      	lsrs	r5, r7
 80008da:	40fc      	lsrs	r4, r7
 80008dc:	ea4c 0505 	orr.w	r5, ip, r5
 80008e0:	e9c6 5400 	strd	r5, r4, [r6]
 80008e4:	2700      	movs	r7, #0
 80008e6:	e747      	b.n	8000778 <__udivmoddi4+0xa0>
 80008e8:	f1c2 0320 	rsb	r3, r2, #32
 80008ec:	fa20 f703 	lsr.w	r7, r0, r3
 80008f0:	4095      	lsls	r5, r2
 80008f2:	fa01 f002 	lsl.w	r0, r1, r2
 80008f6:	fa21 f303 	lsr.w	r3, r1, r3
 80008fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008fe:	4338      	orrs	r0, r7
 8000900:	0c01      	lsrs	r1, r0, #16
 8000902:	fbb3 f7fe 	udiv	r7, r3, lr
 8000906:	fa1f f885 	uxth.w	r8, r5
 800090a:	fb0e 3317 	mls	r3, lr, r7, r3
 800090e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000912:	fb07 f308 	mul.w	r3, r7, r8
 8000916:	428b      	cmp	r3, r1
 8000918:	fa04 f402 	lsl.w	r4, r4, r2
 800091c:	d907      	bls.n	800092e <__udivmoddi4+0x256>
 800091e:	1869      	adds	r1, r5, r1
 8000920:	f107 3cff 	add.w	ip, r7, #4294967295
 8000924:	d22f      	bcs.n	8000986 <__udivmoddi4+0x2ae>
 8000926:	428b      	cmp	r3, r1
 8000928:	d92d      	bls.n	8000986 <__udivmoddi4+0x2ae>
 800092a:	3f02      	subs	r7, #2
 800092c:	4429      	add	r1, r5
 800092e:	1acb      	subs	r3, r1, r3
 8000930:	b281      	uxth	r1, r0
 8000932:	fbb3 f0fe 	udiv	r0, r3, lr
 8000936:	fb0e 3310 	mls	r3, lr, r0, r3
 800093a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800093e:	fb00 f308 	mul.w	r3, r0, r8
 8000942:	428b      	cmp	r3, r1
 8000944:	d907      	bls.n	8000956 <__udivmoddi4+0x27e>
 8000946:	1869      	adds	r1, r5, r1
 8000948:	f100 3cff 	add.w	ip, r0, #4294967295
 800094c:	d217      	bcs.n	800097e <__udivmoddi4+0x2a6>
 800094e:	428b      	cmp	r3, r1
 8000950:	d915      	bls.n	800097e <__udivmoddi4+0x2a6>
 8000952:	3802      	subs	r0, #2
 8000954:	4429      	add	r1, r5
 8000956:	1ac9      	subs	r1, r1, r3
 8000958:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800095c:	e73b      	b.n	80007d6 <__udivmoddi4+0xfe>
 800095e:	4637      	mov	r7, r6
 8000960:	4630      	mov	r0, r6
 8000962:	e709      	b.n	8000778 <__udivmoddi4+0xa0>
 8000964:	4607      	mov	r7, r0
 8000966:	e6e7      	b.n	8000738 <__udivmoddi4+0x60>
 8000968:	4618      	mov	r0, r3
 800096a:	e6fb      	b.n	8000764 <__udivmoddi4+0x8c>
 800096c:	4541      	cmp	r1, r8
 800096e:	d2ab      	bcs.n	80008c8 <__udivmoddi4+0x1f0>
 8000970:	ebb8 0a02 	subs.w	sl, r8, r2
 8000974:	eb69 020e 	sbc.w	r2, r9, lr
 8000978:	3801      	subs	r0, #1
 800097a:	4613      	mov	r3, r2
 800097c:	e7a4      	b.n	80008c8 <__udivmoddi4+0x1f0>
 800097e:	4660      	mov	r0, ip
 8000980:	e7e9      	b.n	8000956 <__udivmoddi4+0x27e>
 8000982:	4618      	mov	r0, r3
 8000984:	e795      	b.n	80008b2 <__udivmoddi4+0x1da>
 8000986:	4667      	mov	r7, ip
 8000988:	e7d1      	b.n	800092e <__udivmoddi4+0x256>
 800098a:	4681      	mov	r9, r0
 800098c:	e77c      	b.n	8000888 <__udivmoddi4+0x1b0>
 800098e:	3802      	subs	r0, #2
 8000990:	442c      	add	r4, r5
 8000992:	e747      	b.n	8000824 <__udivmoddi4+0x14c>
 8000994:	f1ac 0c02 	sub.w	ip, ip, #2
 8000998:	442b      	add	r3, r5
 800099a:	e72f      	b.n	80007fc <__udivmoddi4+0x124>
 800099c:	4638      	mov	r0, r7
 800099e:	e708      	b.n	80007b2 <__udivmoddi4+0xda>
 80009a0:	4637      	mov	r7, r6
 80009a2:	e6e9      	b.n	8000778 <__udivmoddi4+0xa0>

080009a4 <__aeabi_idiv0>:
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_DMA_Init+0x3c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <MX_DMA_Init+0x3c>)
 80009b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_DMA_Init+0x3c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	203c      	movs	r0, #60	; 0x3c
 80009d0:	f002 f8eb 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80009d4:	203c      	movs	r0, #60	; 0x3c
 80009d6:	f002 f904 	bl	8002be2 <HAL_NVIC_EnableIRQ>

}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <SELECT+0x1c>)
 80009f4:	f002 fd7a 	bl	80034ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f001 ffd9 	bl	80029b0 <HAL_Delay>
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40020400 	.word	0x40020400

08000a08 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <DESELECT+0x1c>)
 8000a14:	f002 fd6a 	bl	80034ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f001 ffc9 	bl	80029b0 <HAL_Delay>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40020400 	.word	0x40020400

08000a28 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a32:	bf00      	nop
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <SPI_TxByte+0x30>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d1f8      	bne.n	8000a34 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000a42:	1df9      	adds	r1, r7, #7
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	2201      	movs	r2, #1
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <SPI_TxByte+0x30>)
 8000a4a:	f004 fb63 	bl	8005114 <HAL_SPI_Transmit>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2001be44 	.word	0x2001be44

08000a5c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a68:	bf00      	nop
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <SPI_TxBuffer+0x30>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d1f8      	bne.n	8000a6a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000a78:	887a      	ldrh	r2, [r7, #2]
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <SPI_TxBuffer+0x30>)
 8000a80:	f004 fb48 	bl	8005114 <HAL_SPI_Transmit>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2001be44 	.word	0x2001be44

08000a90 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000a96:	23ff      	movs	r3, #255	; 0xff
 8000a98:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a9a:	bf00      	nop
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <SPI_RxByte+0x34>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d1f8      	bne.n	8000a9c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000aaa:	1dba      	adds	r2, r7, #6
 8000aac:	1df9      	adds	r1, r7, #7
 8000aae:	2364      	movs	r3, #100	; 0x64
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <SPI_RxByte+0x34>)
 8000ab6:	f004 fc61 	bl	800537c <HAL_SPI_TransmitReceive>

	return data;
 8000aba:	79bb      	ldrb	r3, [r7, #6]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2001be44 	.word	0x2001be44

08000ac8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000ad0:	f7ff ffde 	bl	8000a90 <SPI_RxByte>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	701a      	strb	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <SD_ReadyWait+0x30>)
 8000aec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000af0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000af2:	f7ff ffcd 	bl	8000a90 <SPI_RxByte>
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2bff      	cmp	r3, #255	; 0xff
 8000afe:	d003      	beq.n	8000b08 <SD_ReadyWait+0x24>
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SD_ReadyWait+0x30>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1f4      	bne.n	8000af2 <SD_ReadyWait+0xe>

	return res;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000684 	.word	0x20000684

08000b18 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000b1e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b22:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000b24:	f7ff ff70 	bl	8000a08 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	e005      	b.n	8000b3a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000b2e:	20ff      	movs	r0, #255	; 0xff
 8000b30:	f7ff ff7a 	bl	8000a28 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	3301      	adds	r3, #1
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2b09      	cmp	r3, #9
 8000b3e:	ddf6      	ble.n	8000b2e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000b40:	f7ff ff52 	bl	80009e8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000b44:	2340      	movs	r3, #64	; 0x40
 8000b46:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000b58:	2395      	movs	r3, #149	; 0x95
 8000b5a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2106      	movs	r1, #6
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff7b 	bl	8000a5c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000b66:	e002      	b.n	8000b6e <SD_PowerOn+0x56>
	{
		cnt--;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000b6e:	f7ff ff8f 	bl	8000a90 <SPI_RxByte>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d002      	beq.n	8000b7e <SD_PowerOn+0x66>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f4      	bne.n	8000b68 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000b7e:	f7ff ff43 	bl	8000a08 <DESELECT>
	SPI_TxByte(0XFF);
 8000b82:	20ff      	movs	r0, #255	; 0xff
 8000b84:	f7ff ff50 	bl	8000a28 <SPI_TxByte>

	PowerFlag = 1;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <SD_PowerOn+0x80>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000229 	.word	0x20000229

08000b9c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <SD_PowerOff+0x14>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20000229 	.word	0x20000229

08000bb4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <SD_CheckPower+0x14>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000229 	.word	0x20000229

08000bcc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <SD_RxDataBlock+0x58>)
 8000bd8:	22c8      	movs	r2, #200	; 0xc8
 8000bda:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000bdc:	f7ff ff58 	bl	8000a90 <SPI_RxByte>
 8000be0:	4603      	mov	r3, r0
 8000be2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	2bff      	cmp	r3, #255	; 0xff
 8000be8:	d103      	bne.n	8000bf2 <SD_RxDataBlock+0x26>
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <SD_RxDataBlock+0x58>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f4      	bne.n	8000bdc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	2bfe      	cmp	r3, #254	; 0xfe
 8000bf6:	d001      	beq.n	8000bfc <SD_RxDataBlock+0x30>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e00f      	b.n	8000c1c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff60 	bl	8000ac8 <SPI_RxBytePtr>
	} while(len--);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	1e5a      	subs	r2, r3, #1
 8000c0c:	603a      	str	r2, [r7, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1f4      	bne.n	8000bfc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000c12:	f7ff ff3d 	bl	8000a90 <SPI_RxByte>
	SPI_RxByte();
 8000c16:	f7ff ff3b 	bl	8000a90 <SPI_RxByte>

	return TRUE;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000686 	.word	0x20000686

08000c28 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000c38:	f7ff ff54 	bl	8000ae4 <SD_ReadyWait>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2bff      	cmp	r3, #255	; 0xff
 8000c40:	d001      	beq.n	8000c46 <SD_TxDataBlock+0x1e>
 8000c42:	2300      	movs	r3, #0
 8000c44:	e02f      	b.n	8000ca6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff feed 	bl	8000a28 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	2bfd      	cmp	r3, #253	; 0xfd
 8000c52:	d020      	beq.n	8000c96 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff feff 	bl	8000a5c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000c5e:	f7ff ff17 	bl	8000a90 <SPI_RxByte>
		SPI_RxByte();
 8000c62:	f7ff ff15 	bl	8000a90 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000c66:	e00b      	b.n	8000c80 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000c68:	f7ff ff12 	bl	8000a90 <SPI_RxByte>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	f003 031f 	and.w	r3, r3, #31
 8000c76:	2b05      	cmp	r3, #5
 8000c78:	d006      	beq.n	8000c88 <SD_TxDataBlock+0x60>
			i++;
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000c80:	7bbb      	ldrb	r3, [r7, #14]
 8000c82:	2b40      	cmp	r3, #64	; 0x40
 8000c84:	d9f0      	bls.n	8000c68 <SD_TxDataBlock+0x40>
 8000c86:	e000      	b.n	8000c8a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000c88:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000c8a:	bf00      	nop
 8000c8c:	f7ff ff00 	bl	8000a90 <SPI_RxByte>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0fa      	beq.n	8000c8c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	f003 031f 	and.w	r3, r3, #31
 8000c9c:	2b05      	cmp	r3, #5
 8000c9e:	d101      	bne.n	8000ca4 <SD_TxDataBlock+0x7c>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	6039      	str	r1, [r7, #0]
 8000cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000cba:	f7ff ff13 	bl	8000ae4 <SD_ReadyWait>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2bff      	cmp	r3, #255	; 0xff
 8000cc2:	d001      	beq.n	8000cc8 <SD_SendCmd+0x1a>
 8000cc4:	23ff      	movs	r3, #255	; 0xff
 8000cc6:	e042      	b.n	8000d4e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff feac 	bl	8000a28 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	0e1b      	lsrs	r3, r3, #24
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fea6 	bl	8000a28 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	0c1b      	lsrs	r3, r3, #16
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fea0 	bl	8000a28 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fe9a 	bl	8000a28 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe95 	bl	8000a28 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b40      	cmp	r3, #64	; 0x40
 8000d02:	d102      	bne.n	8000d0a <SD_SendCmd+0x5c>
 8000d04:	2395      	movs	r3, #149	; 0x95
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e007      	b.n	8000d1a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b48      	cmp	r3, #72	; 0x48
 8000d0e:	d102      	bne.n	8000d16 <SD_SendCmd+0x68>
 8000d10:	2387      	movs	r3, #135	; 0x87
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	e001      	b.n	8000d1a <SD_SendCmd+0x6c>
	else crc = 1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe83 	bl	8000a28 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b4c      	cmp	r3, #76	; 0x4c
 8000d26:	d101      	bne.n	8000d2c <SD_SendCmd+0x7e>
 8000d28:	f7ff feb2 	bl	8000a90 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000d30:	f7ff feae 	bl	8000a90 <SPI_RxByte>
 8000d34:	4603      	mov	r3, r0
 8000d36:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000d38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	da05      	bge.n	8000d4c <SD_SendCmd+0x9e>
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	73bb      	strb	r3, [r7, #14]
 8000d46:	7bbb      	ldrb	r3, [r7, #14]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f1      	bne.n	8000d30 <SD_SendCmd+0x82>

	return res;
 8000d4c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SD_disk_initialize+0x14>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e0d1      	b.n	8000f10 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000d6c:	4b6a      	ldr	r3, [pc, #424]	; (8000f18 <SD_disk_initialize+0x1c0>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <SD_disk_initialize+0x2a>
 8000d7a:	4b67      	ldr	r3, [pc, #412]	; (8000f18 <SD_disk_initialize+0x1c0>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	e0c6      	b.n	8000f10 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000d82:	f7ff fec9 	bl	8000b18 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000d86:	f7ff fe2f 	bl	80009e8 <SELECT>

	/* check disk type */
	type = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2040      	movs	r0, #64	; 0x40
 8000d92:	f7ff ff8c 	bl	8000cae <SD_SendCmd>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	f040 80a1 	bne.w	8000ee0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000d9e:	4b5f      	ldr	r3, [pc, #380]	; (8000f1c <SD_disk_initialize+0x1c4>)
 8000da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000da6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000daa:	2048      	movs	r0, #72	; 0x48
 8000dac:	f7ff ff7f 	bl	8000cae <SD_SendCmd>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d155      	bne.n	8000e62 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e00c      	b.n	8000dd6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000dbc:	7bfc      	ldrb	r4, [r7, #15]
 8000dbe:	f7ff fe67 	bl	8000a90 <SPI_RxByte>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4423      	add	r3, r4
 8000dcc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d9ef      	bls.n	8000dbc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000ddc:	7abb      	ldrb	r3, [r7, #10]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d17e      	bne.n	8000ee0 <SD_disk_initialize+0x188>
 8000de2:	7afb      	ldrb	r3, [r7, #11]
 8000de4:	2baa      	cmp	r3, #170	; 0xaa
 8000de6:	d17b      	bne.n	8000ee0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000de8:	2100      	movs	r1, #0
 8000dea:	2077      	movs	r0, #119	; 0x77
 8000dec:	f7ff ff5f 	bl	8000cae <SD_SendCmd>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d807      	bhi.n	8000e06 <SD_disk_initialize+0xae>
 8000df6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000dfa:	2069      	movs	r0, #105	; 0x69
 8000dfc:	f7ff ff57 	bl	8000cae <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d004      	beq.n	8000e10 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000e06:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <SD_disk_initialize+0x1c4>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1ec      	bne.n	8000de8 <SD_disk_initialize+0x90>
 8000e0e:	e000      	b.n	8000e12 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000e10:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000e12:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <SD_disk_initialize+0x1c4>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d062      	beq.n	8000ee0 <SD_disk_initialize+0x188>
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	207a      	movs	r0, #122	; 0x7a
 8000e1e:	f7ff ff46 	bl	8000cae <SD_SendCmd>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d15b      	bne.n	8000ee0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e00c      	b.n	8000e48 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000e2e:	7bfc      	ldrb	r4, [r7, #15]
 8000e30:	f7ff fe2e 	bl	8000a90 <SPI_RxByte>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4423      	add	r3, r4
 8000e3e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	3301      	adds	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d9ef      	bls.n	8000e2e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000e4e:	7a3b      	ldrb	r3, [r7, #8]
 8000e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SD_disk_initialize+0x104>
 8000e58:	230c      	movs	r3, #12
 8000e5a:	e000      	b.n	8000e5e <SD_disk_initialize+0x106>
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	73bb      	strb	r3, [r7, #14]
 8000e60:	e03e      	b.n	8000ee0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000e62:	2100      	movs	r1, #0
 8000e64:	2077      	movs	r0, #119	; 0x77
 8000e66:	f7ff ff22 	bl	8000cae <SD_SendCmd>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d808      	bhi.n	8000e82 <SD_disk_initialize+0x12a>
 8000e70:	2100      	movs	r1, #0
 8000e72:	2069      	movs	r0, #105	; 0x69
 8000e74:	f7ff ff1b 	bl	8000cae <SD_SendCmd>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d801      	bhi.n	8000e82 <SD_disk_initialize+0x12a>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e000      	b.n	8000e84 <SD_disk_initialize+0x12c>
 8000e82:	2301      	movs	r3, #1
 8000e84:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d10e      	bne.n	8000eaa <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2077      	movs	r0, #119	; 0x77
 8000e90:	f7ff ff0d 	bl	8000cae <SD_SendCmd>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d80e      	bhi.n	8000eb8 <SD_disk_initialize+0x160>
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2069      	movs	r0, #105	; 0x69
 8000e9e:	f7ff ff06 	bl	8000cae <SD_SendCmd>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d107      	bne.n	8000eb8 <SD_disk_initialize+0x160>
 8000ea8:	e00c      	b.n	8000ec4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2041      	movs	r0, #65	; 0x41
 8000eae:	f7ff fefe 	bl	8000cae <SD_SendCmd>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d004      	beq.n	8000ec2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <SD_disk_initialize+0x1c4>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1e2      	bne.n	8000e86 <SD_disk_initialize+0x12e>
 8000ec0:	e000      	b.n	8000ec4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ec2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <SD_disk_initialize+0x1c4>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d007      	beq.n	8000edc <SD_disk_initialize+0x184>
 8000ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed0:	2050      	movs	r0, #80	; 0x50
 8000ed2:	f7ff feec 	bl	8000cae <SD_SendCmd>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SD_disk_initialize+0x188>
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <SD_disk_initialize+0x1c8>)
 8000ee2:	7bbb      	ldrb	r3, [r7, #14]
 8000ee4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ee6:	f7ff fd8f 	bl	8000a08 <DESELECT>
	SPI_RxByte();
 8000eea:	f7ff fdd1 	bl	8000a90 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d008      	beq.n	8000f06 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <SD_disk_initialize+0x1c0>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f023 0301 	bic.w	r3, r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <SD_disk_initialize+0x1c0>)
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e001      	b.n	8000f0a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000f06:	f7ff fe49 	bl	8000b9c <SD_PowerOff>
	}

	return Stat;
 8000f0a:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <SD_disk_initialize+0x1c0>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000686 	.word	0x20000686
 8000f20:	20000228 	.word	0x20000228

08000f24 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SD_disk_status+0x14>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e002      	b.n	8000f3e <SD_disk_status+0x1a>
	return Stat;
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SD_disk_status+0x28>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000000 	.word	0x20000000

08000f50 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <SD_disk_read+0x1c>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <SD_disk_read+0x20>
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	e051      	b.n	8001014 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f70:	4b2a      	ldr	r3, [pc, #168]	; (800101c <SD_disk_read+0xcc>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SD_disk_read+0x32>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e048      	b.n	8001014 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <SD_disk_read+0xd0>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d102      	bne.n	8000f94 <SD_disk_read+0x44>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	025b      	lsls	r3, r3, #9
 8000f92:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f94:	f7ff fd28 	bl	80009e8 <SELECT>

	if (count == 1)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d111      	bne.n	8000fc2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	2051      	movs	r0, #81	; 0x51
 8000fa2:	f7ff fe84 	bl	8000cae <SD_SendCmd>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d129      	bne.n	8001000 <SD_disk_read+0xb0>
 8000fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	f7ff fe0b 	bl	8000bcc <SD_RxDataBlock>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d021      	beq.n	8001000 <SD_disk_read+0xb0>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	e01e      	b.n	8001000 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	2052      	movs	r0, #82	; 0x52
 8000fc6:	f7ff fe72 	bl	8000cae <SD_SendCmd>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d117      	bne.n	8001000 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd4:	68b8      	ldr	r0, [r7, #8]
 8000fd6:	f7ff fdf9 	bl	8000bcc <SD_RxDataBlock>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00a      	beq.n	8000ff6 <SD_disk_read+0xa6>
				buff += 512;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fe6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1ed      	bne.n	8000fd0 <SD_disk_read+0x80>
 8000ff4:	e000      	b.n	8000ff8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ff6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	204c      	movs	r0, #76	; 0x4c
 8000ffc:	f7ff fe57 	bl	8000cae <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001000:	f7ff fd02 	bl	8000a08 <DESELECT>
	SPI_RxByte();
 8001004:	f7ff fd44 	bl	8000a90 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf14      	ite	ne
 800100e:	2301      	movne	r3, #1
 8001010:	2300      	moveq	r3, #0
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	20000228 	.word	0x20000228

08001024 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <SD_disk_write+0x1c>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <SD_disk_write+0x20>
 8001040:	2304      	movs	r3, #4
 8001042:	e06b      	b.n	800111c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001044:	4b37      	ldr	r3, [pc, #220]	; (8001124 <SD_disk_write+0x100>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SD_disk_write+0x32>
 8001052:	2303      	movs	r3, #3
 8001054:	e062      	b.n	800111c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <SD_disk_write+0x100>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SD_disk_write+0x44>
 8001064:	2302      	movs	r3, #2
 8001066:	e059      	b.n	800111c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001068:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <SD_disk_write+0x104>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <SD_disk_write+0x56>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	025b      	lsls	r3, r3, #9
 8001078:	607b      	str	r3, [r7, #4]

	SELECT();
 800107a:	f7ff fcb5 	bl	80009e8 <SELECT>

	if (count == 1)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d110      	bne.n	80010a6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	2058      	movs	r0, #88	; 0x58
 8001088:	f7ff fe11 	bl	8000cae <SD_SendCmd>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d13a      	bne.n	8001108 <SD_disk_write+0xe4>
 8001092:	21fe      	movs	r1, #254	; 0xfe
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f7ff fdc7 	bl	8000c28 <SD_TxDataBlock>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d033      	beq.n	8001108 <SD_disk_write+0xe4>
			count = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	e030      	b.n	8001108 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <SD_disk_write+0x104>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80010b2:	2100      	movs	r1, #0
 80010b4:	2077      	movs	r0, #119	; 0x77
 80010b6:	f7ff fdfa 	bl	8000cae <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80010ba:	6839      	ldr	r1, [r7, #0]
 80010bc:	2057      	movs	r0, #87	; 0x57
 80010be:	f7ff fdf6 	bl	8000cae <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	2059      	movs	r0, #89	; 0x59
 80010c6:	f7ff fdf2 	bl	8000cae <SD_SendCmd>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d11b      	bne.n	8001108 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010d0:	21fc      	movs	r1, #252	; 0xfc
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f7ff fda8 	bl	8000c28 <SD_TxDataBlock>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00a      	beq.n	80010f4 <SD_disk_write+0xd0>
				buff += 512;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010e4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1ee      	bne.n	80010d0 <SD_disk_write+0xac>
 80010f2:	e000      	b.n	80010f6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80010f4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80010f6:	21fd      	movs	r1, #253	; 0xfd
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fd95 	bl	8000c28 <SD_TxDataBlock>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <SD_disk_write+0xe4>
			{
				count = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001108:	f7ff fc7e 	bl	8000a08 <DESELECT>
	SPI_RxByte();
 800110c:	f7ff fcc0 	bl	8000a90 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf14      	ite	ne
 8001116:	2301      	movne	r3, #1
 8001118:	2300      	moveq	r3, #0
 800111a:	b2db      	uxtb	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000000 	.word	0x20000000
 8001128:	20000228 	.word	0x20000228

0800112c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b08b      	sub	sp, #44	; 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	603a      	str	r2, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	460b      	mov	r3, r1
 800113a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SD_disk_ioctl+0x1e>
 8001146:	2304      	movs	r3, #4
 8001148:	e113      	b.n	8001372 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	2b05      	cmp	r3, #5
 8001154:	d121      	bne.n	800119a <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d009      	beq.n	8001172 <SD_disk_ioctl+0x46>
 800115e:	2b02      	cmp	r3, #2
 8001160:	d00d      	beq.n	800117e <SD_disk_ioctl+0x52>
 8001162:	2b00      	cmp	r3, #0
 8001164:	d115      	bne.n	8001192 <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001166:	f7ff fd19 	bl	8000b9c <SD_PowerOff>
			res = RES_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001170:	e0fd      	b.n	800136e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001172:	f7ff fcd1 	bl	8000b18 <SD_PowerOn>
			res = RES_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800117c:	e0f7      	b.n	800136e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	1c5c      	adds	r4, r3, #1
 8001182:	f7ff fd17 	bl	8000bb4 <SD_CheckPower>
 8001186:	4603      	mov	r3, r0
 8001188:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800118a:	2300      	movs	r3, #0
 800118c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001190:	e0ed      	b.n	800136e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001192:	2304      	movs	r3, #4
 8001194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001198:	e0e9      	b.n	800136e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800119a:	4b78      	ldr	r3, [pc, #480]	; (800137c <SD_disk_ioctl+0x250>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SD_disk_ioctl+0x80>
 80011a8:	2303      	movs	r3, #3
 80011aa:	e0e2      	b.n	8001372 <SD_disk_ioctl+0x246>

		SELECT();
 80011ac:	f7ff fc1c 	bl	80009e8 <SELECT>

		switch (ctrl)
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	2b0d      	cmp	r3, #13
 80011b4:	f200 80cc 	bhi.w	8001350 <SD_disk_ioctl+0x224>
 80011b8:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <SD_disk_ioctl+0x94>)
 80011ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011be:	bf00      	nop
 80011c0:	080012bb 	.word	0x080012bb
 80011c4:	080011f9 	.word	0x080011f9
 80011c8:	080012ab 	.word	0x080012ab
 80011cc:	08001351 	.word	0x08001351
 80011d0:	08001351 	.word	0x08001351
 80011d4:	08001351 	.word	0x08001351
 80011d8:	08001351 	.word	0x08001351
 80011dc:	08001351 	.word	0x08001351
 80011e0:	08001351 	.word	0x08001351
 80011e4:	08001351 	.word	0x08001351
 80011e8:	08001351 	.word	0x08001351
 80011ec:	080012cd 	.word	0x080012cd
 80011f0:	080012f1 	.word	0x080012f1
 80011f4:	08001315 	.word	0x08001315
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80011f8:	2100      	movs	r1, #0
 80011fa:	2049      	movs	r0, #73	; 0x49
 80011fc:	f7ff fd57 	bl	8000cae <SD_SendCmd>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 80a8 	bne.w	8001358 <SD_disk_ioctl+0x22c>
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2110      	movs	r1, #16
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fcdc 	bl	8000bcc <SD_RxDataBlock>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 809e 	beq.w	8001358 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800121c:	7b3b      	ldrb	r3, [r7, #12]
 800121e:	099b      	lsrs	r3, r3, #6
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10e      	bne.n	8001244 <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001226:	7d7b      	ldrb	r3, [r7, #21]
 8001228:	b29a      	uxth	r2, r3
 800122a:	7d3b      	ldrb	r3, [r7, #20]
 800122c:	b29b      	uxth	r3, r3
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b29b      	uxth	r3, r3
 8001232:	4413      	add	r3, r2
 8001234:	b29b      	uxth	r3, r3
 8001236:	3301      	adds	r3, #1
 8001238:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800123a:	8bfb      	ldrh	r3, [r7, #30]
 800123c:	029a      	lsls	r2, r3, #10
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e02e      	b.n	80012a2 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001244:	7c7b      	ldrb	r3, [r7, #17]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	b2da      	uxtb	r2, r3
 800124c:	7dbb      	ldrb	r3, [r7, #22]
 800124e:	09db      	lsrs	r3, r3, #7
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4413      	add	r3, r2
 8001254:	b2da      	uxtb	r2, r3
 8001256:	7d7b      	ldrb	r3, [r7, #21]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f003 0306 	and.w	r3, r3, #6
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4413      	add	r3, r2
 8001264:	b2db      	uxtb	r3, r3
 8001266:	3302      	adds	r3, #2
 8001268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800126c:	7d3b      	ldrb	r3, [r7, #20]
 800126e:	099b      	lsrs	r3, r3, #6
 8001270:	b2db      	uxtb	r3, r3
 8001272:	b29a      	uxth	r2, r3
 8001274:	7cfb      	ldrb	r3, [r7, #19]
 8001276:	b29b      	uxth	r3, r3
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	b29b      	uxth	r3, r3
 800127c:	4413      	add	r3, r2
 800127e:	b29a      	uxth	r2, r3
 8001280:	7cbb      	ldrb	r3, [r7, #18]
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	b29b      	uxth	r3, r3
 8001286:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800128a:	b29b      	uxth	r3, r3
 800128c:	4413      	add	r3, r2
 800128e:	b29b      	uxth	r3, r3
 8001290:	3301      	adds	r3, #1
 8001292:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001294:	8bfa      	ldrh	r2, [r7, #30]
 8001296:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800129a:	3b09      	subs	r3, #9
 800129c:	409a      	lsls	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80012a8:	e056      	b.n	8001358 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012b8:	e055      	b.n	8001366 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80012ba:	f7ff fc13 	bl	8000ae4 <SD_ReadyWait>
 80012be:	4603      	mov	r3, r0
 80012c0:	2bff      	cmp	r3, #255	; 0xff
 80012c2:	d14b      	bne.n	800135c <SD_disk_ioctl+0x230>
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012ca:	e047      	b.n	800135c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012cc:	2100      	movs	r1, #0
 80012ce:	2049      	movs	r0, #73	; 0x49
 80012d0:	f7ff fced 	bl	8000cae <SD_SendCmd>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d142      	bne.n	8001360 <SD_disk_ioctl+0x234>
 80012da:	2110      	movs	r1, #16
 80012dc:	6a38      	ldr	r0, [r7, #32]
 80012de:	f7ff fc75 	bl	8000bcc <SD_RxDataBlock>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d03b      	beq.n	8001360 <SD_disk_ioctl+0x234>
 80012e8:	2300      	movs	r3, #0
 80012ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012ee:	e037      	b.n	8001360 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80012f0:	2100      	movs	r1, #0
 80012f2:	204a      	movs	r0, #74	; 0x4a
 80012f4:	f7ff fcdb 	bl	8000cae <SD_SendCmd>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d132      	bne.n	8001364 <SD_disk_ioctl+0x238>
 80012fe:	2110      	movs	r1, #16
 8001300:	6a38      	ldr	r0, [r7, #32]
 8001302:	f7ff fc63 	bl	8000bcc <SD_RxDataBlock>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d02b      	beq.n	8001364 <SD_disk_ioctl+0x238>
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001312:	e027      	b.n	8001364 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001314:	2100      	movs	r1, #0
 8001316:	207a      	movs	r0, #122	; 0x7a
 8001318:	f7ff fcc9 	bl	8000cae <SD_SendCmd>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d116      	bne.n	8001350 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001322:	2300      	movs	r3, #0
 8001324:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001328:	e00b      	b.n	8001342 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800132a:	6a3c      	ldr	r4, [r7, #32]
 800132c:	1c63      	adds	r3, r4, #1
 800132e:	623b      	str	r3, [r7, #32]
 8001330:	f7ff fbae 	bl	8000a90 <SPI_RxByte>
 8001334:	4603      	mov	r3, r0
 8001336:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800133c:	3301      	adds	r3, #1
 800133e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001342:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001346:	2b03      	cmp	r3, #3
 8001348:	d9ef      	bls.n	800132a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001350:	2304      	movs	r3, #4
 8001352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001356:	e006      	b.n	8001366 <SD_disk_ioctl+0x23a>
			break;
 8001358:	bf00      	nop
 800135a:	e004      	b.n	8001366 <SD_disk_ioctl+0x23a>
			break;
 800135c:	bf00      	nop
 800135e:	e002      	b.n	8001366 <SD_disk_ioctl+0x23a>
			break;
 8001360:	bf00      	nop
 8001362:	e000      	b.n	8001366 <SD_disk_ioctl+0x23a>
			break;
 8001364:	bf00      	nop
		}

		DESELECT();
 8001366:	f7ff fb4f 	bl	8000a08 <DESELECT>
		SPI_RxByte();
 800136a:	f7ff fb91 	bl	8000a90 <SPI_RxByte>
	}

	return res;
 800136e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001372:	4618      	mov	r0, r3
 8001374:	372c      	adds	r7, #44	; 0x2c
 8001376:	46bd      	mov	sp, r7
 8001378:	bd90      	pop	{r4, r7, pc}
 800137a:	bf00      	nop
 800137c:	20000000 	.word	0x20000000

08001380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b3c      	ldr	r3, [pc, #240]	; (800148c <MX_GPIO_Init+0x10c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a3b      	ldr	r2, [pc, #236]	; (800148c <MX_GPIO_Init+0x10c>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <MX_GPIO_Init+0x10c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b35      	ldr	r3, [pc, #212]	; (800148c <MX_GPIO_Init+0x10c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a34      	ldr	r2, [pc, #208]	; (800148c <MX_GPIO_Init+0x10c>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <MX_GPIO_Init+0x10c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <MX_GPIO_Init+0x10c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a2d      	ldr	r2, [pc, #180]	; (800148c <MX_GPIO_Init+0x10c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b2b      	ldr	r3, [pc, #172]	; (800148c <MX_GPIO_Init+0x10c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b27      	ldr	r3, [pc, #156]	; (800148c <MX_GPIO_Init+0x10c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a26      	ldr	r2, [pc, #152]	; (800148c <MX_GPIO_Init+0x10c>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <MX_GPIO_Init+0x10c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140c:	4820      	ldr	r0, [pc, #128]	; (8001490 <MX_GPIO_Init+0x110>)
 800140e:	f002 f86d 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001418:	481e      	ldr	r0, [pc, #120]	; (8001494 <MX_GPIO_Init+0x114>)
 800141a:	f002 f867 	bl	80034ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800141e:	2200      	movs	r2, #0
 8001420:	f241 117f 	movw	r1, #4479	; 0x117f
 8001424:	481c      	ldr	r0, [pc, #112]	; (8001498 <MX_GPIO_Init+0x118>)
 8001426:	f002 f861 	bl	80034ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED13_Pin;
 800142a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4813      	ldr	r0, [pc, #76]	; (8001490 <MX_GPIO_Init+0x110>)
 8001444:	f001 fed0 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001448:	f44f 738f 	mov.w	r3, #286	; 0x11e
 800144c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001456:	2302      	movs	r3, #2
 8001458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480c      	ldr	r0, [pc, #48]	; (8001494 <MX_GPIO_Init+0x114>)
 8001462:	f001 fec1 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB3 PB4 PB5 PB6
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001466:	f241 137f 	movw	r3, #4479	; 0x117f
 800146a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001474:	2302      	movs	r3, #2
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_GPIO_Init+0x118>)
 8001480:	f001 feb2 	bl	80031e8 <HAL_GPIO_Init>

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	40020800 	.word	0x40020800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400

0800149c <SendUART>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SendUART(char *txt) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
#if 0
	while(CDC_Transmit_FS(txt, strlen(txt)) == USBD_BUSY) {
	}
#else
	CDC_Transmit_FS(txt, strlen(txt));
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7fe fe9b 	bl	80001e0 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f00b f88f 	bl	800c5d4 <CDC_Transmit_FS>
#endif
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <ClearDict>:
	uint16_t idx;
	uint16_t l;
} dict[4096];
int dictSize = 0;

void ClearDict(int mcs) {
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4096; i++) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e02e      	b.n	800152c <ClearDict+0x6c>
		if(i < (1<< mcs)) {
 80014ce:	2201      	movs	r2, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	da15      	bge.n	8001508 <ClearDict+0x48>
			dict[i].idx = i;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	b299      	uxth	r1, r3
 80014e0:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <ClearDict+0x90>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			dict[i].l = 1;
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <ClearDict+0x90>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	2201      	movs	r2, #1
 80014f2:	805a      	strh	r2, [r3, #2]
			dictBuffer[dict[i].idx] = i; // ith color at ith entry
 80014f4:	4a16      	ldr	r2, [pc, #88]	; (8001550 <ClearDict+0x90>)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	b2d9      	uxtb	r1, r3
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <ClearDict+0x94>)
 8001504:	5499      	strb	r1, [r3, r2]
 8001506:	e00e      	b.n	8001526 <ClearDict+0x66>
		}
		else {
			dict[i].idx = 1 << mcs;
 8001508:	2201      	movs	r2, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	b299      	uxth	r1, r3
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <ClearDict+0x90>)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			dict[i].l = 0;
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <ClearDict+0x90>)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	2200      	movs	r2, #0
 8001524:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i < 4096; i++) {
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3301      	adds	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001532:	dbcc      	blt.n	80014ce <ClearDict+0xe>
		}
	}


	dictSize = (1<< mcs) + 2;
 8001534:	2201      	movs	r2, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	3302      	adds	r3, #2
 800153e:	4a06      	ldr	r2, [pc, #24]	; (8001558 <ClearDict+0x98>)
 8001540:	6013      	str	r3, [r2, #0]
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20017b40 	.word	0x20017b40
 8001554:	20001800 	.word	0x20001800
 8001558:	20000430 	.word	0x20000430

0800155c <LoadImageSubData>:
uint8_t imageSubData[256];
uint8_t imageSubDataSize = 0;
int imageSubDataIdx = 0;
int imageSubDataBitsLeft = 8;

int LoadImageSubData() {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
	imageSubDataIdx = 0;
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <LoadImageSubData+0x68>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
	imageSubDataBitsLeft = 8;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <LoadImageSubData+0x6c>)
 800156a:	2208      	movs	r2, #8
 800156c:	601a      	str	r2, [r3, #0]

	UINT l;
	FRESULT res = f_read(&file, &imageSubDataSize, 1, &l);
 800156e:	463b      	mov	r3, r7
 8001570:	2201      	movs	r2, #1
 8001572:	4916      	ldr	r1, [pc, #88]	; (80015cc <LoadImageSubData+0x70>)
 8001574:	4816      	ldr	r0, [pc, #88]	; (80015d0 <LoadImageSubData+0x74>)
 8001576:	f00a fac9 	bl	800bb0c <f_read>
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	if(res != FR_OK)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <LoadImageSubData+0x2e>
		SendUART("Error while reading data!");
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <LoadImageSubData+0x78>)
 8001586:	f7ff ff89 	bl	800149c <SendUART>

	if(imageSubDataSize > 0) {
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <LoadImageSubData+0x70>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d013      	beq.n	80015ba <LoadImageSubData+0x5e>
		sprintf(strBuffer, "data size = %d\r\n", imageSubDataSize);
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <LoadImageSubData+0x70>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	490f      	ldr	r1, [pc, #60]	; (80015d8 <LoadImageSubData+0x7c>)
 800159a:	4810      	ldr	r0, [pc, #64]	; (80015dc <LoadImageSubData+0x80>)
 800159c:	f00b fd4c 	bl	800d038 <siprintf>
		SendUART(strBuffer);
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <LoadImageSubData+0x80>)
 80015a2:	f7ff ff7b 	bl	800149c <SendUART>
		f_read(&file, imageSubData, imageSubDataSize, &l);
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <LoadImageSubData+0x70>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	463b      	mov	r3, r7
 80015ae:	490c      	ldr	r1, [pc, #48]	; (80015e0 <LoadImageSubData+0x84>)
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <LoadImageSubData+0x74>)
 80015b2:	f00a faab 	bl	800bb0c <f_read>
		return 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <LoadImageSubData+0x60>
	}

	return 0; // no more data!
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000438 	.word	0x20000438
 80015c8:	20000004 	.word	0x20000004
 80015cc:	20000434 	.word	0x20000434
 80015d0:	20005804 	.word	0x20005804
 80015d4:	0800e144 	.word	0x0800e144
 80015d8:	0800e160 	.word	0x0800e160
 80015dc:	2000022c 	.word	0x2000022c
 80015e0:	20000688 	.word	0x20000688

080015e4 <GetNextCode>:

uint16_t GetNextCode(int codeSize) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	uint16_t code = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	81fb      	strh	r3, [r7, #14]

	int bitCount = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
	while(bitCount < codeSize) {
 80015f4:	e03b      	b.n	800166e <GetNextCode+0x8a>
		code += (imageSubData[imageSubDataIdx] >> (8 - imageSubDataBitsLeft)) << bitCount;
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <GetNextCode+0xb8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a29      	ldr	r2, [pc, #164]	; (80016a0 <GetNextCode+0xbc>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <GetNextCode+0xc0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1c3 0308 	rsb	r3, r3, #8
 8001608:	411a      	asrs	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	b29a      	uxth	r2, r3
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	4413      	add	r3, r2
 8001616:	81fb      	strh	r3, [r7, #14]

		if(imageSubDataBitsLeft < codeSize - bitCount) {
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad2      	subs	r2, r2, r3
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <GetNextCode+0xc0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	dd19      	ble.n	800165a <GetNextCode+0x76>
			bitCount += imageSubDataBitsLeft;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <GetNextCode+0xc0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	4413      	add	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]

			imageSubDataIdx++;
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <GetNextCode+0xb8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a19      	ldr	r2, [pc, #100]	; (800169c <GetNextCode+0xb8>)
 8001638:	6013      	str	r3, [r2, #0]
			if(imageSubDataIdx >= imageSubDataSize)
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <GetNextCode+0xc4>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <GetNextCode+0xb8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	dc04      	bgt.n	8001652 <GetNextCode+0x6e>
				if(!LoadImageSubData())
 8001648:	f7ff ff88 	bl	800155c <LoadImageSubData>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d012      	beq.n	8001678 <GetNextCode+0x94>
					break;

			imageSubDataBitsLeft = 8;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <GetNextCode+0xc0>)
 8001654:	2208      	movs	r2, #8
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e009      	b.n	800166e <GetNextCode+0x8a>
		}
		else {
			imageSubDataBitsLeft -= (codeSize - bitCount);
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <GetNextCode+0xc0>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1acb      	subs	r3, r1, r3
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <GetNextCode+0xc0>)
 8001668:	6013      	str	r3, [r2, #0]
			bitCount = codeSize;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60bb      	str	r3, [r7, #8]
	while(bitCount < codeSize) {
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	429a      	cmp	r2, r3
 8001674:	dbbf      	blt.n	80015f6 <GetNextCode+0x12>
 8001676:	e000      	b.n	800167a <GetNextCode+0x96>
					break;
 8001678:	bf00      	nop
		}
	}

	return code & ((1 << codeSize) - 1);
 800167a:	2201      	movs	r2, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	b29b      	uxth	r3, r3
 8001684:	3b01      	subs	r3, #1
 8001686:	b29b      	uxth	r3, r3
 8001688:	b21a      	sxth	r2, r3
 800168a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800168e:	4013      	ands	r3, r2
 8001690:	b21b      	sxth	r3, r3
 8001692:	b29b      	uxth	r3, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000438 	.word	0x20000438
 80016a0:	20000688 	.word	0x20000688
 80016a4:	20000004 	.word	0x20000004
 80016a8:	20000434 	.word	0x20000434

080016ac <Decode>:

void Decode(int mcs) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	int compressedSize = mcs + 1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int clearCode = 1 << mcs;
 80016ba:	2201      	movs	r2, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
	int eoi = clearCode + 1;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	613b      	str	r3, [r7, #16]

	frameIdx = 0;
 80016ca:	4ba1      	ldr	r3, [pc, #644]	; (8001950 <Decode+0x2a4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

	LoadImageSubData(); // load first data chunk
 80016d0:	f7ff ff44 	bl	800155c <LoadImageSubData>

	uint16_t current = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	81fb      	strh	r3, [r7, #14]
	uint16_t last = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	857b      	strh	r3, [r7, #42]	; 0x2a

	while(1) { // XXX warning!!!
		// get current
		current = GetNextCode(compressedSize);
 80016dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016de:	f7ff ff81 	bl	80015e4 <GetNextCode>
 80016e2:	4603      	mov	r3, r0
 80016e4:	81fb      	strh	r3, [r7, #14]

		if(current == clearCode)
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d103      	bne.n	80016f6 <Decode+0x4a>
			ClearDict(mcs);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fee6 	bl	80014c0 <ClearDict>
 80016f4:	e129      	b.n	800194a <Decode+0x29e>

		else if(current == eoi)
 80016f6:	89fb      	ldrh	r3, [r7, #14]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	f000 8132 	beq.w	8001964 <Decode+0x2b8>
			return; // we're done decoding

		else if(dict[current].l > 0) {
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	4a94      	ldr	r2, [pc, #592]	; (8001954 <Decode+0x2a8>)
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	885b      	ldrh	r3, [r3, #2]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 808e 	beq.w	800182c <Decode+0x180>
			// output
			for(int i = 0; i < dict[current].l; i++)
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	e012      	b.n	800173c <Decode+0x90>
				frame[frameIdx++] = dictBuffer[dict[current].idx + i];
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	4a8e      	ldr	r2, [pc, #568]	; (8001954 <Decode+0x2a8>)
 800171a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800171e:	461a      	mov	r2, r3
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	441a      	add	r2, r3
 8001724:	4b8a      	ldr	r3, [pc, #552]	; (8001950 <Decode+0x2a4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	4889      	ldr	r0, [pc, #548]	; (8001950 <Decode+0x2a4>)
 800172c:	6001      	str	r1, [r0, #0]
 800172e:	498a      	ldr	r1, [pc, #552]	; (8001958 <Decode+0x2ac>)
 8001730:	5c89      	ldrb	r1, [r1, r2]
 8001732:	4a8a      	ldr	r2, [pc, #552]	; (800195c <Decode+0x2b0>)
 8001734:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < dict[current].l; i++)
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	3301      	adds	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	4a85      	ldr	r2, [pc, #532]	; (8001954 <Decode+0x2a8>)
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	885b      	ldrh	r3, [r3, #2]
 8001746:	461a      	mov	r2, r3
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	4293      	cmp	r3, r2
 800174c:	dbe3      	blt.n	8001716 <Decode+0x6a>

			if(last != clearCode) {
 800174e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	429a      	cmp	r2, r3
 8001754:	f000 80f9 	beq.w	800194a <Decode+0x29e>
				uint8_t k = dictBuffer[dict[current].idx];
 8001758:	89fb      	ldrh	r3, [r7, #14]
 800175a:	4a7e      	ldr	r2, [pc, #504]	; (8001954 <Decode+0x2a8>)
 800175c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001760:	461a      	mov	r2, r3
 8001762:	4b7d      	ldr	r3, [pc, #500]	; (8001958 <Decode+0x2ac>)
 8001764:	5c9b      	ldrb	r3, [r3, r2]
 8001766:	733b      	strb	r3, [r7, #12]

				// add new code
				dict[dictSize].idx = dict[dictSize - 1].idx + dict[dictSize - 1].l;
 8001768:	4b7d      	ldr	r3, [pc, #500]	; (8001960 <Decode+0x2b4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3b01      	subs	r3, #1
 800176e:	4a79      	ldr	r2, [pc, #484]	; (8001954 <Decode+0x2a8>)
 8001770:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001774:	4b7a      	ldr	r3, [pc, #488]	; (8001960 <Decode+0x2b4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3b01      	subs	r3, #1
 800177a:	4a76      	ldr	r2, [pc, #472]	; (8001954 <Decode+0x2a8>)
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	885a      	ldrh	r2, [r3, #2]
 8001782:	4b77      	ldr	r3, [pc, #476]	; (8001960 <Decode+0x2b4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	440a      	add	r2, r1
 8001788:	b291      	uxth	r1, r2
 800178a:	4a72      	ldr	r2, [pc, #456]	; (8001954 <Decode+0x2a8>)
 800178c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
				dict[dictSize].l = dict[last].l + 1;
 8001790:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001792:	4a70      	ldr	r2, [pc, #448]	; (8001954 <Decode+0x2a8>)
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	885a      	ldrh	r2, [r3, #2]
 800179a:	4b71      	ldr	r3, [pc, #452]	; (8001960 <Decode+0x2b4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3201      	adds	r2, #1
 80017a0:	b291      	uxth	r1, r2
 80017a2:	4a6c      	ldr	r2, [pc, #432]	; (8001954 <Decode+0x2a8>)
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	460a      	mov	r2, r1
 80017aa:	805a      	strh	r2, [r3, #2]
				for(int i = 0; i < dict[dictSize].l; i++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	e021      	b.n	80017f6 <Decode+0x14a>
					dictBuffer[dict[dictSize].idx + i] = i == dict[dictSize].l - 1 ? k : dictBuffer[dict[last].idx + i];
 80017b2:	4b6b      	ldr	r3, [pc, #428]	; (8001960 <Decode+0x2b4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a67      	ldr	r2, [pc, #412]	; (8001954 <Decode+0x2a8>)
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	885b      	ldrh	r3, [r3, #2]
 80017be:	3b01      	subs	r3, #1
 80017c0:	6a3a      	ldr	r2, [r7, #32]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d009      	beq.n	80017da <Decode+0x12e>
 80017c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017c8:	4a62      	ldr	r2, [pc, #392]	; (8001954 <Decode+0x2a8>)
 80017ca:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80017ce:	461a      	mov	r2, r3
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a60      	ldr	r2, [pc, #384]	; (8001958 <Decode+0x2ac>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	e000      	b.n	80017dc <Decode+0x130>
 80017da:	7b3b      	ldrb	r3, [r7, #12]
 80017dc:	4a60      	ldr	r2, [pc, #384]	; (8001960 <Decode+0x2b4>)
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	495c      	ldr	r1, [pc, #368]	; (8001954 <Decode+0x2a8>)
 80017e2:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 80017e6:	4611      	mov	r1, r2
 80017e8:	6a3a      	ldr	r2, [r7, #32]
 80017ea:	440a      	add	r2, r1
 80017ec:	495a      	ldr	r1, [pc, #360]	; (8001958 <Decode+0x2ac>)
 80017ee:	548b      	strb	r3, [r1, r2]
				for(int i = 0; i < dict[dictSize].l; i++)
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	3301      	adds	r3, #1
 80017f4:	623b      	str	r3, [r7, #32]
 80017f6:	4b5a      	ldr	r3, [pc, #360]	; (8001960 <Decode+0x2b4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a56      	ldr	r2, [pc, #344]	; (8001954 <Decode+0x2a8>)
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	885b      	ldrh	r3, [r3, #2]
 8001802:	461a      	mov	r2, r3
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	4293      	cmp	r3, r2
 8001808:	dbd3      	blt.n	80017b2 <Decode+0x106>

				dictSize++;
 800180a:	4b55      	ldr	r3, [pc, #340]	; (8001960 <Decode+0x2b4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	4a53      	ldr	r2, [pc, #332]	; (8001960 <Decode+0x2b4>)
 8001812:	6013      	str	r3, [r2, #0]

				if(dictSize >= (1 << compressedSize))
 8001814:	2201      	movs	r2, #1
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	409a      	lsls	r2, r3
 800181a:	4b51      	ldr	r3, [pc, #324]	; (8001960 <Decode+0x2b4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	f300 8093 	bgt.w	800194a <Decode+0x29e>
					compressedSize++;
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	3301      	adds	r3, #1
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800182a:	e08e      	b.n	800194a <Decode+0x29e>
			}
		}
		else {
			uint8_t k = dictBuffer[dict[last].idx];
 800182c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800182e:	4a49      	ldr	r2, [pc, #292]	; (8001954 <Decode+0x2a8>)
 8001830:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001834:	461a      	mov	r2, r3
 8001836:	4b48      	ldr	r3, [pc, #288]	; (8001958 <Decode+0x2ac>)
 8001838:	5c9b      	ldrb	r3, [r3, r2]
 800183a:	737b      	strb	r3, [r7, #13]

			// output
			for(int i = 0; i < dict[last].l; i++)
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	e012      	b.n	8001868 <Decode+0x1bc>
				frame[frameIdx++] = dictBuffer[dict[last].idx + i];
 8001842:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001844:	4a43      	ldr	r2, [pc, #268]	; (8001954 <Decode+0x2a8>)
 8001846:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800184a:	461a      	mov	r2, r3
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	441a      	add	r2, r3
 8001850:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <Decode+0x2a4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	1c59      	adds	r1, r3, #1
 8001856:	483e      	ldr	r0, [pc, #248]	; (8001950 <Decode+0x2a4>)
 8001858:	6001      	str	r1, [r0, #0]
 800185a:	493f      	ldr	r1, [pc, #252]	; (8001958 <Decode+0x2ac>)
 800185c:	5c89      	ldrb	r1, [r1, r2]
 800185e:	4a3f      	ldr	r2, [pc, #252]	; (800195c <Decode+0x2b0>)
 8001860:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < dict[last].l; i++)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800186a:	4a3a      	ldr	r2, [pc, #232]	; (8001954 <Decode+0x2a8>)
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	885b      	ldrh	r3, [r3, #2]
 8001872:	461a      	mov	r2, r3
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	4293      	cmp	r3, r2
 8001878:	dbe3      	blt.n	8001842 <Decode+0x196>
			frame[frameIdx++] = k;
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <Decode+0x2a4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	4933      	ldr	r1, [pc, #204]	; (8001950 <Decode+0x2a4>)
 8001882:	600a      	str	r2, [r1, #0]
 8001884:	4935      	ldr	r1, [pc, #212]	; (800195c <Decode+0x2b0>)
 8001886:	7b7a      	ldrb	r2, [r7, #13]
 8001888:	54ca      	strb	r2, [r1, r3]

			// add new code
			dict[dictSize].idx = dict[dictSize - 1].idx + dict[dictSize - 1].l;
 800188a:	4b35      	ldr	r3, [pc, #212]	; (8001960 <Decode+0x2b4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	4a30      	ldr	r2, [pc, #192]	; (8001954 <Decode+0x2a8>)
 8001892:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001896:	4b32      	ldr	r3, [pc, #200]	; (8001960 <Decode+0x2b4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	4a2d      	ldr	r2, [pc, #180]	; (8001954 <Decode+0x2a8>)
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	885a      	ldrh	r2, [r3, #2]
 80018a4:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <Decode+0x2b4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	440a      	add	r2, r1
 80018aa:	b291      	uxth	r1, r2
 80018ac:	4a29      	ldr	r2, [pc, #164]	; (8001954 <Decode+0x2a8>)
 80018ae:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			dict[dictSize].l = dict[last].l + 1;
 80018b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <Decode+0x2a8>)
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	885a      	ldrh	r2, [r3, #2]
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <Decode+0x2b4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3201      	adds	r2, #1
 80018c2:	b291      	uxth	r1, r2
 80018c4:	4a23      	ldr	r2, [pc, #140]	; (8001954 <Decode+0x2a8>)
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	460a      	mov	r2, r1
 80018cc:	805a      	strh	r2, [r3, #2]
			for(int i = 0; i < dict[dictSize].l; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	e021      	b.n	8001918 <Decode+0x26c>
				dictBuffer[dict[dictSize].idx + i] = i == dict[dictSize].l - 1 ? k : dictBuffer[dict[last].idx + i];
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <Decode+0x2b4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <Decode+0x2a8>)
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	885b      	ldrh	r3, [r3, #2]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d009      	beq.n	80018fc <Decode+0x250>
 80018e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018ea:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <Decode+0x2a8>)
 80018ec:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80018f0:	461a      	mov	r2, r3
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a18      	ldr	r2, [pc, #96]	; (8001958 <Decode+0x2ac>)
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	e000      	b.n	80018fe <Decode+0x252>
 80018fc:	7b7b      	ldrb	r3, [r7, #13]
 80018fe:	4a18      	ldr	r2, [pc, #96]	; (8001960 <Decode+0x2b4>)
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	4914      	ldr	r1, [pc, #80]	; (8001954 <Decode+0x2a8>)
 8001904:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 8001908:	4611      	mov	r1, r2
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	440a      	add	r2, r1
 800190e:	4912      	ldr	r1, [pc, #72]	; (8001958 <Decode+0x2ac>)
 8001910:	548b      	strb	r3, [r1, r2]
			for(int i = 0; i < dict[dictSize].l; i++)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	3301      	adds	r3, #1
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <Decode+0x2b4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <Decode+0x2a8>)
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	885b      	ldrh	r3, [r3, #2]
 8001924:	461a      	mov	r2, r3
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4293      	cmp	r3, r2
 800192a:	dbd3      	blt.n	80018d4 <Decode+0x228>

			dictSize++;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <Decode+0x2b4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <Decode+0x2b4>)
 8001934:	6013      	str	r3, [r2, #0]

			if(dictSize >= (1 << compressedSize))
 8001936:	2201      	movs	r2, #1
 8001938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193a:	409a      	lsls	r2, r3
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <Decode+0x2b4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	dc02      	bgt.n	800194a <Decode+0x29e>
				compressedSize++;
 8001944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001946:	3301      	adds	r3, #1
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		last = current;
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	857b      	strh	r3, [r7, #42]	; 0x2a
		current = GetNextCode(compressedSize);
 800194e:	e6c5      	b.n	80016dc <Decode+0x30>
 8001950:	2000042c 	.word	0x2000042c
 8001954:	20017b40 	.word	0x20017b40
 8001958:	20001800 	.word	0x20001800
 800195c:	20016b34 	.word	0x20016b34
 8001960:	20000430 	.word	0x20000430
			return; // we're done decoding
 8001964:	bf00      	nop
	}
}
 8001966:	3730      	adds	r7, #48	; 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <sRGB2RGB>:

uint8_t sRGB2RGB(uint8_t v) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
	return powf(v / 255.0f, 2.2f) * 255.0f;
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001980:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80019b4 <sRGB2RGB+0x48>
 8001984:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001988:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80019b8 <sRGB2RGB+0x4c>
 800198c:	eeb0 0a66 	vmov.f32	s0, s13
 8001990:	f00b fea0 	bl	800d6d4 <powf>
 8001994:	eeb0 7a40 	vmov.f32	s14, s0
 8001998:	eddf 7a06 	vldr	s15, [pc, #24]	; 80019b4 <sRGB2RGB+0x48>
 800199c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a4:	edc7 7a00 	vstr	s15, [r7]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2db      	uxtb	r3, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	437f0000 	.word	0x437f0000
 80019b8:	400ccccd 	.word	0x400ccccd

080019bc <ReadGifPalette>:

void ReadGifPalette(uint8_t *palette, int colorCount) {
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	UINT l;
	if(f_read(&file, palette, sizeof(uint8_t) * 3 * colorCount, &l) != FR_OK) {
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	441a      	add	r2, r3
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4812      	ldr	r0, [pc, #72]	; (8001a20 <ReadGifPalette+0x64>)
 80019d6:	f00a f899 	bl	800bb0c <f_read>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <ReadGifPalette+0x2c>
		SendUART("Can't read gif colors!);");
 80019e0:	4810      	ldr	r0, [pc, #64]	; (8001a24 <ReadGifPalette+0x68>)
 80019e2:	f7ff fd5b 	bl	800149c <SendUART>
 80019e6:	e018      	b.n	8001a1a <ReadGifPalette+0x5e>
		return;
	}

	// gamma correction ???
	for(int i = 0; i < colorCount * 3; i++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e00e      	b.n	8001a0c <ReadGifPalette+0x50>
		palette[i] = sRGB2RGB(palette[i]);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	7819      	ldrb	r1, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	18d4      	adds	r4, r2, r3
 80019fc:	4608      	mov	r0, r1
 80019fe:	f7ff ffb5 	bl	800196c <sRGB2RGB>
 8001a02:	4603      	mov	r3, r0
 8001a04:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < colorCount * 3; i++) {
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbe9      	blt.n	80019ee <ReadGifPalette+0x32>
	}
}
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}
 8001a20:	20005804 	.word	0x20005804
 8001a24:	0800e174 	.word	0x0800e174

08001a28 <ReadGifImage>:

void ReadGifImage() {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08c      	sub	sp, #48	; 0x30
 8001a2c:	af02      	add	r7, sp, #8
	UINT l;

	while(1) {
		uint8_t sep;
		FRESULT res = f_read(&file, &sep, sizeof(uint8_t), &l);
 8001a2e:	f107 0320 	add.w	r3, r7, #32
 8001a32:	f107 011f 	add.w	r1, r7, #31
 8001a36:	2201      	movs	r2, #1
 8001a38:	4848      	ldr	r0, [pc, #288]	; (8001b5c <ReadGifImage+0x134>)
 8001a3a:	f00a f867 	bl	800bb0c <f_read>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(sep == 0x3b) // rewind
 8001a44:	7ffb      	ldrb	r3, [r7, #31]
 8001a46:	2b3b      	cmp	r3, #59	; 0x3b
 8001a48:	d105      	bne.n	8001a56 <ReadGifImage+0x2e>
			f_lseek(&file, gifStart);
 8001a4a:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <ReadGifImage+0x138>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4842      	ldr	r0, [pc, #264]	; (8001b5c <ReadGifImage+0x134>)
 8001a52:	f00a f9ba 	bl	800bdca <f_lseek>

		if(sep == 0x21) {
 8001a56:	7ffb      	ldrb	r3, [r7, #31]
 8001a58:	2b21      	cmp	r3, #33	; 0x21
 8001a5a:	d12d      	bne.n	8001ab8 <ReadGifImage+0x90>
			GifExtensionHeader extHeader;
			f_read(&file, &extHeader, sizeof(GifExtensionHeader), &l);
 8001a5c:	f107 0320 	add.w	r3, r7, #32
 8001a60:	f107 011c 	add.w	r1, r7, #28
 8001a64:	2202      	movs	r2, #2
 8001a66:	483d      	ldr	r0, [pc, #244]	; (8001b5c <ReadGifImage+0x134>)
 8001a68:	f00a f850 	bl	800bb0c <f_read>

			if(extHeader.label == 0xf9) {
 8001a6c:	7f3b      	ldrb	r3, [r7, #28]
 8001a6e:	2bf9      	cmp	r3, #249	; 0xf9
 8001a70:	d114      	bne.n	8001a9c <ReadGifImage+0x74>
				//SendUART("---- Graphics Control Extension ----\r\n");
				GifGraphicsControlExtension desc;
				f_read(&file, &desc, sizeof(GifGraphicsControlExtension), &l);
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	f107 0114 	add.w	r1, r7, #20
 8001a7a:	2205      	movs	r2, #5
 8001a7c:	4837      	ldr	r0, [pc, #220]	; (8001b5c <ReadGifImage+0x134>)
 8001a7e:	f00a f845 	bl	800bb0c <f_read>

				delayTime = desc.delayTime;
 8001a82:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <ReadGifImage+0x13c>)
 8001a8a:	801a      	strh	r2, [r3, #0]
				sprintf(strBuffer, "delay time: %d\r\n", delayTime);
 8001a8c:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <ReadGifImage+0x13c>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4935      	ldr	r1, [pc, #212]	; (8001b68 <ReadGifImage+0x140>)
 8001a94:	4835      	ldr	r0, [pc, #212]	; (8001b6c <ReadGifImage+0x144>)
 8001a96:	f00b facf 	bl	800d038 <siprintf>
 8001a9a:	e00d      	b.n	8001ab8 <ReadGifImage+0x90>
				//SendUART(strBuffer);

				//SendUART("\r\n");
			}
			else {
				sprintf(strBuffer, "---- Unknown Extension %#X ----\r\n", extHeader.label);
 8001a9c:	7f3b      	ldrb	r3, [r7, #28]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4933      	ldr	r1, [pc, #204]	; (8001b70 <ReadGifImage+0x148>)
 8001aa2:	4832      	ldr	r0, [pc, #200]	; (8001b6c <ReadGifImage+0x144>)
 8001aa4:	f00b fac8 	bl	800d038 <siprintf>
				//SendUART(strBuffer);
				// read remaining bytes
				f_read(&file, &extBuffer, extHeader.blockSize, &l);
 8001aa8:	7f7b      	ldrb	r3, [r7, #29]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	4930      	ldr	r1, [pc, #192]	; (8001b74 <ReadGifImage+0x14c>)
 8001ab2:	482a      	ldr	r0, [pc, #168]	; (8001b5c <ReadGifImage+0x134>)
 8001ab4:	f00a f82a 	bl	800bb0c <f_read>
				//SendUART("\r\n");
			}
		}

		if(sep == 0x2c) {
 8001ab8:	7ffb      	ldrb	r3, [r7, #31]
 8001aba:	2b2c      	cmp	r3, #44	; 0x2c
 8001abc:	d1b7      	bne.n	8001a2e <ReadGifImage+0x6>
			// image data
			//SendUART("---- Image Descriptor ----\r\n");

			GifImageDescriptor desc;
			res = f_read(&file, &desc, sizeof(GifImageDescriptor), &l);
 8001abe:	f107 0320 	add.w	r3, r7, #32
 8001ac2:	f107 0108 	add.w	r1, r7, #8
 8001ac6:	2209      	movs	r2, #9
 8001ac8:	4824      	ldr	r0, [pc, #144]	; (8001b5c <ReadGifImage+0x134>)
 8001aca:	f00a f81f 	bl	800bb0c <f_read>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			sprintf(strBuffer, "pos: %dx%d\r\nsize: %dx%d\r\n", desc.left, desc.top, desc.width, desc.height);
 8001ad4:	893b      	ldrh	r3, [r7, #8]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	897b      	ldrh	r3, [r7, #10]
 8001ada:	4618      	mov	r0, r3
 8001adc:	89bb      	ldrh	r3, [r7, #12]
 8001ade:	89fa      	ldrh	r2, [r7, #14]
 8001ae0:	9201      	str	r2, [sp, #4]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	4923      	ldr	r1, [pc, #140]	; (8001b78 <ReadGifImage+0x150>)
 8001aea:	4820      	ldr	r0, [pc, #128]	; (8001b6c <ReadGifImage+0x144>)
 8001aec:	f00b faa4 	bl	800d038 <siprintf>
			//SendUART(strBuffer);

			localPaletteColorCount = 2 << (desc.flags & 0x07);
 8001af0:	7c3b      	ldrb	r3, [r7, #16]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	2202      	movs	r2, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <ReadGifImage+0x154>)
 8001afe:	6013      	str	r3, [r2, #0]
			useLocalPalette = desc.flags & 0x80 ? 1 : 0;
 8001b00:	7c3b      	ldrb	r3, [r7, #16]
 8001b02:	b25b      	sxtb	r3, r3
 8001b04:	11db      	asrs	r3, r3, #7
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <ReadGifImage+0x158>)
 8001b0e:	6013      	str	r3, [r2, #0]
			if(useLocalPalette) {
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <ReadGifImage+0x158>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <ReadGifImage+0xfc>
				ReadGifPalette(localPalette, localPaletteColorCount);
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <ReadGifImage+0x154>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4819      	ldr	r0, [pc, #100]	; (8001b84 <ReadGifImage+0x15c>)
 8001b20:	f7ff ff4c 	bl	80019bc <ReadGifPalette>

			// decode GIF

			// read min code size
			uint8_t mcs;
			res = f_read(&file, &mcs, 1, &l);
 8001b24:	f107 0320 	add.w	r3, r7, #32
 8001b28:	1df9      	adds	r1, r7, #7
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	480b      	ldr	r0, [pc, #44]	; (8001b5c <ReadGifImage+0x134>)
 8001b2e:	f009 ffed 	bl	800bb0c <f_read>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sprintf(strBuffer, "MCS = %d\r\n", mcs);
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4912      	ldr	r1, [pc, #72]	; (8001b88 <ReadGifImage+0x160>)
 8001b3e:	480b      	ldr	r0, [pc, #44]	; (8001b6c <ReadGifImage+0x144>)
 8001b40:	f00b fa7a 	bl	800d038 <siprintf>
			SendUART(strBuffer);
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <ReadGifImage+0x144>)
 8001b46:	f7ff fca9 	bl	800149c <SendUART>

			Decode(mcs);
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fdad 	bl	80016ac <Decode>
				SendUART("\r\n");
			}

			SendUART("\r\n");
			*/
			break;
 8001b52:	bf00      	nop
		}
	}
}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20005804 	.word	0x20005804
 8001b60:	20017b38 	.word	0x20017b38
 8001b64:	20017b34 	.word	0x20017b34
 8001b68:	0800e190 	.word	0x0800e190
 8001b6c:	2000022c 	.word	0x2000022c
 8001b70:	0800e1a4 	.word	0x0800e1a4
 8001b74:	200017c0 	.word	0x200017c0
 8001b78:	0800e1c8 	.word	0x0800e1c8
 8001b7c:	2001be40 	.word	0x2001be40
 8001b80:	20017b3c 	.word	0x20017b3c
 8001b84:	20006834 	.word	0x20006834
 8001b88:	0800e1e4 	.word	0x0800e1e4

08001b8c <ReadGif>:

void ReadGif(char *path) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	if(f_open(&file, path, FA_READ) != FR_OK) {
 8001b94:	2201      	movs	r2, #1
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4837      	ldr	r0, [pc, #220]	; (8001c78 <ReadGif+0xec>)
 8001b9a:	f009 fdeb 	bl	800b774 <f_open>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <ReadGif+0x20>
		SendUART("Can't open file!);");
 8001ba4:	4835      	ldr	r0, [pc, #212]	; (8001c7c <ReadGif+0xf0>)
 8001ba6:	f7ff fc79 	bl	800149c <SendUART>
		return;
 8001baa:	e061      	b.n	8001c70 <ReadGif+0xe4>
	}


	GifHeader header;
	UINT l;
	if(f_read(&file, &header, sizeof(GifHeader), &l) != FR_OK) {
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	f107 0110 	add.w	r1, r7, #16
 8001bb4:	220d      	movs	r2, #13
 8001bb6:	4830      	ldr	r0, [pc, #192]	; (8001c78 <ReadGif+0xec>)
 8001bb8:	f009 ffa8 	bl	800bb0c <f_read>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <ReadGif+0x3e>
		SendUART("Can't read gif header!);");
 8001bc2:	482f      	ldr	r0, [pc, #188]	; (8001c80 <ReadGif+0xf4>)
 8001bc4:	f7ff fc6a 	bl	800149c <SendUART>
		return;
 8001bc8:	e052      	b.n	8001c70 <ReadGif+0xe4>
	}

	sprintf(strBuffer, "GIF resolution: %dx%d\r\n", header.width, header.height);
 8001bca:	8afb      	ldrh	r3, [r7, #22]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	8b3b      	ldrh	r3, [r7, #24]
 8001bd0:	492c      	ldr	r1, [pc, #176]	; (8001c84 <ReadGif+0xf8>)
 8001bd2:	482d      	ldr	r0, [pc, #180]	; (8001c88 <ReadGif+0xfc>)
 8001bd4:	f00b fa30 	bl	800d038 <siprintf>
	SendUART(strBuffer);
 8001bd8:	482b      	ldr	r0, [pc, #172]	; (8001c88 <ReadGif+0xfc>)
 8001bda:	f7ff fc5f 	bl	800149c <SendUART>

	sprintf(strBuffer, "background color index: %d\r\n", header.backgroundColorIndex);
 8001bde:	7efb      	ldrb	r3, [r7, #27]
 8001be0:	461a      	mov	r2, r3
 8001be2:	492a      	ldr	r1, [pc, #168]	; (8001c8c <ReadGif+0x100>)
 8001be4:	4828      	ldr	r0, [pc, #160]	; (8001c88 <ReadGif+0xfc>)
 8001be6:	f00b fa27 	bl	800d038 <siprintf>
	SendUART(strBuffer);
 8001bea:	4827      	ldr	r0, [pc, #156]	; (8001c88 <ReadGif+0xfc>)
 8001bec:	f7ff fc56 	bl	800149c <SendUART>

	// read global palette
	int hasColorTable = header.flags & 0x80 ? 1 : 0;
 8001bf0:	7ebb      	ldrb	r3, [r7, #26]
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	11db      	asrs	r3, r3, #7
 8001bf6:	b25b      	sxtb	r3, r3
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
	int colorResolution = 2 << ((header.flags & 0x70) >> 4);
 8001bfe:	7ebb      	ldrb	r3, [r7, #26]
 8001c00:	111b      	asrs	r3, r3, #4
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	2202      	movs	r2, #2
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	623b      	str	r3, [r7, #32]
	globalPaletteColorCount = 2 << (header.flags & 0x07);
 8001c0e:	7ebb      	ldrb	r3, [r7, #26]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	2202      	movs	r2, #2
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <ReadGif+0x104>)
 8001c1c:	6013      	str	r3, [r2, #0]

	sprintf(strBuffer,"Color resolution: %d\r\n", colorResolution);
 8001c1e:	6a3a      	ldr	r2, [r7, #32]
 8001c20:	491c      	ldr	r1, [pc, #112]	; (8001c94 <ReadGif+0x108>)
 8001c22:	4819      	ldr	r0, [pc, #100]	; (8001c88 <ReadGif+0xfc>)
 8001c24:	f00b fa08 	bl	800d038 <siprintf>
	SendUART(strBuffer);
 8001c28:	4817      	ldr	r0, [pc, #92]	; (8001c88 <ReadGif+0xfc>)
 8001c2a:	f7ff fc37 	bl	800149c <SendUART>

	sprintf(strBuffer, "Has global color palette: %d\r\n", hasColorTable);
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	4919      	ldr	r1, [pc, #100]	; (8001c98 <ReadGif+0x10c>)
 8001c32:	4815      	ldr	r0, [pc, #84]	; (8001c88 <ReadGif+0xfc>)
 8001c34:	f00b fa00 	bl	800d038 <siprintf>
	SendUART(strBuffer);
 8001c38:	4813      	ldr	r0, [pc, #76]	; (8001c88 <ReadGif+0xfc>)
 8001c3a:	f7ff fc2f 	bl	800149c <SendUART>

	sprintf(strBuffer, "Color count: %d\r\n", globalPaletteColorCount);
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <ReadGif+0x104>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	4915      	ldr	r1, [pc, #84]	; (8001c9c <ReadGif+0x110>)
 8001c46:	4810      	ldr	r0, [pc, #64]	; (8001c88 <ReadGif+0xfc>)
 8001c48:	f00b f9f6 	bl	800d038 <siprintf>
	SendUART(strBuffer);
 8001c4c:	480e      	ldr	r0, [pc, #56]	; (8001c88 <ReadGif+0xfc>)
 8001c4e:	f7ff fc25 	bl	800149c <SendUART>


	if(hasColorTable) {
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <ReadGif+0xd8>
		ReadGifPalette(globalPalette, globalPaletteColorCount);
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <ReadGif+0x104>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4810      	ldr	r0, [pc, #64]	; (8001ca0 <ReadGif+0x114>)
 8001c60:	f7ff feac 	bl	80019bc <ReadGifPalette>
	}

	// look for image data now
	gifStart = f_tell(&file);
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <ReadGif+0xec>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <ReadGif+0x118>)
 8001c6a:	6013      	str	r3, [r2, #0]
	ReadGifImage();
 8001c6c:	f7ff fedc 	bl	8001a28 <ReadGifImage>
}
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20005804 	.word	0x20005804
 8001c7c:	0800e1f0 	.word	0x0800e1f0
 8001c80:	0800e204 	.word	0x0800e204
 8001c84:	0800e220 	.word	0x0800e220
 8001c88:	2000022c 	.word	0x2000022c
 8001c8c:	0800e238 	.word	0x0800e238
 8001c90:	20005800 	.word	0x20005800
 8001c94:	0800e258 	.word	0x0800e258
 8001c98:	0800e270 	.word	0x0800e270
 8001c9c:	0800e290 	.word	0x0800e290
 8001ca0:	2001bb40 	.word	0x2001bb40
 8001ca4:	20017b38 	.word	0x20017b38

08001ca8 <SwapBuffer>:


uint8_t *readBuffer = DMDBuffer[0];
uint8_t *writeBuffer = DMDBuffer[1];

void SwapBuffer() {
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
	readBuffer = readBuffer == DMDBuffer[0] ? DMDBuffer[1] : DMDBuffer[0];
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <SwapBuffer+0x38>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <SwapBuffer+0x3c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <SwapBuffer+0x12>
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <SwapBuffer+0x40>)
 8001cb8:	e000      	b.n	8001cbc <SwapBuffer+0x14>
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <SwapBuffer+0x3c>)
 8001cbc:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <SwapBuffer+0x38>)
 8001cbe:	6013      	str	r3, [r2, #0]
	writeBuffer = writeBuffer == DMDBuffer[0] ? DMDBuffer[1] : DMDBuffer[0];
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <SwapBuffer+0x44>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <SwapBuffer+0x3c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <SwapBuffer+0x26>
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <SwapBuffer+0x40>)
 8001ccc:	e000      	b.n	8001cd0 <SwapBuffer+0x28>
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <SwapBuffer+0x3c>)
 8001cd0:	4a06      	ldr	r2, [pc, #24]	; (8001cec <SwapBuffer+0x44>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20006b34 	.word	0x20006b34
 8001ce8:	2000eb34 	.word	0x2000eb34
 8001cec:	2000000c 	.word	0x2000000c

08001cf0 <InitDMDBuffer>:

void InitDMDBuffer() {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
	for(int p = 0; p < 8; p++) {
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e082      	b.n	8001e02 <InitDMDBuffer+0x112>
		uint8_t m = 1 << p;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	70fb      	strb	r3, [r7, #3]
		for(int y = 0; y < 16; y++) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	e074      	b.n	8001df6 <InitDMDBuffer+0x106>
			for(int x = 0; x < 128; x++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	e06b      	b.n	8001dea <InitDMDBuffer+0xfa>
				uint8_t c = x; //powf(x / 255.0f * 2.0f, 2.2f) * 255.0f;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	70bb      	strb	r3, [r7, #2]
				uint8_t col0 = (c & m ? 1 : 0) + (c & m ? 2 : 0) + (c & m ? 4 : 0);
 8001d16:	78ba      	ldrb	r2, [r7, #2]
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf14      	ite	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	2300      	moveq	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	4619      	mov	r1, r3
 8001d2a:	78ba      	ldrb	r2, [r7, #2]
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <InitDMDBuffer+0x4a>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e000      	b.n	8001d3c <InitDMDBuffer+0x4c>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	440b      	add	r3, r1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	78b9      	ldrb	r1, [r7, #2]
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	400a      	ands	r2, r1
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	2a00      	cmp	r2, #0
 8001d4a:	d001      	beq.n	8001d50 <InitDMDBuffer+0x60>
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	e000      	b.n	8001d52 <InitDMDBuffer+0x62>
 8001d50:	2200      	movs	r2, #0
 8001d52:	4413      	add	r3, r2
 8001d54:	707b      	strb	r3, [r7, #1]
				uint8_t col1 = (c & m ? 1 : 0) + (c & m ? 2 : 0) + (c & m ? 4 : 0);
 8001d56:	78ba      	ldrb	r2, [r7, #2]
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf14      	ite	ne
 8001d62:	2301      	movne	r3, #1
 8001d64:	2300      	moveq	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	78ba      	ldrb	r2, [r7, #2]
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <InitDMDBuffer+0x8a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e000      	b.n	8001d7c <InitDMDBuffer+0x8c>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	440b      	add	r3, r1
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	78b9      	ldrb	r1, [r7, #2]
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	400a      	ands	r2, r1
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d001      	beq.n	8001d90 <InitDMDBuffer+0xa0>
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	e000      	b.n	8001d92 <InitDMDBuffer+0xa2>
 8001d90:	2200      	movs	r2, #0
 8001d92:	4413      	add	r3, r2
 8001d94:	703b      	strb	r3, [r7, #0]
				writeBuffer[(x * 2 + 0 + (y * 256)) + p * 256 * 16] = col0 + (col1 << 3);
 8001d96:	783b      	ldrb	r3, [r7, #0]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	b2d9      	uxtb	r1, r3
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <InitDMDBuffer+0x128>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	01d0      	lsls	r0, r2, #7
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4410      	add	r0, r2
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	02d2      	lsls	r2, r2, #11
 8001dac:	4402      	add	r2, r0
 8001dae:	0052      	lsls	r2, r2, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	787a      	ldrb	r2, [r7, #1]
 8001db4:	440a      	add	r2, r1
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]
				writeBuffer[(x * 2 + 1 + (y * 256)) + p * 256 * 16] = col0 + (col1 << 3) + 64;
 8001dba:	783b      	ldrb	r3, [r7, #0]
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <InitDMDBuffer+0x128>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	0049      	lsls	r1, r1, #1
 8001dce:	1c48      	adds	r0, r1, #1
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	0209      	lsls	r1, r1, #8
 8001dd4:	4408      	add	r0, r1
 8001dd6:	68f9      	ldr	r1, [r7, #12]
 8001dd8:	0309      	lsls	r1, r1, #12
 8001dda:	4401      	add	r1, r0
 8001ddc:	440b      	add	r3, r1
 8001dde:	3240      	adds	r2, #64	; 0x40
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]
			for(int x = 0; x < 128; x++) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3301      	adds	r3, #1
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b7f      	cmp	r3, #127	; 0x7f
 8001dee:	dd90      	ble.n	8001d12 <InitDMDBuffer+0x22>
		for(int y = 0; y < 16; y++) {
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	3301      	adds	r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	dd87      	ble.n	8001d0c <InitDMDBuffer+0x1c>
	for(int p = 0; p < 8; p++) {
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b07      	cmp	r3, #7
 8001e06:	f77f af79 	ble.w	8001cfc <InitDMDBuffer+0xc>
			}
		}
	}
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	2000000c 	.word	0x2000000c

08001e1c <FillDMDBuffer>:

void FillDMDBuffer() {
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
	int idx = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
	for(int p = 0; p < 8; p++) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	e0a8      	b.n	8001f7e <FillDMDBuffer+0x162>
		uint8_t m = 1 << p;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	71fb      	strb	r3, [r7, #7]
		for(int y = 0; y < 16; y++) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e099      	b.n	8001f70 <FillDMDBuffer+0x154>
			for(int x = 0; x < 128; x++) {
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	e08f      	b.n	8001f62 <FillDMDBuffer+0x146>
				uint8_t col0 = frame[x + y * 128];
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	01da      	lsls	r2, r3, #7
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <FillDMDBuffer+0x178>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	71bb      	strb	r3, [r7, #6]
				uint8_t px0 = (globalPalette[col0 * 3 + 0] & m ? 1 : 0) + (globalPalette[col0 * 3 + 1] & m ? 2 : 0) + (globalPalette[col0 * 3 + 2] & m ? 4 : 0);
 8001e50:	79ba      	ldrb	r2, [r7, #6]
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	4a4f      	ldr	r2, [pc, #316]	; (8001f98 <FillDMDBuffer+0x17c>)
 8001e5a:	5cd2      	ldrb	r2, [r2, r3]
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	79ba      	ldrb	r2, [r7, #6]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	3301      	adds	r3, #1
 8001e78:	4a47      	ldr	r2, [pc, #284]	; (8001f98 <FillDMDBuffer+0x17c>)
 8001e7a:	5cd2      	ldrb	r2, [r2, r3]
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <FillDMDBuffer+0x6e>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e000      	b.n	8001e8c <FillDMDBuffer+0x70>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	440b      	add	r3, r1
 8001e8e:	b2d9      	uxtb	r1, r3
 8001e90:	79ba      	ldrb	r2, [r7, #6]
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	4a3f      	ldr	r2, [pc, #252]	; (8001f98 <FillDMDBuffer+0x17c>)
 8001e9c:	5cd2      	ldrb	r2, [r2, r3]
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <FillDMDBuffer+0x90>
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	e000      	b.n	8001eae <FillDMDBuffer+0x92>
 8001eac:	2300      	movs	r3, #0
 8001eae:	440b      	add	r3, r1
 8001eb0:	717b      	strb	r3, [r7, #5]

				uint8_t col1 = frame[x + (y + 16) * 128];
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3310      	adds	r3, #16
 8001eb6:	01da      	lsls	r2, r3, #7
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a35      	ldr	r2, [pc, #212]	; (8001f94 <FillDMDBuffer+0x178>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	713b      	strb	r3, [r7, #4]
				uint8_t px1 = (globalPalette[col1 * 3 + 0] & m ? 1 : 0) + (globalPalette[col1 * 3 + 1] & m ? 2 : 0) + (globalPalette[col1 * 3 + 2] & m ? 4 : 0);
 8001ec2:	793a      	ldrb	r2, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a33      	ldr	r2, [pc, #204]	; (8001f98 <FillDMDBuffer+0x17c>)
 8001ecc:	5cd2      	ldrb	r2, [r2, r3]
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf14      	ite	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	2300      	moveq	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4619      	mov	r1, r3
 8001ee0:	793a      	ldrb	r2, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <FillDMDBuffer+0x17c>)
 8001eec:	5cd2      	ldrb	r2, [r2, r3]
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <FillDMDBuffer+0xe0>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e000      	b.n	8001efe <FillDMDBuffer+0xe2>
 8001efc:	2300      	movs	r3, #0
 8001efe:	440b      	add	r3, r1
 8001f00:	b2d9      	uxtb	r1, r3
 8001f02:	793a      	ldrb	r2, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	4a22      	ldr	r2, [pc, #136]	; (8001f98 <FillDMDBuffer+0x17c>)
 8001f0e:	5cd2      	ldrb	r2, [r2, r3]
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	4013      	ands	r3, r2
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <FillDMDBuffer+0x102>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e000      	b.n	8001f20 <FillDMDBuffer+0x104>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	440b      	add	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]


				writeBuffer[idx++] = px0 + (px1 << 3);
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	b2d9      	uxtb	r1, r3
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <FillDMDBuffer+0x180>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	1c58      	adds	r0, r3, #1
 8001f32:	6178      	str	r0, [r7, #20]
 8001f34:	4413      	add	r3, r2
 8001f36:	797a      	ldrb	r2, [r7, #5]
 8001f38:	440a      	add	r2, r1
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]
				writeBuffer[idx++] = px0 + (px1 << 3) + 64;
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	797b      	ldrb	r3, [r7, #5]
 8001f46:	4413      	add	r3, r2
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FillDMDBuffer+0x180>)
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	1c58      	adds	r0, r3, #1
 8001f52:	6178      	str	r0, [r7, #20]
 8001f54:	440b      	add	r3, r1
 8001f56:	3240      	adds	r2, #64	; 0x40
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]
			for(int x = 0; x < 128; x++) {
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b7f      	cmp	r3, #127	; 0x7f
 8001f66:	f77f af6c 	ble.w	8001e42 <FillDMDBuffer+0x26>
		for(int y = 0; y < 16; y++) {
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	f77f af62 	ble.w	8001e3c <FillDMDBuffer+0x20>
	for(int p = 0; p < 8; p++) {
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b07      	cmp	r3, #7
 8001f82:	f77f af53 	ble.w	8001e2c <FillDMDBuffer+0x10>
			}
		}
	}
}
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20016b34 	.word	0x20016b34
 8001f98:	2001bb40 	.word	0x2001bb40
 8001f9c:	2000000c 	.word	0x2000000c

08001fa0 <SendFrame>:

volatile uint8_t pass = 0;
volatile uint8_t y = 0;

void SendFrame() {
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~TIM_CR1_CEN;
 8001fa6:	4b4a      	ldr	r3, [pc, #296]	; (80020d0 <SendFrame+0x130>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a49      	ldr	r2, [pc, #292]	; (80020d0 <SendFrame+0x130>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6013      	str	r3, [r2, #0]

	GPIOA->ODR = (GPIOA->ODR & ~(0x01E)) | (y<<1); // set row
 8001fb2:	4b48      	ldr	r3, [pc, #288]	; (80020d4 <SendFrame+0x134>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f023 031e 	bic.w	r3, r3, #30
 8001fba:	4a47      	ldr	r2, [pc, #284]	; (80020d8 <SendFrame+0x138>)
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	0052      	lsls	r2, r2, #1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4a43      	ldr	r2, [pc, #268]	; (80020d4 <SendFrame+0x134>)
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR = GPIO_PIN_8; // strobe up
 8001fca:	4b44      	ldr	r3, [pc, #272]	; (80020dc <SendFrame+0x13c>)
 8001fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd0:	619a      	str	r2, [r3, #24]


	int prevPass = pass;
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <SendFrame+0x140>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	60fb      	str	r3, [r7, #12]
	int prevY = y;
 8001fda:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <SendFrame+0x138>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	60bb      	str	r3, [r7, #8]

	pass++;
 8001fe2:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <SendFrame+0x140>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b3c      	ldr	r3, [pc, #240]	; (80020e0 <SendFrame+0x140>)
 8001fee:	701a      	strb	r2, [r3, #0]
	if(pass == 8) {
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <SendFrame+0x140>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d111      	bne.n	800201e <SendFrame+0x7e>
		y++;
 8001ffa:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <SendFrame+0x138>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3301      	adds	r3, #1
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <SendFrame+0x138>)
 8002006:	701a      	strb	r2, [r3, #0]
		if(y == 16)
 8002008:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <SendFrame+0x138>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b10      	cmp	r3, #16
 8002010:	d102      	bne.n	8002018 <SendFrame+0x78>
			y = 0;
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <SendFrame+0x138>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
		pass = 0;
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <SendFrame+0x140>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
	}

	TIM4->ARR = 0x1FFF;
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <SendFrame+0x130>)
 8002020:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c
	uint16_t litTime = (0x1FFF - 0x100) >> (7 - prevPass);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f1c3 0307 	rsb	r3, r3, #7
 800202c:	f641 62ff 	movw	r2, #7935	; 0x1eff
 8002030:	fa42 f303 	asr.w	r3, r2, r3
 8002034:	80fb      	strh	r3, [r7, #6]
	TIM4->CCR2 = 0x1FFF - litTime;
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	f5c3 53ff 	rsb	r3, r3, #8160	; 0x1fe0
 800203c:	331f      	adds	r3, #31
 800203e:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <SendFrame+0x130>)
 8002040:	6393      	str	r3, [r2, #56]	; 0x38
	TIM4->PSC = 0;//(1 << prevPass) - 1;
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <SendFrame+0x130>)
 8002044:	2200      	movs	r2, #0
 8002046:	629a      	str	r2, [r3, #40]	; 0x28

	GPIOB->BSRR = GPIO_PIN_8 << 16; // strobe down
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <SendFrame+0x13c>)
 800204a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800204e:	619a      	str	r2, [r3, #24]
	TIM4->CNT = 0; // reset counter
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <SendFrame+0x130>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24



	TIM4->CR1 |= TIM_CR1_CEN;
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <SendFrame+0x130>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <SendFrame+0x130>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6013      	str	r3, [r2, #0]

	// send data
	GPIOA->ODR |= (1 << 8); // profile
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <SendFrame+0x134>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <SendFrame+0x134>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	6153      	str	r3, [r2, #20]
	uint16_t idx = y * 256 + prevPass * 256 * 16;
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <SendFrame+0x138>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	4413      	add	r3, r2
 800207c:	b29b      	uxth	r3, r3
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	82fb      	strh	r3, [r7, #22]
	uint16_t v = GPIOB->ODR & ~(0xFF);
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <SendFrame+0x13c>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	b29b      	uxth	r3, r3
 8002088:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800208c:	80bb      	strh	r3, [r7, #4]
	for(int x = 0; x < 256; x++) {
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	e00d      	b.n	80020b0 <SendFrame+0x110>
		//GPIOB->ODR =  (y == 0 || y == 1) ? (x % 2 ? 9 : 73) : ((GPIOB->ODR & ~(0xFF)) | DMDBuffer[x + (y * 256) + pass * 256*16]);
		GPIOB->ODR = (v | readBuffer[idx++]);
 8002094:	88ba      	ldrh	r2, [r7, #4]
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <SendFrame+0x144>)
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	8afb      	ldrh	r3, [r7, #22]
 800209c:	1c58      	adds	r0, r3, #1
 800209e:	82f8      	strh	r0, [r7, #22]
 80020a0:	440b      	add	r3, r1
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <SendFrame+0x13c>)
 80020a8:	615a      	str	r2, [r3, #20]
	for(int x = 0; x < 256; x++) {
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	3301      	adds	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	ddee      	ble.n	8002094 <SendFrame+0xf4>
	}
	GPIOA->ODR &= ~(1 << 8); // profile
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <SendFrame+0x134>)
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <SendFrame+0x134>)
 80020bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020c0:	6153      	str	r3, [r2, #20]
}
 80020c2:	bf00      	nop
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	2000043d 	.word	0x2000043d
 80020dc:	40020400 	.word	0x40020400
 80020e0:	2000043c 	.word	0x2000043c
 80020e4:	20000008 	.word	0x20000008

080020e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ee:	f000 fbed 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f2:	f000 f84f 	bl	8002194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f6:	f7ff f943 	bl	8001380 <MX_GPIO_Init>
  MX_DMA_Init();
 80020fa:	f7fe fc55 	bl	80009a8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80020fe:	f00a f9ab 	bl	800c458 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002102:	f000 f8c7 	bl	8002294 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002106:	f005 fd4d 	bl	8007ba4 <MX_FATFS_Init>
  MX_TIM4_Init();
 800210a:	f000 fa89 	bl	8002620 <MX_TIM4_Init>
  MX_TIM1_Init();
 800210e:	f000 fa37 	bl	8002580 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  unsigned short pinState = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	80fb      	strh	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //HAL_Delay(1000);
  SendUART("Start:\r\n");
 8002116:	4817      	ldr	r0, [pc, #92]	; (8002174 <main+0x8c>)
 8002118:	f7ff f9c0 	bl	800149c <SendUART>
  if(f_mount(&fs, "", 0) != FR_OK)
 800211c:	2200      	movs	r2, #0
 800211e:	4916      	ldr	r1, [pc, #88]	; (8002178 <main+0x90>)
 8002120:	4816      	ldr	r0, [pc, #88]	; (800217c <main+0x94>)
 8002122:	f009 fae1 	bl	800b6e8 <f_mount>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <main+0x4c>
	  SendUART("Error (sdcard): can't mount sdcard\r\n");
 800212c:	4814      	ldr	r0, [pc, #80]	; (8002180 <main+0x98>)
 800212e:	f7ff f9b5 	bl	800149c <SendUART>
 8002132:	e002      	b.n	800213a <main+0x52>
  else
	  SendUART("Success (sdcard): SD CARD mounted successfully\r\n");
 8002134:	4813      	ldr	r0, [pc, #76]	; (8002184 <main+0x9c>)
 8002136:	f7ff f9b1 	bl	800149c <SendUART>

  //ScanDirectory("Arcade");
  //ReadGif("Computers/AMIGA_MonkeyIsland01.gif");
  ReadGif("Arcade/ARCADE_NEOGEO_MetalSlugFire05_Shabazz.gif");
 800213a:	4813      	ldr	r0, [pc, #76]	; (8002188 <main+0xa0>)
 800213c:	f7ff fd26 	bl	8001b8c <ReadGif>
  //ReadGif("Arcade/ARCADE_MortalKombat05SubZero.gif");



  SendUART("Ended SD card\r\n");
 8002140:	4812      	ldr	r0, [pc, #72]	; (800218c <main+0xa4>)
 8002142:	f7ff f9ab 	bl	800149c <SendUART>

  InitDMDBuffer();
 8002146:	f7ff fdd3 	bl	8001cf0 <InitDMDBuffer>
  FillDMDBuffer();
 800214a:	f7ff fe67 	bl	8001e1c <FillDMDBuffer>
  SwapBuffer();
 800214e:	f7ff fdab 	bl	8001ca8 <SwapBuffer>

  HAL_TIM_Base_Start_IT(&htim4);
 8002152:	480f      	ldr	r0, [pc, #60]	; (8002190 <main+0xa8>)
 8002154:	f003 fb8b 	bl	800586e <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Init(&htim4);
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <main+0xa8>)
 800215a:	f003 fbac 	bl	80058b6 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800215e:	2104      	movs	r1, #4
 8002160:	480b      	ldr	r0, [pc, #44]	; (8002190 <main+0xa8>)
 8002162:	f003 fbdd 	bl	8005920 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	ReadGifImage();
 8002166:	f7ff fc5f 	bl	8001a28 <ReadGifImage>
	FillDMDBuffer();
 800216a:	f7ff fe57 	bl	8001e1c <FillDMDBuffer>
	SwapBuffer();
 800216e:	f7ff fd9b 	bl	8001ca8 <SwapBuffer>
	ReadGifImage();
 8002172:	e7f8      	b.n	8002166 <main+0x7e>
 8002174:	0800e2a4 	.word	0x0800e2a4
 8002178:	0800e2b0 	.word	0x0800e2b0
 800217c:	20000788 	.word	0x20000788
 8002180:	0800e2b4 	.word	0x0800e2b4
 8002184:	0800e2dc 	.word	0x0800e2dc
 8002188:	0800e310 	.word	0x0800e310
 800218c:	0800e344 	.word	0x0800e344
 8002190:	2001befc 	.word	0x2001befc

08002194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b094      	sub	sp, #80	; 0x50
 8002198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219a:	f107 0320 	add.w	r3, r7, #32
 800219e:	2230      	movs	r2, #48	; 0x30
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00a fe88 	bl	800ceb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <SystemClock_Config+0xc8>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	4a26      	ldr	r2, [pc, #152]	; (800225c <SystemClock_Config+0xc8>)
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6413      	str	r3, [r2, #64]	; 0x40
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <SystemClock_Config+0xc8>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	4b21      	ldr	r3, [pc, #132]	; (8002260 <SystemClock_Config+0xcc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a20      	ldr	r2, [pc, #128]	; (8002260 <SystemClock_Config+0xcc>)
 80021de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <SystemClock_Config+0xcc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021f0:	2301      	movs	r3, #1
 80021f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021fa:	2302      	movs	r3, #2
 80021fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002202:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002204:	2319      	movs	r3, #25
 8002206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002208:	23c0      	movs	r3, #192	; 0xc0
 800220a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800220c:	2302      	movs	r3, #2
 800220e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002210:	2304      	movs	r3, #4
 8002212:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002214:	f107 0320 	add.w	r3, r7, #32
 8002218:	4618      	mov	r0, r3
 800221a:	f002 fb03 	bl	8004824 <HAL_RCC_OscConfig>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002224:	f000 f82e 	bl	8002284 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002228:	230f      	movs	r3, #15
 800222a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800222c:	2302      	movs	r3, #2
 800222e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	2103      	movs	r1, #3
 8002244:	4618      	mov	r0, r3
 8002246:	f002 fd5d 	bl	8004d04 <HAL_RCC_ClockConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002250:	f000 f818 	bl	8002284 <Error_Handler>
  }
}
 8002254:	bf00      	nop
 8002256:	3750      	adds	r7, #80	; 0x50
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	40007000 	.word	0x40007000

08002264 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_TIM_PeriodElapsedCallback+0x14>
		SendFrame();
 8002274:	f7ff fe94 	bl	8001fa0 <SendFrame>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	2001befc 	.word	0x2001befc

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <MX_SPI1_Init+0x64>)
 800229a:	4a18      	ldr	r2, [pc, #96]	; (80022fc <MX_SPI1_Init+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022c8:	2220      	movs	r2, #32
 80022ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022e0:	220a      	movs	r2, #10
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <MX_SPI1_Init+0x64>)
 80022e6:	f002 feb1 	bl	800504c <HAL_SPI_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022f0:	f7ff ffc8 	bl	8002284 <Error_Handler>
  }

}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2001be44 	.word	0x2001be44
 80022fc:	40013000 	.word	0x40013000

08002300 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a19      	ldr	r2, [pc, #100]	; (8002384 <HAL_SPI_MspInit+0x84>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d12b      	bne.n	800237a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_SPI_MspInit+0x88>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_SPI_MspInit+0x88>)
 800232c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_SPI_MspInit+0x88>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_SPI_MspInit+0x88>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_SPI_MspInit+0x88>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_SPI_MspInit+0x88>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800235a:	23e0      	movs	r3, #224	; 0xe0
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800236a:	2305      	movs	r3, #5
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <HAL_SPI_MspInit+0x8c>)
 8002376:	f000 ff37 	bl	80031e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800237a:	bf00      	nop
 800237c:	3728      	adds	r7, #40	; 0x28
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40013000 	.word	0x40013000
 8002388:	40023800 	.word	0x40023800
 800238c:	40020000 	.word	0x40020000

08002390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_MspInit+0x4c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_MspInit+0x4c>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_MspInit+0x4c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_MspInit+0x4c>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_MspInit+0x4c>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_MspInit+0x4c>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800

080023e0 <SDTimer_Handler>:
/* USER CODE BEGIN PV */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <SDTimer_Handler+0x40>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d006      	beq.n	80023fc <SDTimer_Handler+0x1c>
    Timer1--;
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <SDTimer_Handler+0x40>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <SDTimer_Handler+0x40>)
 80023fa:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <SDTimer_Handler+0x44>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <SDTimer_Handler+0x34>
    Timer2--;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <SDTimer_Handler+0x44>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SDTimer_Handler+0x44>)
 8002412:	701a      	strb	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000686 	.word	0x20000686
 8002424:	20000684 	.word	0x20000684

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800243a:	e7fe      	b.n	800243a <HardFault_Handler+0x4>

0800243c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <MemManage_Handler+0x4>

08002442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <BusFault_Handler+0x4>

08002448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <UsageFault_Handler+0x4>

0800244e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <SysTick_Handler+0x30>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	3301      	adds	r3, #1
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <SysTick_Handler+0x30>)
 8002488:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <SysTick_Handler+0x30>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b09      	cmp	r3, #9
 8002492:	d904      	bls.n	800249e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <SysTick_Handler+0x30>)
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800249a:	f7ff ffa1 	bl	80023e0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249e:	f000 fa67 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000043e 	.word	0x2000043e

080024ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <TIM4_IRQHandler+0x10>)
 80024b2:	f003 fa67 	bl	8005984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2001befc 	.word	0x2001befc

080024c0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <DMA2_Stream4_IRQHandler+0x10>)
 80024c6:	f000 fc55 	bl	8002d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2001be9c 	.word	0x2001be9c

080024d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <OTG_FS_IRQHandler+0x10>)
 80024da:	f001 f970 	bl	80037be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2001f4c0 	.word	0x2001f4c0

080024e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f0:	4a14      	ldr	r2, [pc, #80]	; (8002544 <_sbrk+0x5c>)
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <_sbrk+0x60>)
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <_sbrk+0x64>)
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <_sbrk+0x68>)
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	d207      	bcs.n	8002528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002518:	f00a fc94 	bl	800ce44 <__errno>
 800251c:	4602      	mov	r2, r0
 800251e:	230c      	movs	r3, #12
 8002520:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	e009      	b.n	800253c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <_sbrk+0x64>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <_sbrk+0x64>)
 8002538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20020000 	.word	0x20020000
 8002548:	00000100 	.word	0x00000100
 800254c:	20000440 	.word	0x20000440
 8002550:	2001f8d0 	.word	0x2001f8d0

08002554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <SystemInit+0x28>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	4a07      	ldr	r2, [pc, #28]	; (800257c <SystemInit+0x28>)
 8002560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <SystemInit+0x28>)
 800256a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800256e:	609a      	str	r2, [r3, #8]
#endif
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim1_ch4_trig_com;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	463b      	mov	r3, r7
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800259c:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <MX_TIM1_Init+0x98>)
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <MX_TIM1_Init+0x9c>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <MX_TIM1_Init+0x98>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <MX_TIM1_Init+0x98>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <MX_TIM1_Init+0x98>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <MX_TIM1_Init+0x98>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <MX_TIM1_Init+0x98>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <MX_TIM1_Init+0x98>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025c6:	4814      	ldr	r0, [pc, #80]	; (8002618 <MX_TIM1_Init+0x98>)
 80025c8:	f003 f926 	bl	8005818 <HAL_TIM_Base_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80025d2:	f7ff fe57 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	4619      	mov	r1, r3
 80025e2:	480d      	ldr	r0, [pc, #52]	; (8002618 <MX_TIM1_Init+0x98>)
 80025e4:	f003 fb9c 	bl	8005d20 <HAL_TIM_ConfigClockSource>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80025ee:	f7ff fe49 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025fa:	463b      	mov	r3, r7
 80025fc:	4619      	mov	r1, r3
 80025fe:	4806      	ldr	r0, [pc, #24]	; (8002618 <MX_TIM1_Init+0x98>)
 8002600:	f003 ff3a 	bl	8006478 <HAL_TIMEx_MasterConfigSynchronization>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800260a:	f7ff fe3b 	bl	8002284 <Error_Handler>
  }

}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2001bf3c 	.word	0x2001bf3c
 800261c:	40010000 	.word	0x40010000

08002620 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08e      	sub	sp, #56	; 0x38
 8002624:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002634:	f107 0320 	add.w	r3, r7, #32
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
 800264c:	615a      	str	r2, [r3, #20]
 800264e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002652:	4a2d      	ldr	r2, [pc, #180]	; (8002708 <MX_TIM4_Init+0xe8>)
 8002654:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002656:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002658:	2201      	movs	r2, #1
 800265a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <MX_TIM4_Init+0xe4>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002662:	4b28      	ldr	r3, [pc, #160]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002668:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <MX_TIM4_Init+0xe4>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002676:	4823      	ldr	r0, [pc, #140]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002678:	f003 f8ce 	bl	8005818 <HAL_TIM_Base_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002682:	f7ff fdff 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800268c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002690:	4619      	mov	r1, r3
 8002692:	481c      	ldr	r0, [pc, #112]	; (8002704 <MX_TIM4_Init+0xe4>)
 8002694:	f003 fb44 	bl	8005d20 <HAL_TIM_ConfigClockSource>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800269e:	f7ff fdf1 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026a2:	4818      	ldr	r0, [pc, #96]	; (8002704 <MX_TIM4_Init+0xe4>)
 80026a4:	f003 f907 	bl	80058b6 <HAL_TIM_PWM_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80026ae:	f7ff fde9 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026ba:	f107 0320 	add.w	r3, r7, #32
 80026be:	4619      	mov	r1, r3
 80026c0:	4810      	ldr	r0, [pc, #64]	; (8002704 <MX_TIM4_Init+0xe4>)
 80026c2:	f003 fed9 	bl	8006478 <HAL_TIMEx_MasterConfigSynchronization>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80026cc:	f7ff fdda 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d0:	2360      	movs	r3, #96	; 0x60
 80026d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 80026d4:	231e      	movs	r3, #30
 80026d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80026dc:	2304      	movs	r3, #4
 80026de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	2204      	movs	r2, #4
 80026e4:	4619      	mov	r1, r3
 80026e6:	4807      	ldr	r0, [pc, #28]	; (8002704 <MX_TIM4_Init+0xe4>)
 80026e8:	f003 fa54 	bl	8005b94 <HAL_TIM_PWM_ConfigChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80026f2:	f7ff fdc7 	bl	8002284 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80026f6:	4803      	ldr	r0, [pc, #12]	; (8002704 <MX_TIM4_Init+0xe4>)
 80026f8:	f000 f884 	bl	8002804 <HAL_TIM_MspPostInit>

}
 80026fc:	bf00      	nop
 80026fe:	3738      	adds	r7, #56	; 0x38
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2001befc 	.word	0x2001befc
 8002708:	40000800 	.word	0x40000800

0800270c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a35      	ldr	r2, [pc, #212]	; (80027f0 <HAL_TIM_Base_MspInit+0xe4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d148      	bne.n	80027b0 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <HAL_TIM_Base_MspInit+0xe8>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <HAL_TIM_Base_MspInit+0xe8>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_TIM_Base_MspInit+0xe8>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 800273c:	4a2f      	ldr	r2, [pc, #188]	; (80027fc <HAL_TIM_Base_MspInit+0xf0>)
 800273e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8002740:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 8002742:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002746:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800274e:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 8002750:	2200      	movs	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8002754:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 8002756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800275c:	4b26      	ldr	r3, [pc, #152]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002762:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002774:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 800277a:	481f      	ldr	r0, [pc, #124]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 800277c:	f000 fa4c 	bl	8002c18 <HAL_DMA_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8002786:	f7ff fd7d 	bl	8002284 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
 8002790:	4a19      	ldr	r2, [pc, #100]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 800279a:	639a      	str	r2, [r3, #56]	; 0x38
 800279c:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
 80027a8:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_TIM_Base_MspInit+0xec>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027ae:	e01a      	b.n	80027e6 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM4)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a12      	ldr	r2, [pc, #72]	; (8002800 <HAL_TIM_Base_MspInit+0xf4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d115      	bne.n	80027e6 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_TIM_Base_MspInit+0xe8>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <HAL_TIM_Base_MspInit+0xe8>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_TIM_Base_MspInit+0xe8>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	201e      	movs	r0, #30
 80027dc:	f000 f9e5 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027e0:	201e      	movs	r0, #30
 80027e2:	f000 f9fe 	bl	8002be2 <HAL_NVIC_EnableIRQ>
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40010000 	.word	0x40010000
 80027f4:	40023800 	.word	0x40023800
 80027f8:	2001be9c 	.word	0x2001be9c
 80027fc:	40026470 	.word	0x40026470
 8002800:	40000800 	.word	0x40000800

08002804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_TIM_MspPostInit+0x68>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d11d      	bne.n	8002862 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_TIM_MspPostInit+0x6c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a10      	ldr	r2, [pc, #64]	; (8002870 <HAL_TIM_MspPostInit+0x6c>)
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_TIM_MspPostInit+0x6c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284e:	2303      	movs	r3, #3
 8002850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002852:	2302      	movs	r3, #2
 8002854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	4619      	mov	r1, r3
 800285c:	4805      	ldr	r0, [pc, #20]	; (8002874 <HAL_TIM_MspPostInit+0x70>)
 800285e:	f000 fcc3 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002862:	bf00      	nop
 8002864:	3720      	adds	r7, #32
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40000800 	.word	0x40000800
 8002870:	40023800 	.word	0x40023800
 8002874:	40020400 	.word	0x40020400

08002878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800287c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800287e:	e003      	b.n	8002888 <LoopCopyDataInit>

08002880 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002882:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002884:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002886:	3104      	adds	r1, #4

08002888 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002888:	480b      	ldr	r0, [pc, #44]	; (80028b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800288c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800288e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002890:	d3f6      	bcc.n	8002880 <CopyDataInit>
  ldr  r2, =_sbss
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002894:	e002      	b.n	800289c <LoopFillZerobss>

08002896 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002896:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002898:	f842 3b04 	str.w	r3, [r2], #4

0800289c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800289e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028a0:	d3f9      	bcc.n	8002896 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028a2:	f7ff fe57 	bl	8002554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028a6:	f00a fad3 	bl	800ce50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028aa:	f7ff fc1d 	bl	80020e8 <main>
  bx  lr    
 80028ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028b4:	0800e8a4 	.word	0x0800e8a4
  ldr  r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028bc:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 80028c0:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 80028c4:	2001f8cc 	.word	0x2001f8cc

080028c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028c8:	e7fe      	b.n	80028c8 <ADC_IRQHandler>
	...

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_Init+0x40>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	; (800290c <HAL_Init+0x40>)
 80028d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_Init+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_Init+0x40>)
 80028e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_Init+0x40>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a07      	ldr	r2, [pc, #28]	; (800290c <HAL_Init+0x40>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f4:	2003      	movs	r0, #3
 80028f6:	f000 f94d 	bl	8002b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f000 f808 	bl	8002910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002900:	f7ff fd46 	bl	8002390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023c00 	.word	0x40023c00

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_InitTick+0x54>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_InitTick+0x58>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002926:	fbb3 f3f1 	udiv	r3, r3, r1
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f965 	bl	8002bfe <HAL_SYSTICK_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00e      	b.n	800295c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d80a      	bhi.n	800295a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002944:	2200      	movs	r2, #0
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f000 f92d 	bl	8002baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <HAL_InitTick+0x5c>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000010 	.word	0x20000010
 8002968:	20000018 	.word	0x20000018
 800296c:	20000014 	.word	0x20000014

08002970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_IncTick+0x20>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x24>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_IncTick+0x24>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000018 	.word	0x20000018
 8002994:	2001bf7c 	.word	0x2001bf7c

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	2001bf7c 	.word	0x2001bf7c

080029b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7ff ffee 	bl	8002998 <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d005      	beq.n	80029d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_Delay+0x40>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029d6:	bf00      	nop
 80029d8:	f7ff ffde 	bl	8002998 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d8f7      	bhi.n	80029d8 <HAL_Delay+0x28>
  {
  }
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000018 	.word	0x20000018

080029f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a10:	4013      	ands	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a26:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	60d3      	str	r3, [r2, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <__NVIC_GetPriorityGrouping+0x18>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	f003 0307 	and.w	r3, r3, #7
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	db0b      	blt.n	8002a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	4907      	ldr	r1, [pc, #28]	; (8002a90 <__NVIC_EnableIRQ+0x38>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2001      	movs	r0, #1
 8002a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	db0a      	blt.n	8002abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	490c      	ldr	r1, [pc, #48]	; (8002ae0 <__NVIC_SetPriority+0x4c>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002abc:	e00a      	b.n	8002ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <__NVIC_SetPriority+0x50>)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	3b04      	subs	r3, #4
 8002acc:	0112      	lsls	r2, r2, #4
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	761a      	strb	r2, [r3, #24]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000e100 	.word	0xe000e100
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f1c3 0307 	rsb	r3, r3, #7
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	bf28      	it	cs
 8002b06:	2304      	movcs	r3, #4
 8002b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d902      	bls.n	8002b18 <NVIC_EncodePriority+0x30>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3b03      	subs	r3, #3
 8002b16:	e000      	b.n	8002b1a <NVIC_EncodePriority+0x32>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43d9      	mvns	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	4313      	orrs	r3, r2
         );
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b60:	d301      	bcc.n	8002b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00f      	b.n	8002b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <SysTick_Config+0x40>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6e:	210f      	movs	r1, #15
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f7ff ff8e 	bl	8002a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <SysTick_Config+0x40>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7e:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <SysTick_Config+0x40>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000e010 	.word	0xe000e010

08002b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff29 	bl	80029f4 <__NVIC_SetPriorityGrouping>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff ff3e 	bl	8002a3c <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff8e 	bl	8002ae8 <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5d 	bl	8002a94 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff31 	bl	8002a58 <__NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffa2 	bl	8002b50 <SysTick_Config>
 8002c0c:	4603      	mov	r3, r0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7ff feb8 	bl	8002998 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e099      	b.n	8002d68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c54:	e00f      	b.n	8002c76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c56:	f7ff fe9f 	bl	8002998 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d908      	bls.n	8002c76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e078      	b.n	8002d68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e8      	bne.n	8002c56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <HAL_DMA_Init+0x158>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d107      	bne.n	8002ce0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0307 	bic.w	r3, r3, #7
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d117      	bne.n	8002d3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f9e9 	bl	80030f4 <DMA_CheckFifoParam>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2240      	movs	r2, #64	; 0x40
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d36:	2301      	movs	r3, #1
 8002d38:	e016      	b.n	8002d68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f9a0 	bl	8003088 <DMA_CalcBaseAndBitshift>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	223f      	movs	r2, #63	; 0x3f
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	f010803f 	.word	0xf010803f

08002d74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d80:	4b92      	ldr	r3, [pc, #584]	; (8002fcc <HAL_DMA_IRQHandler+0x258>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a92      	ldr	r2, [pc, #584]	; (8002fd0 <HAL_DMA_IRQHandler+0x25c>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	2208      	movs	r2, #8
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01a      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0204 	bic.w	r2, r2, #4
 8002dc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2208      	movs	r2, #8
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d012      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e38:	2204      	movs	r2, #4
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	2210      	movs	r2, #16
 8002e52:	409a      	lsls	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d043      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03c      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	2210      	movs	r2, #16
 8002e70:	409a      	lsls	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d024      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
 8002ea2:	e01f      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01b      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
 8002eb4:	e016      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0208 	bic.w	r2, r2, #8
 8002ed2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	2220      	movs	r2, #32
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 808e 	beq.w	8003012 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8086 	beq.w	8003012 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d136      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0216 	bic.w	r2, r2, #22
 8002f2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <HAL_DMA_IRQHandler+0x1da>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0208 	bic.w	r2, r2, #8
 8002f5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	223f      	movs	r2, #63	; 0x3f
 8002f64:	409a      	lsls	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d07d      	beq.n	800307e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
        }
        return;
 8002f8a:	e078      	b.n	800307e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01c      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d108      	bne.n	8002fba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d030      	beq.n	8003012 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
 8002fb8:	e02b      	b.n	8003012 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d027      	beq.n	8003012 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
 8002fca:	e022      	b.n	8003012 <HAL_DMA_IRQHandler+0x29e>
 8002fcc:	20000010 	.word	0x20000010
 8002fd0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0210 	bic.w	r2, r2, #16
 8002ff0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	2b00      	cmp	r3, #0
 8003018:	d032      	beq.n	8003080 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d022      	beq.n	800306c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2205      	movs	r2, #5
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	3301      	adds	r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	429a      	cmp	r2, r3
 8003048:	d307      	bcc.n	800305a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f2      	bne.n	800303e <HAL_DMA_IRQHandler+0x2ca>
 8003058:	e000      	b.n	800305c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800305a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
 800307c:	e000      	b.n	8003080 <HAL_DMA_IRQHandler+0x30c>
        return;
 800307e:	bf00      	nop
    }
  }
}
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop

08003088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	3b10      	subs	r3, #16
 8003098:	4a14      	ldr	r2, [pc, #80]	; (80030ec <DMA_CalcBaseAndBitshift+0x64>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030a2:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <DMA_CalcBaseAndBitshift+0x68>)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d909      	bls.n	80030ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030be:	f023 0303 	bic.w	r3, r3, #3
 80030c2:	1d1a      	adds	r2, r3, #4
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58
 80030c8:	e007      	b.n	80030da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030d2:	f023 0303 	bic.w	r3, r3, #3
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	aaaaaaab 	.word	0xaaaaaaab
 80030f0:	0800e3f4 	.word	0x0800e3f4

080030f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11f      	bne.n	800314e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d855      	bhi.n	80031c0 <DMA_CheckFifoParam+0xcc>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <DMA_CheckFifoParam+0x28>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	0800312d 	.word	0x0800312d
 8003120:	0800313f 	.word	0x0800313f
 8003124:	0800312d 	.word	0x0800312d
 8003128:	080031c1 	.word	0x080031c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d045      	beq.n	80031c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313c:	e042      	b.n	80031c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003146:	d13f      	bne.n	80031c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314c:	e03c      	b.n	80031c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003156:	d121      	bne.n	800319c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d836      	bhi.n	80031cc <DMA_CheckFifoParam+0xd8>
 800315e:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <DMA_CheckFifoParam+0x70>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003175 	.word	0x08003175
 8003168:	0800317b 	.word	0x0800317b
 800316c:	08003175 	.word	0x08003175
 8003170:	0800318d 	.word	0x0800318d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e02f      	b.n	80031da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d024      	beq.n	80031d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318a:	e021      	b.n	80031d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003194:	d11e      	bne.n	80031d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800319a:	e01b      	b.n	80031d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d902      	bls.n	80031a8 <DMA_CheckFifoParam+0xb4>
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d003      	beq.n	80031ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031a6:	e018      	b.n	80031da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      break;
 80031ac:	e015      	b.n	80031da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00e      	beq.n	80031d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      break;
 80031be:	e00b      	b.n	80031d8 <DMA_CheckFifoParam+0xe4>
      break;
 80031c0:	bf00      	nop
 80031c2:	e00a      	b.n	80031da <DMA_CheckFifoParam+0xe6>
      break;
 80031c4:	bf00      	nop
 80031c6:	e008      	b.n	80031da <DMA_CheckFifoParam+0xe6>
      break;
 80031c8:	bf00      	nop
 80031ca:	e006      	b.n	80031da <DMA_CheckFifoParam+0xe6>
      break;
 80031cc:	bf00      	nop
 80031ce:	e004      	b.n	80031da <DMA_CheckFifoParam+0xe6>
      break;
 80031d0:	bf00      	nop
 80031d2:	e002      	b.n	80031da <DMA_CheckFifoParam+0xe6>
      break;   
 80031d4:	bf00      	nop
 80031d6:	e000      	b.n	80031da <DMA_CheckFifoParam+0xe6>
      break;
 80031d8:	bf00      	nop
    }
  } 
  
  return status; 
 80031da:	7bfb      	ldrb	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	e159      	b.n	80034b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003204:	2201      	movs	r2, #1
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	429a      	cmp	r2, r3
 800321e:	f040 8148 	bne.w	80034b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d00b      	beq.n	8003242 <HAL_GPIO_Init+0x5a>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003236:	2b11      	cmp	r3, #17
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b12      	cmp	r3, #18
 8003240:	d130      	bne.n	80032a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	2203      	movs	r2, #3
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003278:	2201      	movs	r2, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 0201 	and.w	r2, r3, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0xfc>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b12      	cmp	r3, #18
 80032e2:	d123      	bne.n	800332c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	08da      	lsrs	r2, r3, #3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3208      	adds	r2, #8
 80032ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	220f      	movs	r2, #15
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	08da      	lsrs	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3208      	adds	r2, #8
 8003326:	69b9      	ldr	r1, [r7, #24]
 8003328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0203 	and.w	r2, r3, #3
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80a2 	beq.w	80034b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	4b56      	ldr	r3, [pc, #344]	; (80034cc <HAL_GPIO_Init+0x2e4>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	4a55      	ldr	r2, [pc, #340]	; (80034cc <HAL_GPIO_Init+0x2e4>)
 8003378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800337c:	6453      	str	r3, [r2, #68]	; 0x44
 800337e:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_GPIO_Init+0x2e4>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800338a:	4a51      	ldr	r2, [pc, #324]	; (80034d0 <HAL_GPIO_Init+0x2e8>)
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	3302      	adds	r3, #2
 8003392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	220f      	movs	r2, #15
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a48      	ldr	r2, [pc, #288]	; (80034d4 <HAL_GPIO_Init+0x2ec>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d019      	beq.n	80033ea <HAL_GPIO_Init+0x202>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a47      	ldr	r2, [pc, #284]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_GPIO_Init+0x1fe>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a46      	ldr	r2, [pc, #280]	; (80034dc <HAL_GPIO_Init+0x2f4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00d      	beq.n	80033e2 <HAL_GPIO_Init+0x1fa>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a45      	ldr	r2, [pc, #276]	; (80034e0 <HAL_GPIO_Init+0x2f8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <HAL_GPIO_Init+0x1f6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a44      	ldr	r2, [pc, #272]	; (80034e4 <HAL_GPIO_Init+0x2fc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_GPIO_Init+0x1f2>
 80033d6:	2304      	movs	r3, #4
 80033d8:	e008      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033da:	2307      	movs	r3, #7
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033de:	2303      	movs	r3, #3
 80033e0:	e004      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e002      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033ea:	2300      	movs	r3, #0
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	f002 0203 	and.w	r2, r2, #3
 80033f2:	0092      	lsls	r2, r2, #2
 80033f4:	4093      	lsls	r3, r2
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033fc:	4934      	ldr	r1, [pc, #208]	; (80034d0 <HAL_GPIO_Init+0x2e8>)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3302      	adds	r3, #2
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800340a:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_GPIO_Init+0x300>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800342e:	4a2e      	ldr	r2, [pc, #184]	; (80034e8 <HAL_GPIO_Init+0x300>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003434:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <HAL_GPIO_Init+0x300>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003458:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <HAL_GPIO_Init+0x300>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_GPIO_Init+0x300>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003482:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_GPIO_Init+0x300>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <HAL_GPIO_Init+0x300>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034ac:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <HAL_GPIO_Init+0x300>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	f67f aea2 	bls.w	8003204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	3724      	adds	r7, #36	; 0x24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40013800 	.word	0x40013800
 80034d4:	40020000 	.word	0x40020000
 80034d8:	40020400 	.word	0x40020400
 80034dc:	40020800 	.word	0x40020800
 80034e0:	40020c00 	.word	0x40020c00
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40013c00 	.word	0x40013c00

080034ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
 80034f8:	4613      	mov	r3, r2
 80034fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034fc:	787b      	ldrb	r3, [r7, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003508:	e003      	b.n	8003512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	041a      	lsls	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	619a      	str	r2, [r3, #24]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800351e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003520:	b08f      	sub	sp, #60	; 0x3c
 8003522:	af0a      	add	r7, sp, #40	; 0x28
 8003524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e10f      	b.n	8003750 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f009 f988 	bl	800c860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f003 f919 	bl	80067a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	687e      	ldr	r6, [r7, #4]
 800357c:	466d      	mov	r5, sp
 800357e:	f106 0410 	add.w	r4, r6, #16
 8003582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800358e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003592:	1d33      	adds	r3, r6, #4
 8003594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f002 fff0 	bl	800657c <USB_CoreInit>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0d0      	b.n	8003750 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f003 f907 	bl	80067c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e04a      	b.n	8003656 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	333d      	adds	r3, #61	; 0x3d
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	333c      	adds	r3, #60	; 0x3c
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	b298      	uxth	r0, r3
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3342      	adds	r3, #66	; 0x42
 80035fc:	4602      	mov	r2, r0
 80035fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	333f      	adds	r3, #63	; 0x3f
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3344      	adds	r3, #68	; 0x44
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3348      	adds	r3, #72	; 0x48
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3350      	adds	r3, #80	; 0x50
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	3301      	adds	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	d3af      	bcc.n	80035c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	e044      	b.n	80036f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	3301      	adds	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3b5      	bcc.n	8003666 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	687e      	ldr	r6, [r7, #4]
 8003702:	466d      	mov	r5, sp
 8003704:	f106 0410 	add.w	r4, r6, #16
 8003708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800370c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003710:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003714:	e885 0003 	stmia.w	r5, {r0, r1}
 8003718:	1d33      	adds	r3, r6, #4
 800371a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800371c:	6838      	ldr	r0, [r7, #0]
 800371e:	f003 f87d 	bl	800681c <USB_DevInit>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e00d      	b.n	8003750 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f004 f8bc 	bl	80078c6 <USB_DevDisconnect>

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003758 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_PCD_Start+0x1c>
 8003770:	2302      	movs	r3, #2
 8003772:	e020      	b.n	80037b6 <HAL_PCD_Start+0x5e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	2b01      	cmp	r3, #1
 8003782:	d109      	bne.n	8003798 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003788:	2b01      	cmp	r3, #1
 800378a:	d005      	beq.n	8003798 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f004 f87a 	bl	8007896 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f002 ffec 	bl	8006784 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037be:	b590      	push	{r4, r7, lr}
 80037c0:	b08d      	sub	sp, #52	; 0x34
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f004 f921 	bl	8007a1c <USB_GetMode>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f040 839d 	bne.w	8003f1c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 f885 	bl	80078f6 <USB_ReadInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8393 	beq.w	8003f1a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 f87c 	bl	80078f6 <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d107      	bne.n	8003818 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f002 0202 	and.w	r2, r2, #2
 8003816:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f004 f86a 	bl	80078f6 <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d161      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0210 	bic.w	r2, r2, #16
 800383a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	3304      	adds	r3, #4
 800385a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	0c5b      	lsrs	r3, r3, #17
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	2b02      	cmp	r3, #2
 8003866:	d124      	bne.n	80038b2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d035      	beq.n	80038e0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800387e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003882:	b29b      	uxth	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	6a38      	ldr	r0, [r7, #32]
 8003888:	f003 fee2 	bl	8007650 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003898:	441a      	add	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038aa:	441a      	add	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	619a      	str	r2, [r3, #24]
 80038b0:	e016      	b.n	80038e0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	0c5b      	lsrs	r3, r3, #17
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	d110      	bne.n	80038e0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038c4:	2208      	movs	r2, #8
 80038c6:	4619      	mov	r1, r3
 80038c8:	6a38      	ldr	r0, [r7, #32]
 80038ca:	f003 fec1 	bl	8007650 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038da:	441a      	add	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0210 	orr.w	r2, r2, #16
 80038ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f003 fffe 	bl	80078f6 <USB_ReadInterrupts>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003900:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003904:	d16e      	bne.n	80039e4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f004 f804 	bl	800791c <USB_ReadDevAllOutEpInterrupt>
 8003914:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003916:	e062      	b.n	80039de <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d057      	beq.n	80039d2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f004 f829 	bl	8007984 <USB_ReadDevOutEPInterrupt>
 8003932:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	461a      	mov	r2, r3
 800394c:	2301      	movs	r3, #1
 800394e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fdb0 	bl	80044b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	461a      	mov	r2, r3
 8003970:	2308      	movs	r3, #8
 8003972:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 feaa 	bl	80046d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	461a      	mov	r2, r3
 8003994:	2310      	movs	r3, #16
 8003996:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ae:	461a      	mov	r2, r3
 80039b0:	2320      	movs	r3, #32
 80039b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	461a      	mov	r2, r3
 80039cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	3301      	adds	r3, #1
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d199      	bne.n	8003918 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f003 ff84 	bl	80078f6 <USB_ReadInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039f8:	f040 80c0 	bne.w	8003b7c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 ffa5 	bl	8007950 <USB_ReadDevAllInEpInterrupt>
 8003a06:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a0c:	e0b2      	b.n	8003b74 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a7 	beq.w	8003b68 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 ffcb 	bl	80079c0 <USB_ReadDevInEPInterrupt>
 8003a2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d057      	beq.n	8003ae6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69f9      	ldr	r1, [r7, #28]
 8003a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a56:	4013      	ands	r3, r2
 8003a58:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a66:	461a      	mov	r2, r3
 8003a68:	2301      	movs	r3, #1
 8003a6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d132      	bne.n	8003ada <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3348      	adds	r3, #72	; 0x48
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4403      	add	r3, r0
 8003a94:	3344      	adds	r3, #68	; 0x44
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4419      	add	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4403      	add	r3, r0
 8003aa8:	3348      	adds	r3, #72	; 0x48
 8003aaa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d113      	bne.n	8003ada <HAL_PCD_IRQHandler+0x31c>
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3350      	adds	r3, #80	; 0x50
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d108      	bne.n	8003ada <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	f003 ffd3 	bl	8007a80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f008 ff3e 	bl	800c962 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	461a      	mov	r2, r3
 8003afe:	2308      	movs	r3, #8
 8003b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b34:	461a      	mov	r2, r3
 8003b36:	2340      	movs	r3, #64	; 0x40
 8003b38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b50:	461a      	mov	r2, r3
 8003b52:	2302      	movs	r3, #2
 8003b54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fc1b 	bl	800439e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f47f af49 	bne.w	8003a0e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 feb8 	bl	80078f6 <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b90:	d122      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d108      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bb8:	2100      	movs	r1, #0
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fe26 	bl	800480c <HAL_PCDEx_LPM_Callback>
 8003bc0:	e002      	b.n	8003bc8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f008 ff3a 	bl	800ca3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f003 fe8a 	bl	80078f6 <USB_ReadInterrupts>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bec:	d112      	bne.n	8003c14 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f008 fef6 	bl	800c9f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c12:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f003 fe6c 	bl	80078f6 <USB_ReadInterrupts>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	f040 80c7 	bne.w	8003dba <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2110      	movs	r1, #16
 8003c46:	4618      	mov	r0, r3
 8003c48:	f002 ff4c 	bl	8006ae4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c50:	e056      	b.n	8003d00 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c64:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c76:	0151      	lsls	r1, r2, #5
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c84:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c96:	0151      	lsls	r1, r2, #5
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	440a      	add	r2, r1
 8003c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ca4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cb8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cca:	0151      	lsls	r1, r2, #5
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	440a      	add	r2, r1
 8003cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d3a3      	bcc.n	8003c52 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d18:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d1c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d016      	beq.n	8003d54 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d36:	f043 030b 	orr.w	r3, r3, #11
 8003d3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4c:	f043 030b 	orr.w	r3, r3, #11
 8003d50:	6453      	str	r3, [r2, #68]	; 0x44
 8003d52:	e015      	b.n	8003d80 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d66:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d6a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7a:	f043 030b 	orr.w	r3, r3, #11
 8003d7e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d92:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003da4:	461a      	mov	r2, r3
 8003da6:	f003 fe6b 	bl	8007a80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f003 fd99 	bl	80078f6 <USB_ReadInterrupts>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dce:	d124      	bne.n	8003e1a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f003 fe2f 	bl	8007a38 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f002 fee1 	bl	8006ba6 <USB_GetDevSpeed>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681c      	ldr	r4, [r3, #0]
 8003df0:	f001 f920 	bl	8005034 <HAL_RCC_GetHCLKFreq>
 8003df4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f002 fc1e 	bl	8006640 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f008 fdd4 	bl	800c9b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f003 fd69 	bl	80078f6 <USB_ReadInterrupts>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d10a      	bne.n	8003e44 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f008 fdb1 	bl	800c996 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f002 0208 	and.w	r2, r2, #8
 8003e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f003 fd54 	bl	80078f6 <USB_ReadInterrupts>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e58:	d10f      	bne.n	8003e7a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	4619      	mov	r1, r3
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f008 fe09 	bl	800ca7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f003 fd39 	bl	80078f6 <USB_ReadInterrupts>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e8e:	d10f      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f008 fddc 	bl	800ca58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f003 fd1e 	bl	80078f6 <USB_ReadInterrupts>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d10a      	bne.n	8003edc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f008 fdea 	bl	800caa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f003 fd08 	bl	80078f6 <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d115      	bne.n	8003f1c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f008 fdda 	bl	800cabc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	e000      	b.n	8003f1c <HAL_PCD_IRQHandler+0x75e>
      return;
 8003f1a:	bf00      	nop
    }
  }
}
 8003f1c:	3734      	adds	r7, #52	; 0x34
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd90      	pop	{r4, r7, pc}

08003f22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_PCD_SetAddress+0x1a>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e013      	b.n	8003f64 <HAL_PCD_SetAddress+0x42>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 fc78 	bl	800784a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	4608      	mov	r0, r1
 8003f76:	4611      	mov	r1, r2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	70fb      	strb	r3, [r7, #3]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	803b      	strh	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	da0f      	bge.n	8003fb2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	f003 020f 	and.w	r2, r3, #15
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	3338      	adds	r3, #56	; 0x38
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	705a      	strb	r2, [r3, #1]
 8003fb0:	e00f      	b.n	8003fd2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	f003 020f 	and.w	r2, r3, #15
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3304      	adds	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fde:	883a      	ldrh	r2, [r7, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	78ba      	ldrb	r2, [r7, #2]
 8003fe8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	785b      	ldrb	r3, [r3, #1]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ffc:	78bb      	ldrb	r3, [r7, #2]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d102      	bne.n	8004008 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_PCD_EP_Open+0xaa>
 8004012:	2302      	movs	r3, #2
 8004014:	e00e      	b.n	8004034 <HAL_PCD_EP_Open+0xc8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	4618      	mov	r0, r3
 8004026:	f002 fde3 	bl	8006bf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004032:	7afb      	ldrb	r3, [r7, #11]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800404c:	2b00      	cmp	r3, #0
 800404e:	da0f      	bge.n	8004070 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 020f 	and.w	r2, r3, #15
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	3338      	adds	r3, #56	; 0x38
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	3304      	adds	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	705a      	strb	r2, [r3, #1]
 800406e:	e00f      	b.n	8004090 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	3304      	adds	r3, #4
 8004088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_PCD_EP_Close+0x6e>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e00e      	b.n	80040c8 <HAL_PCD_EP_Close+0x8c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f002 fe21 	bl	8006d00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	460b      	mov	r3, r1
 80040de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e0:	7afb      	ldrb	r3, [r7, #11]
 80040e2:	f003 020f 	and.w	r2, r3, #15
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	3304      	adds	r3, #4
 80040f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2200      	movs	r2, #0
 8004110:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004112:	7afb      	ldrb	r3, [r7, #11]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	b2da      	uxtb	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800412c:	7afb      	ldrb	r3, [r7, #11]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	f003 f8fc 	bl	8007340 <USB_EP0StartXfer>
 8004148:	e008      	b.n	800415c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	6979      	ldr	r1, [r7, #20]
 8004158:	f002 feae 	bl	8006eb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	f003 020f 	and.w	r2, r3, #15
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004188:	681b      	ldr	r3, [r3, #0]
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	460b      	mov	r3, r1
 80041a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a6:	7afb      	ldrb	r3, [r7, #11]
 80041a8:	f003 020f 	and.w	r2, r3, #15
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	3338      	adds	r3, #56	; 0x38
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	3304      	adds	r3, #4
 80041bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2200      	movs	r2, #0
 80041ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2201      	movs	r2, #1
 80041d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041d6:	7afb      	ldrb	r3, [r7, #11]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d102      	bne.n	80041f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041f0:	7afb      	ldrb	r3, [r7, #11]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	6979      	ldr	r1, [r7, #20]
 8004208:	f003 f89a 	bl	8007340 <USB_EP0StartXfer>
 800420c:	e008      	b.n	8004220 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	6979      	ldr	r1, [r7, #20]
 800421c:	f002 fe4c 	bl	8006eb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d901      	bls.n	8004248 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e050      	b.n	80042ea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800424c:	2b00      	cmp	r3, #0
 800424e:	da0f      	bge.n	8004270 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	f003 020f 	and.w	r2, r3, #15
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	3338      	adds	r3, #56	; 0x38
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4413      	add	r3, r2
 8004264:	3304      	adds	r3, #4
 8004266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	705a      	strb	r2, [r3, #1]
 800426e:	e00d      	b.n	800428c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	4613      	mov	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	3304      	adds	r3, #4
 8004284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_PCD_EP_SetStall+0x82>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e01e      	b.n	80042ea <HAL_PCD_EP_SetStall+0xc0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68f9      	ldr	r1, [r7, #12]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f003 f9f1 	bl	80076a2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	b2d9      	uxtb	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042da:	461a      	mov	r2, r3
 80042dc:	f003 fbd0 	bl	8007a80 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	f003 020f 	and.w	r2, r3, #15
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	429a      	cmp	r2, r3
 800430a:	d901      	bls.n	8004310 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e042      	b.n	8004396 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004314:	2b00      	cmp	r3, #0
 8004316:	da0f      	bge.n	8004338 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	f003 020f 	and.w	r2, r3, #15
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	3338      	adds	r3, #56	; 0x38
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	705a      	strb	r2, [r3, #1]
 8004336:	e00f      	b.n	8004358 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	f003 020f 	and.w	r2, r3, #15
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	3304      	adds	r3, #4
 8004350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_PCD_EP_ClrStall+0x86>
 8004374:	2302      	movs	r3, #2
 8004376:	e00e      	b.n	8004396 <HAL_PCD_EP_ClrStall+0xa4>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68f9      	ldr	r1, [r7, #12]
 8004386:	4618      	mov	r0, r3
 8004388:	f003 f9f9 	bl	800777e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b08a      	sub	sp, #40	; 0x28
 80043a2:	af02      	add	r7, sp, #8
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	3338      	adds	r3, #56	; 0x38
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4413      	add	r3, r2
 80043c2:	3304      	adds	r3, #4
 80043c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d901      	bls.n	80043d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e06c      	b.n	80044b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d902      	bls.n	80043f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3303      	adds	r3, #3
 80043f6:	089b      	lsrs	r3, r3, #2
 80043f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043fa:	e02b      	b.n	8004454 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	429a      	cmp	r2, r3
 8004410:	d902      	bls.n	8004418 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	3303      	adds	r3, #3
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68d9      	ldr	r1, [r3, #12]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004430:	b2db      	uxtb	r3, r3
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	4603      	mov	r3, r0
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f003 f8d5 	bl	80075e6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	441a      	add	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	699a      	ldr	r2, [r3, #24]
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	441a      	add	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	b29b      	uxth	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	429a      	cmp	r2, r3
 8004468:	d809      	bhi.n	800447e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004472:	429a      	cmp	r2, r3
 8004474:	d203      	bcs.n	800447e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1be      	bne.n	80043fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	429a      	cmp	r2, r3
 8004488:	d811      	bhi.n	80044ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	2201      	movs	r2, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	6939      	ldr	r1, [r7, #16]
 80044a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044aa:	4013      	ands	r3, r2
 80044ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	333c      	adds	r3, #60	; 0x3c
 80044d0:	3304      	adds	r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	f040 80a0 	bne.w	8004630 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d015      	beq.n	8004526 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a72      	ldr	r2, [pc, #456]	; (80046c8 <PCD_EP_OutXfrComplete_int+0x210>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	f240 80dd 	bls.w	80046be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80d7 	beq.w	80046be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004522:	6093      	str	r3, [r2, #8]
 8004524:	e0cb      	b.n	80046be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	2320      	movs	r3, #32
 8004540:	6093      	str	r3, [r2, #8]
 8004542:	e0bc      	b.n	80046be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 80b7 	bne.w	80046be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a5d      	ldr	r2, [pc, #372]	; (80046c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d90f      	bls.n	8004578 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456e:	461a      	mov	r2, r3
 8004570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004574:	6093      	str	r3, [r2, #8]
 8004576:	e0a2      	b.n	80046be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800458a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	0159      	lsls	r1, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	440b      	add	r3, r1
 8004594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800459e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4403      	add	r3, r0
 80045ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80045b2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045c6:	6819      	ldr	r1, [r3, #0]
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4403      	add	r3, r0
 80045d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4419      	add	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4403      	add	r3, r0
 80045ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045f0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d114      	bne.n	8004622 <PCD_EP_OutXfrComplete_int+0x16a>
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d108      	bne.n	8004622 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800461a:	461a      	mov	r2, r3
 800461c:	2101      	movs	r1, #1
 800461e:	f003 fa2f 	bl	8007a80 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f008 f97f 	bl	800c92c <HAL_PCD_DataOutStageCallback>
 800462e:	e046      	b.n	80046be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a26      	ldr	r2, [pc, #152]	; (80046cc <PCD_EP_OutXfrComplete_int+0x214>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d124      	bne.n	8004682 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	461a      	mov	r2, r3
 8004650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004654:	6093      	str	r3, [r2, #8]
 8004656:	e032      	b.n	80046be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	461a      	mov	r2, r3
 8004670:	2320      	movs	r3, #32
 8004672:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f008 f956 	bl	800c92c <HAL_PCD_DataOutStageCallback>
 8004680:	e01d      	b.n	80046be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d114      	bne.n	80046b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d108      	bne.n	80046b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046aa:	461a      	mov	r2, r3
 80046ac:	2100      	movs	r1, #0
 80046ae:	f003 f9e7 	bl	8007a80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f008 f937 	bl	800c92c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	4f54300a 	.word	0x4f54300a
 80046cc:	4f54310a 	.word	0x4f54310a

080046d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	333c      	adds	r3, #60	; 0x3c
 80046e8:	3304      	adds	r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a15      	ldr	r2, [pc, #84]	; (8004758 <PCD_EP_OutSetupPacket_int+0x88>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d90e      	bls.n	8004724 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800470c:	2b00      	cmp	r3, #0
 800470e:	d009      	beq.n	8004724 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471c:	461a      	mov	r2, r3
 800471e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004722:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f008 f8ef 	bl	800c908 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <PCD_EP_OutSetupPacket_int+0x88>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d90c      	bls.n	800474c <PCD_EP_OutSetupPacket_int+0x7c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d108      	bne.n	800474c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004744:	461a      	mov	r2, r3
 8004746:	2101      	movs	r1, #1
 8004748:	f003 f99a 	bl	8007a80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	4f54300a 	.word	0x4f54300a

0800475c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
 8004768:	4613      	mov	r3, r2
 800476a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d107      	bne.n	800478a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800477a:	883b      	ldrh	r3, [r7, #0]
 800477c:	0419      	lsls	r1, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	430a      	orrs	r2, r1
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
 8004788:	e028      	b.n	80047dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	4413      	add	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004798:	2300      	movs	r3, #0
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	e00d      	b.n	80047ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	3340      	adds	r3, #64	; 0x40
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	4413      	add	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	3301      	adds	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	3b01      	subs	r3, #1
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d3ec      	bcc.n	800479e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047c4:	883b      	ldrh	r3, [r7, #0]
 80047c6:	0418      	lsls	r0, r3, #16
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6819      	ldr	r1, [r3, #0]
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	4302      	orrs	r2, r0
 80047d4:	3340      	adds	r3, #64	; 0x40
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	460b      	mov	r3, r1
 80047f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e25b      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d075      	beq.n	800492e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004842:	4ba3      	ldr	r3, [pc, #652]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b04      	cmp	r3, #4
 800484c:	d00c      	beq.n	8004868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800484e:	4ba0      	ldr	r3, [pc, #640]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004856:	2b08      	cmp	r3, #8
 8004858:	d112      	bne.n	8004880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485a:	4b9d      	ldr	r3, [pc, #628]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004866:	d10b      	bne.n	8004880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004868:	4b99      	ldr	r3, [pc, #612]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05b      	beq.n	800492c <HAL_RCC_OscConfig+0x108>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d157      	bne.n	800492c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e236      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d106      	bne.n	8004898 <HAL_RCC_OscConfig+0x74>
 800488a:	4b91      	ldr	r3, [pc, #580]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a90      	ldr	r2, [pc, #576]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e01d      	b.n	80048d4 <HAL_RCC_OscConfig+0xb0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x98>
 80048a2:	4b8b      	ldr	r3, [pc, #556]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a8a      	ldr	r2, [pc, #552]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	4b88      	ldr	r3, [pc, #544]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a87      	ldr	r2, [pc, #540]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e00b      	b.n	80048d4 <HAL_RCC_OscConfig+0xb0>
 80048bc:	4b84      	ldr	r3, [pc, #528]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a83      	ldr	r2, [pc, #524]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80048c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	4b81      	ldr	r3, [pc, #516]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a80      	ldr	r2, [pc, #512]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80048ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d013      	beq.n	8004904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fe f85c 	bl	8002998 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e4:	f7fe f858 	bl	8002998 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e1fb      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	4b76      	ldr	r3, [pc, #472]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0xc0>
 8004902:	e014      	b.n	800492e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fe f848 	bl	8002998 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800490c:	f7fe f844 	bl	8002998 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e1e7      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491e:	4b6c      	ldr	r3, [pc, #432]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0xe8>
 800492a:	e000      	b.n	800492e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d063      	beq.n	8004a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800493a:	4b65      	ldr	r3, [pc, #404]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 030c 	and.w	r3, r3, #12
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004946:	4b62      	ldr	r3, [pc, #392]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800494e:	2b08      	cmp	r3, #8
 8004950:	d11c      	bne.n	800498c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004952:	4b5f      	ldr	r3, [pc, #380]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d116      	bne.n	800498c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495e:	4b5c      	ldr	r3, [pc, #368]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_RCC_OscConfig+0x152>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e1bb      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004976:	4b56      	ldr	r3, [pc, #344]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4952      	ldr	r1, [pc, #328]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498a:	e03a      	b.n	8004a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d020      	beq.n	80049d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004994:	4b4f      	ldr	r3, [pc, #316]	; (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fd fffd 	bl	8002998 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a2:	f7fd fff9 	bl	8002998 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e19c      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b4:	4b46      	ldr	r3, [pc, #280]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c0:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4940      	ldr	r1, [pc, #256]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]
 80049d4:	e015      	b.n	8004a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d6:	4b3f      	ldr	r3, [pc, #252]	; (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fd ffdc 	bl	8002998 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e4:	f7fd ffd8 	bl	8002998 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e17b      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f6:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d030      	beq.n	8004a70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a16:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_RCC_OscConfig+0x2b4>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7fd ffbc 	bl	8002998 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a24:	f7fd ffb8 	bl	8002998 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e15b      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a36:	4b26      	ldr	r3, [pc, #152]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x200>
 8004a42:	e015      	b.n	8004a70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a44:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <HAL_RCC_OscConfig+0x2b4>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4a:	f7fd ffa5 	bl	8002998 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a52:	f7fd ffa1 	bl	8002998 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e144      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a64:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f0      	bne.n	8004a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80a0 	beq.w	8004bbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a82:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	4a0e      	ldr	r2, [pc, #56]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <HAL_RCC_OscConfig+0x2ac>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	60bb      	str	r3, [r7, #8]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_RCC_OscConfig+0x2b8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d121      	bne.n	8004afe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aba:	4b08      	ldr	r3, [pc, #32]	; (8004adc <HAL_RCC_OscConfig+0x2b8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a07      	ldr	r2, [pc, #28]	; (8004adc <HAL_RCC_OscConfig+0x2b8>)
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac6:	f7fd ff67 	bl	8002998 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004acc:	e011      	b.n	8004af2 <HAL_RCC_OscConfig+0x2ce>
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	42470000 	.word	0x42470000
 8004ad8:	42470e80 	.word	0x42470e80
 8004adc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae0:	f7fd ff5a 	bl	8002998 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0fd      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af2:	4b81      	ldr	r3, [pc, #516]	; (8004cf8 <HAL_RCC_OscConfig+0x4d4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d106      	bne.n	8004b14 <HAL_RCC_OscConfig+0x2f0>
 8004b06:	4b7d      	ldr	r3, [pc, #500]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a7c      	ldr	r2, [pc, #496]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6713      	str	r3, [r2, #112]	; 0x70
 8004b12:	e01c      	b.n	8004b4e <HAL_RCC_OscConfig+0x32a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b05      	cmp	r3, #5
 8004b1a:	d10c      	bne.n	8004b36 <HAL_RCC_OscConfig+0x312>
 8004b1c:	4b77      	ldr	r3, [pc, #476]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	4a76      	ldr	r2, [pc, #472]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b22:	f043 0304 	orr.w	r3, r3, #4
 8004b26:	6713      	str	r3, [r2, #112]	; 0x70
 8004b28:	4b74      	ldr	r3, [pc, #464]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a73      	ldr	r2, [pc, #460]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	e00b      	b.n	8004b4e <HAL_RCC_OscConfig+0x32a>
 8004b36:	4b71      	ldr	r3, [pc, #452]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	4a70      	ldr	r2, [pc, #448]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	6713      	str	r3, [r2, #112]	; 0x70
 8004b42:	4b6e      	ldr	r3, [pc, #440]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	4a6d      	ldr	r2, [pc, #436]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d015      	beq.n	8004b82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b56:	f7fd ff1f 	bl	8002998 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b5e:	f7fd ff1b 	bl	8002998 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e0bc      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	4b61      	ldr	r3, [pc, #388]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ee      	beq.n	8004b5e <HAL_RCC_OscConfig+0x33a>
 8004b80:	e014      	b.n	8004bac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b82:	f7fd ff09 	bl	8002998 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b8a:	f7fd ff05 	bl	8002998 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0a6      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba0:	4b56      	ldr	r3, [pc, #344]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1ee      	bne.n	8004b8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb2:	4b52      	ldr	r3, [pc, #328]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	4a51      	ldr	r2, [pc, #324]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8092 	beq.w	8004cec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bc8:	4b4c      	ldr	r3, [pc, #304]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d05c      	beq.n	8004c8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d141      	bne.n	8004c60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bdc:	4b48      	ldr	r3, [pc, #288]	; (8004d00 <HAL_RCC_OscConfig+0x4dc>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be2:	f7fd fed9 	bl	8002998 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bea:	f7fd fed5 	bl	8002998 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e078      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfc:	4b3f      	ldr	r3, [pc, #252]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f0      	bne.n	8004bea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	019b      	lsls	r3, r3, #6
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	3b01      	subs	r3, #1
 8004c22:	041b      	lsls	r3, r3, #16
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	4933      	ldr	r1, [pc, #204]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c32:	4b33      	ldr	r3, [pc, #204]	; (8004d00 <HAL_RCC_OscConfig+0x4dc>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fd feae 	bl	8002998 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fd feaa 	bl	8002998 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e04d      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c52:	4b2a      	ldr	r3, [pc, #168]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x41c>
 8004c5e:	e045      	b.n	8004cec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c60:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <HAL_RCC_OscConfig+0x4dc>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c66:	f7fd fe97 	bl	8002998 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6e:	f7fd fe93 	bl	8002998 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e036      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c80:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCC_OscConfig+0x44a>
 8004c8c:	e02e      	b.n	8004cec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e029      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c9a:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <HAL_RCC_OscConfig+0x4d8>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d11c      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d115      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10d      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d106      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40007000 	.word	0x40007000
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	42470060 	.word	0x42470060

08004d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0cc      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d18:	4b68      	ldr	r3, [pc, #416]	; (8004ebc <HAL_RCC_ClockConfig+0x1b8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d90c      	bls.n	8004d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d26:	4b65      	ldr	r3, [pc, #404]	; (8004ebc <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2e:	4b63      	ldr	r3, [pc, #396]	; (8004ebc <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0b8      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d020      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d58:	4b59      	ldr	r3, [pc, #356]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4a58      	ldr	r2, [pc, #352]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d70:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a52      	ldr	r2, [pc, #328]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d7c:	4b50      	ldr	r3, [pc, #320]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	494d      	ldr	r1, [pc, #308]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d044      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da2:	4b47      	ldr	r3, [pc, #284]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d119      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e07f      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d107      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc2:	4b3f      	ldr	r3, [pc, #252]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e06f      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd2:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e067      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004de2:	4b37      	ldr	r3, [pc, #220]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f023 0203 	bic.w	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	4934      	ldr	r1, [pc, #208]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004df4:	f7fd fdd0 	bl	8002998 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dfc:	f7fd fdcc 	bl	8002998 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e04f      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e12:	4b2b      	ldr	r3, [pc, #172]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 020c 	and.w	r2, r3, #12
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d1eb      	bne.n	8004dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e24:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <HAL_RCC_ClockConfig+0x1b8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d20c      	bcs.n	8004e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e032      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e58:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4916      	ldr	r1, [pc, #88]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e76:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	490e      	ldr	r1, [pc, #56]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e8a:	f000 f821 	bl	8004ed0 <HAL_RCC_GetSysClockFreq>
 8004e8e:	4601      	mov	r1, r0
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e9c:	5cd3      	ldrb	r3, [r2, r3]
 8004e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8004ea2:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ea6:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <HAL_RCC_ClockConfig+0x1c8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fd fd30 	bl	8002910 <HAL_InitTick>

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40023c00 	.word	0x40023c00
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	0800e3e4 	.word	0x0800e3e4
 8004ec8:	20000010 	.word	0x20000010
 8004ecc:	20000014 	.word	0x20000014

08004ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ee6:	4b50      	ldr	r3, [pc, #320]	; (8005028 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d007      	beq.n	8004f02 <HAL_RCC_GetSysClockFreq+0x32>
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d008      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x38>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 808d 	bne.w	8005016 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004efc:	4b4b      	ldr	r3, [pc, #300]	; (800502c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004efe:	60bb      	str	r3, [r7, #8]
       break;
 8004f00:	e08c      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f02:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f04:	60bb      	str	r3, [r7, #8]
      break;
 8004f06:	e089      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f08:	4b47      	ldr	r3, [pc, #284]	; (8005028 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f12:	4b45      	ldr	r3, [pc, #276]	; (8005028 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d023      	beq.n	8004f66 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1e:	4b42      	ldr	r3, [pc, #264]	; (8005028 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	099b      	lsrs	r3, r3, #6
 8004f24:	f04f 0400 	mov.w	r4, #0
 8004f28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	ea03 0501 	and.w	r5, r3, r1
 8004f34:	ea04 0602 	and.w	r6, r4, r2
 8004f38:	4a3d      	ldr	r2, [pc, #244]	; (8005030 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f3a:	fb02 f106 	mul.w	r1, r2, r6
 8004f3e:	2200      	movs	r2, #0
 8004f40:	fb02 f205 	mul.w	r2, r2, r5
 8004f44:	440a      	add	r2, r1
 8004f46:	493a      	ldr	r1, [pc, #232]	; (8005030 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f48:	fba5 0101 	umull	r0, r1, r5, r1
 8004f4c:	1853      	adds	r3, r2, r1
 8004f4e:	4619      	mov	r1, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f04f 0400 	mov.w	r4, #0
 8004f56:	461a      	mov	r2, r3
 8004f58:	4623      	mov	r3, r4
 8004f5a:	f7fb fba5 	bl	80006a8 <__aeabi_uldivmod>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e049      	b.n	8004ffa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f66:	4b30      	ldr	r3, [pc, #192]	; (8005028 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	099b      	lsrs	r3, r3, #6
 8004f6c:	f04f 0400 	mov.w	r4, #0
 8004f70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	ea03 0501 	and.w	r5, r3, r1
 8004f7c:	ea04 0602 	and.w	r6, r4, r2
 8004f80:	4629      	mov	r1, r5
 8004f82:	4632      	mov	r2, r6
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	f04f 0400 	mov.w	r4, #0
 8004f8c:	0154      	lsls	r4, r2, #5
 8004f8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f92:	014b      	lsls	r3, r1, #5
 8004f94:	4619      	mov	r1, r3
 8004f96:	4622      	mov	r2, r4
 8004f98:	1b49      	subs	r1, r1, r5
 8004f9a:	eb62 0206 	sbc.w	r2, r2, r6
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	f04f 0400 	mov.w	r4, #0
 8004fa6:	0194      	lsls	r4, r2, #6
 8004fa8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fac:	018b      	lsls	r3, r1, #6
 8004fae:	1a5b      	subs	r3, r3, r1
 8004fb0:	eb64 0402 	sbc.w	r4, r4, r2
 8004fb4:	f04f 0100 	mov.w	r1, #0
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	00e2      	lsls	r2, r4, #3
 8004fbe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fc2:	00d9      	lsls	r1, r3, #3
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4614      	mov	r4, r2
 8004fc8:	195b      	adds	r3, r3, r5
 8004fca:	eb44 0406 	adc.w	r4, r4, r6
 8004fce:	f04f 0100 	mov.w	r1, #0
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	02a2      	lsls	r2, r4, #10
 8004fd8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004fdc:	0299      	lsls	r1, r3, #10
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f04f 0400 	mov.w	r4, #0
 8004fec:	461a      	mov	r2, r3
 8004fee:	4623      	mov	r3, r4
 8004ff0:	f7fb fb5a 	bl	80006a8 <__aeabi_uldivmod>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	0c1b      	lsrs	r3, r3, #16
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	3301      	adds	r3, #1
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	60bb      	str	r3, [r7, #8]
      break;
 8005014:	e002      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005018:	60bb      	str	r3, [r7, #8]
      break;
 800501a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800501c:	68bb      	ldr	r3, [r7, #8]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005026:	bf00      	nop
 8005028:	40023800 	.word	0x40023800
 800502c:	00f42400 	.word	0x00f42400
 8005030:	017d7840 	.word	0x017d7840

08005034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <HAL_RCC_GetHCLKFreq+0x14>)
 800503a:	681b      	ldr	r3, [r3, #0]
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000010 	.word	0x20000010

0800504c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e056      	b.n	800510c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7fd f941 	bl	8002300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005094:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	ea42 0103 	orr.w	r1, r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	f003 0104 	and.w	r1, r3, #4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_SPI_Transmit+0x22>
 8005132:	2302      	movs	r3, #2
 8005134:	e11e      	b.n	8005374 <HAL_SPI_Transmit+0x260>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800513e:	f7fd fc2b 	bl	8002998 <HAL_GetTick>
 8005142:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d002      	beq.n	800515a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005154:	2302      	movs	r3, #2
 8005156:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005158:	e103      	b.n	8005362 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_Transmit+0x52>
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d102      	bne.n	800516c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	77fb      	strb	r3, [r7, #31]
    goto error;
 800516a:	e0fa      	b.n	8005362 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2203      	movs	r2, #3
 8005170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b2:	d107      	bne.n	80051c4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d007      	beq.n	80051e2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ea:	d14b      	bne.n	8005284 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_SPI_Transmit+0xe6>
 80051f4:	8afb      	ldrh	r3, [r7, #22]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d13e      	bne.n	8005278 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	881a      	ldrh	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	1c9a      	adds	r2, r3, #2
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800521e:	e02b      	b.n	8005278 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d112      	bne.n	8005254 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	881a      	ldrh	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	1c9a      	adds	r2, r3, #2
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	86da      	strh	r2, [r3, #54]	; 0x36
 8005252:	e011      	b.n	8005278 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005254:	f7fd fba0 	bl	8002998 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d803      	bhi.n	800526c <HAL_SPI_Transmit+0x158>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d102      	bne.n	8005272 <HAL_SPI_Transmit+0x15e>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d102      	bne.n	8005278 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005276:	e074      	b.n	8005362 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1ce      	bne.n	8005220 <HAL_SPI_Transmit+0x10c>
 8005282:	e04c      	b.n	800531e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_SPI_Transmit+0x17e>
 800528c:	8afb      	ldrh	r3, [r7, #22]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d140      	bne.n	8005314 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	330c      	adds	r3, #12
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052b8:	e02c      	b.n	8005314 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d113      	bne.n	80052f0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80052ee:	e011      	b.n	8005314 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f0:	f7fd fb52 	bl	8002998 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d803      	bhi.n	8005308 <HAL_SPI_Transmit+0x1f4>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d102      	bne.n	800530e <HAL_SPI_Transmit+0x1fa>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005312:	e026      	b.n	8005362 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1cd      	bne.n	80052ba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fa36 	bl	8005794 <SPI_EndRxTxTransaction>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	77fb      	strb	r3, [r7, #31]
 800535e:	e000      	b.n	8005362 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005360:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005372:	7ffb      	ldrb	r3, [r7, #31]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	; 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800538a:	2301      	movs	r3, #1
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_SPI_TransmitReceive+0x26>
 800539e:	2302      	movs	r3, #2
 80053a0:	e18a      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x33c>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053aa:	f7fd faf5 	bl	8002998 <HAL_GetTick>
 80053ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053c0:	887b      	ldrh	r3, [r7, #2]
 80053c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d00f      	beq.n	80053ec <HAL_SPI_TransmitReceive+0x70>
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d2:	d107      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d103      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0x68>
 80053dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d003      	beq.n	80053ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053ea:	e15b      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x82>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x82>
 80053f8:	887b      	ldrh	r3, [r7, #2]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005404:	e14e      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b04      	cmp	r3, #4
 8005410:	d003      	beq.n	800541a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2205      	movs	r2, #5
 8005416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	887a      	ldrh	r2, [r7, #2]
 800542a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	887a      	ldrh	r2, [r7, #2]
 8005430:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	887a      	ldrh	r2, [r7, #2]
 800543c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	887a      	ldrh	r2, [r7, #2]
 8005442:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d007      	beq.n	800546e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005476:	d178      	bne.n	800556a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_SPI_TransmitReceive+0x10a>
 8005480:	8b7b      	ldrh	r3, [r7, #26]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d166      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	881a      	ldrh	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054aa:	e053      	b.n	8005554 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d11b      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x176>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d016      	beq.n	80054f2 <HAL_SPI_TransmitReceive+0x176>
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d113      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	881a      	ldrh	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	1c9a      	adds	r2, r3, #2
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d119      	bne.n	8005534 <HAL_SPI_TransmitReceive+0x1b8>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d014      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	b292      	uxth	r2, r2
 8005516:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	1c9a      	adds	r2, r3, #2
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005530:	2301      	movs	r3, #1
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005534:	f7fd fa30 	bl	8002998 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005540:	429a      	cmp	r2, r3
 8005542:	d807      	bhi.n	8005554 <HAL_SPI_TransmitReceive+0x1d8>
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d003      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005552:	e0a7      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1a6      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x130>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1a1      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x130>
 8005568:	e07c      	b.n	8005664 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_SPI_TransmitReceive+0x1fc>
 8005572:	8b7b      	ldrh	r3, [r7, #26]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d16b      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800559e:	e057      	b.n	8005650 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d11c      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x26c>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d017      	beq.n	80055e8 <HAL_SPI_TransmitReceive+0x26c>
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d114      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	330c      	adds	r3, #12
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d119      	bne.n	800562a <HAL_SPI_TransmitReceive+0x2ae>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d014      	beq.n	800562a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005626:	2301      	movs	r3, #1
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800562a:	f7fd f9b5 	bl	8002998 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005636:	429a      	cmp	r2, r3
 8005638:	d803      	bhi.n	8005642 <HAL_SPI_TransmitReceive+0x2c6>
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d102      	bne.n	8005648 <HAL_SPI_TransmitReceive+0x2cc>
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	d103      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800564e:	e029      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1a2      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x224>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d19d      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005666:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f893 	bl	8005794 <SPI_EndRxTxTransaction>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d006      	beq.n	8005682 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005680:	e010      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	e000      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3730      	adds	r7, #48	; 0x30
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056d0:	e04c      	b.n	800576c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d048      	beq.n	800576c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80056da:	f7fd f95d 	bl	8002998 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d902      	bls.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d13d      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005708:	d111      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005712:	d004      	beq.n	800571e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571c:	d107      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005736:	d10f      	bne.n	8005758 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005756:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e00f      	b.n	800578c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4013      	ands	r3, r2
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	bf0c      	ite	eq
 800577c:	2301      	moveq	r3, #1
 800577e:	2300      	movne	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	429a      	cmp	r2, r3
 8005788:	d1a3      	bne.n	80056d2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057a0:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <SPI_EndRxTxTransaction+0x7c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <SPI_EndRxTxTransaction+0x80>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	0d5b      	lsrs	r3, r3, #21
 80057ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057be:	d112      	bne.n	80057e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2200      	movs	r2, #0
 80057c8:	2180      	movs	r1, #128	; 0x80
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff ff78 	bl	80056c0 <SPI_WaitFlagStateUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e00f      	b.n	8005806 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fc:	2b80      	cmp	r3, #128	; 0x80
 80057fe:	d0f2      	beq.n	80057e6 <SPI_EndRxTxTransaction+0x52>
 8005800:	e000      	b.n	8005804 <SPI_EndRxTxTransaction+0x70>
        break;
 8005802:	bf00      	nop
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000010 	.word	0x20000010
 8005814:	165e9f81 	.word	0x165e9f81

08005818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e01d      	b.n	8005866 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fc ff64 	bl	800270c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f000 fb42 	bl	8005ee0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b06      	cmp	r3, #6
 8005896:	d007      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e01d      	b.n	8005904 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d106      	bne.n	80058e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f815 	bl	800590c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f000 faf3 	bl	8005ee0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2201      	movs	r2, #1
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fd7a 	bl	800642c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a10      	ldr	r2, [pc, #64]	; (8005980 <HAL_TIM_PWM_Start+0x60>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d107      	bne.n	8005952 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005950:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b06      	cmp	r3, #6
 8005962:	d007      	beq.n	8005974 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000

08005984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b02      	cmp	r3, #2
 8005998:	d122      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d11b      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0202 	mvn.w	r2, #2
 80059b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fa6b 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 80059cc:	e005      	b.n	80059da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa5d 	bl	8005e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fa6e 	bl	8005eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d122      	bne.n	8005a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d11b      	bne.n	8005a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0204 	mvn.w	r2, #4
 8005a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa41 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa33 	bl	8005e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fa44 	bl	8005eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d122      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d11b      	bne.n	8005a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0208 	mvn.w	r2, #8
 8005a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2204      	movs	r2, #4
 8005a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa17 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa09 	bl	8005e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fa1a 	bl	8005eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b10      	cmp	r3, #16
 8005a94:	d122      	bne.n	8005adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b10      	cmp	r3, #16
 8005aa2:	d11b      	bne.n	8005adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0210 	mvn.w	r2, #16
 8005aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9ed 	bl	8005ea2 <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f9df 	bl	8005e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f9f0 	bl	8005eb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d10e      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d107      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0201 	mvn.w	r2, #1
 8005b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc fbae 	bl	8002264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b12:	2b80      	cmp	r3, #128	; 0x80
 8005b14:	d10e      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d107      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fd1a 	bl	8006568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d10e      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d107      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9b5 	bl	8005eca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d10e      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d107      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0220 	mvn.w	r2, #32
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fce4 	bl	8006554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e0b4      	b.n	8005d18 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	f200 809f 	bhi.w	8005d04 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005c01 	.word	0x08005c01
 8005bd0:	08005d05 	.word	0x08005d05
 8005bd4:	08005d05 	.word	0x08005d05
 8005bd8:	08005d05 	.word	0x08005d05
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005d05 	.word	0x08005d05
 8005be4:	08005d05 	.word	0x08005d05
 8005be8:	08005d05 	.word	0x08005d05
 8005bec:	08005c83 	.word	0x08005c83
 8005bf0:	08005d05 	.word	0x08005d05
 8005bf4:	08005d05 	.word	0x08005d05
 8005bf8:	08005d05 	.word	0x08005d05
 8005bfc:	08005cc3 	.word	0x08005cc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 f9ea 	bl	8005fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0208 	orr.w	r2, r2, #8
 8005c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0204 	bic.w	r2, r2, #4
 8005c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6999      	ldr	r1, [r3, #24]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	619a      	str	r2, [r3, #24]
      break;
 8005c3e:	e062      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fa30 	bl	80060ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6999      	ldr	r1, [r3, #24]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]
      break;
 8005c80:	e041      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fa7b 	bl	8006184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0208 	orr.w	r2, r2, #8
 8005c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0204 	bic.w	r2, r2, #4
 8005cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69d9      	ldr	r1, [r3, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	61da      	str	r2, [r3, #28]
      break;
 8005cc0:	e021      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fac5 	bl	8006258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69d9      	ldr	r1, [r3, #28]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	021a      	lsls	r2, r3, #8
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	61da      	str	r2, [r3, #28]
      break;
 8005d02:	e000      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005d04:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_ConfigClockSource+0x18>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e0a6      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x166>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d067      	beq.n	8005e40 <HAL_TIM_ConfigClockSource+0x120>
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	d80b      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x6c>
 8005d74:	2b10      	cmp	r3, #16
 8005d76:	d073      	beq.n	8005e60 <HAL_TIM_ConfigClockSource+0x140>
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d802      	bhi.n	8005d82 <HAL_TIM_ConfigClockSource+0x62>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d06f      	beq.n	8005e60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005d80:	e078      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d06c      	beq.n	8005e60 <HAL_TIM_ConfigClockSource+0x140>
 8005d86:	2b30      	cmp	r3, #48	; 0x30
 8005d88:	d06a      	beq.n	8005e60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005d8a:	e073      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d8c:	2b70      	cmp	r3, #112	; 0x70
 8005d8e:	d00d      	beq.n	8005dac <HAL_TIM_ConfigClockSource+0x8c>
 8005d90:	2b70      	cmp	r3, #112	; 0x70
 8005d92:	d804      	bhi.n	8005d9e <HAL_TIM_ConfigClockSource+0x7e>
 8005d94:	2b50      	cmp	r3, #80	; 0x50
 8005d96:	d033      	beq.n	8005e00 <HAL_TIM_ConfigClockSource+0xe0>
 8005d98:	2b60      	cmp	r3, #96	; 0x60
 8005d9a:	d041      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005d9c:	e06a      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da2:	d066      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x152>
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da8:	d017      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005daa:	e063      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	6899      	ldr	r1, [r3, #8]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f000 fb16 	bl	80063ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]
      break;
 8005dd8:	e04c      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6899      	ldr	r1, [r3, #8]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f000 faff 	bl	80063ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dfc:	609a      	str	r2, [r3, #8]
      break;
 8005dfe:	e039      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6859      	ldr	r1, [r3, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f000 fa73 	bl	80062f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2150      	movs	r1, #80	; 0x50
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 facc 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8005e1e:	e029      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	6859      	ldr	r1, [r3, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f000 fa92 	bl	8006356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2160      	movs	r1, #96	; 0x60
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fabc 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8005e3e:	e019      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	6859      	ldr	r1, [r3, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f000 fa53 	bl	80062f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2140      	movs	r1, #64	; 0x40
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 faac 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8005e5e:	e009      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f000 faa3 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8005e70:	e000      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a34      	ldr	r2, [pc, #208]	; (8005fc4 <TIM_Base_SetConfig+0xe4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00f      	beq.n	8005f18 <TIM_Base_SetConfig+0x38>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efe:	d00b      	beq.n	8005f18 <TIM_Base_SetConfig+0x38>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a31      	ldr	r2, [pc, #196]	; (8005fc8 <TIM_Base_SetConfig+0xe8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d007      	beq.n	8005f18 <TIM_Base_SetConfig+0x38>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a30      	ldr	r2, [pc, #192]	; (8005fcc <TIM_Base_SetConfig+0xec>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_Base_SetConfig+0x38>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a2f      	ldr	r2, [pc, #188]	; (8005fd0 <TIM_Base_SetConfig+0xf0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d108      	bne.n	8005f2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <TIM_Base_SetConfig+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d01b      	beq.n	8005f6a <TIM_Base_SetConfig+0x8a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f38:	d017      	beq.n	8005f6a <TIM_Base_SetConfig+0x8a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <TIM_Base_SetConfig+0xe8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <TIM_Base_SetConfig+0x8a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a21      	ldr	r2, [pc, #132]	; (8005fcc <TIM_Base_SetConfig+0xec>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00f      	beq.n	8005f6a <TIM_Base_SetConfig+0x8a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a20      	ldr	r2, [pc, #128]	; (8005fd0 <TIM_Base_SetConfig+0xf0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00b      	beq.n	8005f6a <TIM_Base_SetConfig+0x8a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a1f      	ldr	r2, [pc, #124]	; (8005fd4 <TIM_Base_SetConfig+0xf4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d007      	beq.n	8005f6a <TIM_Base_SetConfig+0x8a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a1e      	ldr	r2, [pc, #120]	; (8005fd8 <TIM_Base_SetConfig+0xf8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_Base_SetConfig+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1d      	ldr	r2, [pc, #116]	; (8005fdc <TIM_Base_SetConfig+0xfc>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d108      	bne.n	8005f7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a08      	ldr	r2, [pc, #32]	; (8005fc4 <TIM_Base_SetConfig+0xe4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d103      	bne.n	8005fb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	615a      	str	r2, [r3, #20]
}
 8005fb6:	bf00      	nop
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40010000 	.word	0x40010000
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40000800 	.word	0x40000800
 8005fd0:	40000c00 	.word	0x40000c00
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	40014400 	.word	0x40014400
 8005fdc:	40014800 	.word	0x40014800

08005fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f023 0201 	bic.w	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 0302 	bic.w	r3, r3, #2
 8006028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <TIM_OC1_SetConfig+0xc8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d10c      	bne.n	8006056 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0308 	bic.w	r3, r3, #8
 8006042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f023 0304 	bic.w	r3, r3, #4
 8006054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a13      	ldr	r2, [pc, #76]	; (80060a8 <TIM_OC1_SetConfig+0xc8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d111      	bne.n	8006082 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800606c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	621a      	str	r2, [r3, #32]
}
 800609c:	bf00      	nop
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40010000 	.word	0x40010000

080060ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f023 0210 	bic.w	r2, r3, #16
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0320 	bic.w	r3, r3, #32
 80060f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a1e      	ldr	r2, [pc, #120]	; (8006180 <TIM_OC2_SetConfig+0xd4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10d      	bne.n	8006128 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a15      	ldr	r2, [pc, #84]	; (8006180 <TIM_OC2_SetConfig+0xd4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d113      	bne.n	8006158 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800613e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40010000 	.word	0x40010000

08006184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0303 	bic.w	r3, r3, #3
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a1d      	ldr	r2, [pc, #116]	; (8006254 <TIM_OC3_SetConfig+0xd0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d10d      	bne.n	80061fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a14      	ldr	r2, [pc, #80]	; (8006254 <TIM_OC3_SetConfig+0xd0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d113      	bne.n	800622e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800620c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	621a      	str	r2, [r3, #32]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40010000 	.word	0x40010000

08006258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	031b      	lsls	r3, r3, #12
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a10      	ldr	r2, [pc, #64]	; (80062f4 <TIM_OC4_SetConfig+0x9c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d109      	bne.n	80062cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	019b      	lsls	r3, r3, #6
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000

080062f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f023 0201 	bic.w	r2, r3, #1
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f023 030a 	bic.w	r3, r3, #10
 8006334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006356:	b480      	push	{r7}
 8006358:	b087      	sub	sp, #28
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f023 0210 	bic.w	r2, r3, #16
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	031b      	lsls	r3, r3, #12
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006392:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f043 0307 	orr.w	r3, r3, #7
 80063d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	609a      	str	r2, [r3, #8]
}
 80063e0:	bf00      	nop
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	021a      	lsls	r2, r3, #8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	431a      	orrs	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	609a      	str	r2, [r3, #8]
}
 8006420:	bf00      	nop
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	2201      	movs	r2, #1
 8006440:	fa02 f303 	lsl.w	r3, r2, r3
 8006444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1a      	ldr	r2, [r3, #32]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	43db      	mvns	r3, r3
 800644e:	401a      	ands	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1a      	ldr	r2, [r3, #32]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	fa01 f303 	lsl.w	r3, r1, r3
 8006464:	431a      	orrs	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	621a      	str	r2, [r3, #32]
}
 800646a:	bf00      	nop
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
	...

08006478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800648c:	2302      	movs	r3, #2
 800648e:	e050      	b.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d018      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064dc:	d013      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a18      	ldr	r2, [pc, #96]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00e      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a16      	ldr	r2, [pc, #88]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d009      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a15      	ldr	r2, [pc, #84]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a13      	ldr	r2, [pc, #76]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d10c      	bne.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800650c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	4313      	orrs	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40014000 	.word	0x40014000

08006554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800657c:	b084      	sub	sp, #16
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	f107 001c 	add.w	r0, r7, #28
 800658a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2b01      	cmp	r3, #1
 8006592:	d122      	bne.n	80065da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d105      	bne.n	80065ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 fab4 	bl	8007b3c <USB_CoreReset>
 80065d4:	4603      	mov	r3, r0
 80065d6:	73fb      	strb	r3, [r7, #15]
 80065d8:	e01a      	b.n	8006610 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 faa8 	bl	8007b3c <USB_CoreReset>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d106      	bne.n	8006604 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
 8006602:	e005      	b.n	8006610 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	2b01      	cmp	r3, #1
 8006614:	d10b      	bne.n	800662e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f043 0206 	orr.w	r2, r3, #6
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f043 0220 	orr.w	r2, r3, #32
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800663a:	b004      	add	sp, #16
 800663c:	4770      	bx	lr
	...

08006640 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	4613      	mov	r3, r2
 800664c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d165      	bne.n	8006720 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4a41      	ldr	r2, [pc, #260]	; (800675c <USB_SetTurnaroundTime+0x11c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d906      	bls.n	800666a <USB_SetTurnaroundTime+0x2a>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4a40      	ldr	r2, [pc, #256]	; (8006760 <USB_SetTurnaroundTime+0x120>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d802      	bhi.n	800666a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006664:	230f      	movs	r3, #15
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	e062      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	4a3c      	ldr	r2, [pc, #240]	; (8006760 <USB_SetTurnaroundTime+0x120>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d906      	bls.n	8006680 <USB_SetTurnaroundTime+0x40>
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4a3b      	ldr	r2, [pc, #236]	; (8006764 <USB_SetTurnaroundTime+0x124>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d802      	bhi.n	8006680 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800667a:	230e      	movs	r3, #14
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	e057      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4a38      	ldr	r2, [pc, #224]	; (8006764 <USB_SetTurnaroundTime+0x124>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d906      	bls.n	8006696 <USB_SetTurnaroundTime+0x56>
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4a37      	ldr	r2, [pc, #220]	; (8006768 <USB_SetTurnaroundTime+0x128>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d802      	bhi.n	8006696 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006690:	230d      	movs	r3, #13
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	e04c      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	4a33      	ldr	r2, [pc, #204]	; (8006768 <USB_SetTurnaroundTime+0x128>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d906      	bls.n	80066ac <USB_SetTurnaroundTime+0x6c>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4a32      	ldr	r2, [pc, #200]	; (800676c <USB_SetTurnaroundTime+0x12c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d802      	bhi.n	80066ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066a6:	230c      	movs	r3, #12
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e041      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4a2f      	ldr	r2, [pc, #188]	; (800676c <USB_SetTurnaroundTime+0x12c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d906      	bls.n	80066c2 <USB_SetTurnaroundTime+0x82>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4a2e      	ldr	r2, [pc, #184]	; (8006770 <USB_SetTurnaroundTime+0x130>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d802      	bhi.n	80066c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066bc:	230b      	movs	r3, #11
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	e036      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4a2a      	ldr	r2, [pc, #168]	; (8006770 <USB_SetTurnaroundTime+0x130>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d906      	bls.n	80066d8 <USB_SetTurnaroundTime+0x98>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4a29      	ldr	r2, [pc, #164]	; (8006774 <USB_SetTurnaroundTime+0x134>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d802      	bhi.n	80066d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066d2:	230a      	movs	r3, #10
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	e02b      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4a26      	ldr	r2, [pc, #152]	; (8006774 <USB_SetTurnaroundTime+0x134>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d906      	bls.n	80066ee <USB_SetTurnaroundTime+0xae>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4a25      	ldr	r2, [pc, #148]	; (8006778 <USB_SetTurnaroundTime+0x138>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d802      	bhi.n	80066ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80066e8:	2309      	movs	r3, #9
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e020      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4a21      	ldr	r2, [pc, #132]	; (8006778 <USB_SetTurnaroundTime+0x138>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d906      	bls.n	8006704 <USB_SetTurnaroundTime+0xc4>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4a20      	ldr	r2, [pc, #128]	; (800677c <USB_SetTurnaroundTime+0x13c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d802      	bhi.n	8006704 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80066fe:	2308      	movs	r3, #8
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	e015      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4a1d      	ldr	r2, [pc, #116]	; (800677c <USB_SetTurnaroundTime+0x13c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d906      	bls.n	800671a <USB_SetTurnaroundTime+0xda>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <USB_SetTurnaroundTime+0x140>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d802      	bhi.n	800671a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006714:	2307      	movs	r3, #7
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e00a      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800671a:	2306      	movs	r3, #6
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	e007      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006726:	2309      	movs	r3, #9
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	e001      	b.n	8006730 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800672c:	2309      	movs	r3, #9
 800672e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	029b      	lsls	r3, r3, #10
 8006744:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006748:	431a      	orrs	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	00d8acbf 	.word	0x00d8acbf
 8006760:	00e4e1bf 	.word	0x00e4e1bf
 8006764:	00f423ff 	.word	0x00f423ff
 8006768:	0106737f 	.word	0x0106737f
 800676c:	011a499f 	.word	0x011a499f
 8006770:	01312cff 	.word	0x01312cff
 8006774:	014ca43f 	.word	0x014ca43f
 8006778:	016e35ff 	.word	0x016e35ff
 800677c:	01a6ab1f 	.word	0x01a6ab1f
 8006780:	01e847ff 	.word	0x01e847ff

08006784 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f043 0201 	orr.w	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f023 0201 	bic.w	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d106      	bne.n	80067f4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	e00b      	b.n	800680c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e001      	b.n	800680c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e003      	b.n	8006814 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800680c:	2032      	movs	r0, #50	; 0x32
 800680e:	f7fc f8cf 	bl	80029b0 <HAL_Delay>

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800681c:	b084      	sub	sp, #16
 800681e:	b580      	push	{r7, lr}
 8006820:	b086      	sub	sp, #24
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800682a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	e009      	b.n	8006850 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	3340      	adds	r3, #64	; 0x40
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	2200      	movs	r2, #0
 8006848:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3301      	adds	r3, #1
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b0e      	cmp	r3, #14
 8006854:	d9f2      	bls.n	800683c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d11c      	bne.n	8006896 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800686a:	f043 0302 	orr.w	r3, r3, #2
 800686e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	639a      	str	r2, [r3, #56]	; 0x38
 8006894:	e00b      	b.n	80068ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068b4:	461a      	mov	r2, r3
 80068b6:	2300      	movs	r3, #0
 80068b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c0:	4619      	mov	r1, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c8:	461a      	mov	r2, r3
 80068ca:	680b      	ldr	r3, [r1, #0]
 80068cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d10c      	bne.n	80068ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d104      	bne.n	80068e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068da:	2100      	movs	r1, #0
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f949 	bl	8006b74 <USB_SetDevSpeed>
 80068e2:	e008      	b.n	80068f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068e4:	2101      	movs	r1, #1
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f944 	bl	8006b74 <USB_SetDevSpeed>
 80068ec:	e003      	b.n	80068f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068ee:	2103      	movs	r1, #3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f93f 	bl	8006b74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068f6:	2110      	movs	r1, #16
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f8f3 	bl	8006ae4 <USB_FlushTxFifo>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f911 	bl	8006b30 <USB_FlushRxFifo>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691e:	461a      	mov	r2, r3
 8006920:	2300      	movs	r3, #0
 8006922:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	461a      	mov	r2, r3
 800692c:	2300      	movs	r3, #0
 800692e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006936:	461a      	mov	r2, r3
 8006938:	2300      	movs	r3, #0
 800693a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800693c:	2300      	movs	r3, #0
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	e043      	b.n	80069ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006958:	d118      	bne.n	800698c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696c:	461a      	mov	r2, r3
 800696e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	e013      	b.n	800699e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006982:	461a      	mov	r2, r3
 8006984:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	e008      	b.n	800699e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006998:	461a      	mov	r2, r3
 800699a:	2300      	movs	r3, #0
 800699c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069aa:	461a      	mov	r2, r3
 80069ac:	2300      	movs	r3, #0
 80069ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	461a      	mov	r2, r3
 80069be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	3301      	adds	r3, #1
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d3b7      	bcc.n	8006942 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069d2:	2300      	movs	r3, #0
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	e043      	b.n	8006a60 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ee:	d118      	bne.n	8006a22 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a02:	461a      	mov	r2, r3
 8006a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	e013      	b.n	8006a34 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	e008      	b.n	8006a34 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2e:	461a      	mov	r2, r3
 8006a30:	2300      	movs	r3, #0
 8006a32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a40:	461a      	mov	r2, r3
 8006a42:	2300      	movs	r3, #0
 8006a44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	461a      	mov	r2, r3
 8006a54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d3b7      	bcc.n	80069d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d105      	bne.n	8006a9c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f043 0210 	orr.w	r2, r3, #16
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699a      	ldr	r2, [r3, #24]
 8006aa0:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <USB_DevInit+0x2c4>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d005      	beq.n	8006aba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f043 0208 	orr.w	r2, r3, #8
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d107      	bne.n	8006ad0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac8:	f043 0304 	orr.w	r3, r3, #4
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006adc:	b004      	add	sp, #16
 8006ade:	4770      	bx	lr
 8006ae0:	803c3800 	.word	0x803c3800

08006ae4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	019b      	lsls	r3, r3, #6
 8006af6:	f043 0220 	orr.w	r2, r3, #32
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3301      	adds	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <USB_FlushTxFifo+0x48>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d901      	bls.n	8006b10 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e006      	b.n	8006b1e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d0f0      	beq.n	8006afe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	00030d40 	.word	0x00030d40

08006b30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2210      	movs	r2, #16
 8006b40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3301      	adds	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <USB_FlushRxFifo+0x40>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d901      	bls.n	8006b54 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e006      	b.n	8006b62 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d0f0      	beq.n	8006b42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	00030d40 	.word	0x00030d40

08006b74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b94:	4313      	orrs	r3, r2
 8006b96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 0306 	and.w	r3, r3, #6
 8006bbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]
 8006bca:	e00a      	b.n	8006be2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d002      	beq.n	8006bd8 <USB_GetDevSpeed+0x32>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b06      	cmp	r3, #6
 8006bd6:	d102      	bne.n	8006bde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	75fb      	strb	r3, [r7, #23]
 8006bdc:	e001      	b.n	8006be2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006bde:	230f      	movs	r3, #15
 8006be0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d13a      	bne.n	8006c82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c12:	69da      	ldr	r2, [r3, #28]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	68f9      	ldr	r1, [r7, #12]
 8006c26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d155      	bne.n	8006cf0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	78db      	ldrb	r3, [r3, #3]
 8006c5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	059b      	lsls	r3, r3, #22
 8006c66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	e036      	b.n	8006cf0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c88:	69da      	ldr	r2, [r3, #28]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	2101      	movs	r1, #1
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	041b      	lsls	r3, r3, #16
 8006c9a:	68f9      	ldr	r1, [r7, #12]
 8006c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d11a      	bne.n	8006cf0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	78db      	ldrb	r3, [r3, #3]
 8006cd4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d161      	bne.n	8006de0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d32:	d11f      	bne.n	8006d74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	2101      	movs	r1, #1
 8006d86:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	68f9      	ldr	r1, [r7, #12]
 8006d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d94:	4013      	ands	r3, r2
 8006d96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9e:	69da      	ldr	r2, [r3, #28]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	2101      	movs	r1, #1
 8006daa:	fa01 f303 	lsl.w	r3, r1, r3
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	43db      	mvns	r3, r3
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006db8:	4013      	ands	r3, r2
 8006dba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	0159      	lsls	r1, r3, #5
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	440b      	add	r3, r1
 8006dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4b35      	ldr	r3, [pc, #212]	; (8006eb0 <USB_DeactivateEndpoint+0x1b0>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	600b      	str	r3, [r1, #0]
 8006dde:	e060      	b.n	8006ea2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006df6:	d11f      	bne.n	8006e38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	2101      	movs	r1, #1
 8006e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	43db      	mvns	r3, r3
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e58:	4013      	ands	r3, r2
 8006e5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	f003 030f 	and.w	r3, r3, #15
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	43db      	mvns	r3, r3
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	0159      	lsls	r1, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	440b      	add	r3, r1
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <USB_DeactivateEndpoint+0x1b4>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	ec337800 	.word	0xec337800
 8006eb4:	eff37800 	.word	0xeff37800

08006eb8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	785b      	ldrb	r3, [r3, #1]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	f040 815c 	bne.w	8007192 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d132      	bne.n	8006f48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	0151      	lsls	r1, r2, #5
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	440a      	add	r2, r1
 8006ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	0151      	lsls	r1, r2, #5
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f40:	0cdb      	lsrs	r3, r3, #19
 8006f42:	04db      	lsls	r3, r3, #19
 8006f44:	6113      	str	r3, [r2, #16]
 8006f46:	e074      	b.n	8007032 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f62:	0cdb      	lsrs	r3, r3, #19
 8006f64:	04db      	lsls	r3, r3, #19
 8006f66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	0151      	lsls	r1, r2, #5
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	440a      	add	r2, r1
 8006f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	6959      	ldr	r1, [r3, #20]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	440b      	add	r3, r1
 8006fa4:	1e59      	subs	r1, r3, #1
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fae:	04d9      	lsls	r1, r3, #19
 8006fb0:	4b9d      	ldr	r3, [pc, #628]	; (8007228 <USB_EPStartXfer+0x370>)
 8006fb2:	400b      	ands	r3, r1
 8006fb4:	69b9      	ldr	r1, [r7, #24]
 8006fb6:	0148      	lsls	r0, r1, #5
 8006fb8:	69f9      	ldr	r1, [r7, #28]
 8006fba:	4401      	add	r1, r0
 8006fbc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fda:	69b9      	ldr	r1, [r7, #24]
 8006fdc:	0148      	lsls	r0, r1, #5
 8006fde:	69f9      	ldr	r1, [r7, #28]
 8006fe0:	4401      	add	r1, r0
 8006fe2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	78db      	ldrb	r3, [r3, #3]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d11f      	bne.n	8007032 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007010:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	440a      	add	r2, r1
 8007028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007030:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d14b      	bne.n	80070d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d009      	beq.n	8007054 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704c:	461a      	mov	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	78db      	ldrb	r3, [r3, #3]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d128      	bne.n	80070ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007068:	2b00      	cmp	r3, #0
 800706a:	d110      	bne.n	800708e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	440a      	add	r2, r1
 8007082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007086:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	e00f      	b.n	80070ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e12f      	b.n	8007330 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	78db      	ldrb	r3, [r3, #3]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d015      	beq.n	8007124 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8117 	beq.w	8007330 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	2101      	movs	r1, #1
 8007114:	fa01 f303 	lsl.w	r3, r1, r3
 8007118:	69f9      	ldr	r1, [r7, #28]
 800711a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800711e:	4313      	orrs	r3, r2
 8007120:	634b      	str	r3, [r1, #52]	; 0x34
 8007122:	e105      	b.n	8007330 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007130:	2b00      	cmp	r3, #0
 8007132:	d110      	bne.n	8007156 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	440a      	add	r2, r1
 800714a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800714e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	e00f      	b.n	8007176 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	0151      	lsls	r1, r2, #5
 8007168:	69fa      	ldr	r2, [r7, #28]
 800716a:	440a      	add	r2, r1
 800716c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007174:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	68d9      	ldr	r1, [r3, #12]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	781a      	ldrb	r2, [r3, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	b298      	uxth	r0, r3
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4603      	mov	r3, r0
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fa2b 	bl	80075e6 <USB_WritePacket>
 8007190:	e0ce      	b.n	8007330 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	0151      	lsls	r1, r2, #5
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	440a      	add	r2, r1
 80071a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ac:	0cdb      	lsrs	r3, r3, #19
 80071ae:	04db      	lsls	r3, r3, #19
 80071b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d126      	bne.n	800722c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071f4:	69b9      	ldr	r1, [r7, #24]
 80071f6:	0148      	lsls	r0, r1, #5
 80071f8:	69f9      	ldr	r1, [r7, #28]
 80071fa:	4401      	add	r1, r0
 80071fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007200:	4313      	orrs	r3, r2
 8007202:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800721e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007222:	6113      	str	r3, [r2, #16]
 8007224:	e036      	b.n	8007294 <USB_EPStartXfer+0x3dc>
 8007226:	bf00      	nop
 8007228:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	695a      	ldr	r2, [r3, #20]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	4413      	add	r3, r2
 8007236:	1e5a      	subs	r2, r3, #1
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007240:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724e:	691a      	ldr	r2, [r3, #16]
 8007250:	8afb      	ldrh	r3, [r7, #22]
 8007252:	04d9      	lsls	r1, r3, #19
 8007254:	4b39      	ldr	r3, [pc, #228]	; (800733c <USB_EPStartXfer+0x484>)
 8007256:	400b      	ands	r3, r1
 8007258:	69b9      	ldr	r1, [r7, #24]
 800725a:	0148      	lsls	r0, r1, #5
 800725c:	69f9      	ldr	r1, [r7, #28]
 800725e:	4401      	add	r1, r0
 8007260:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007264:	4313      	orrs	r3, r2
 8007266:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	691a      	ldr	r2, [r3, #16]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	8af9      	ldrh	r1, [r7, #22]
 800727c:	fb01 f303 	mul.w	r3, r1, r3
 8007280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	69f9      	ldr	r1, [r7, #28]
 800728a:	4401      	add	r1, r0
 800728c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007290:	4313      	orrs	r3, r2
 8007292:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10d      	bne.n	80072b6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	68d9      	ldr	r1, [r3, #12]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	460a      	mov	r2, r1
 80072b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	78db      	ldrb	r3, [r3, #3]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d128      	bne.n	8007310 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d110      	bne.n	80072f0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	e00f      	b.n	8007310 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800730e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	0151      	lsls	r1, r2, #5
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	440a      	add	r2, r1
 8007326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800732e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	1ff80000 	.word	0x1ff80000

08007340 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 80cd 	bne.w	80074fc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d132      	bne.n	80073d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800738c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c8:	0cdb      	lsrs	r3, r3, #19
 80073ca:	04db      	lsls	r3, r3, #19
 80073cc:	6113      	str	r3, [r2, #16]
 80073ce:	e04e      	b.n	800746e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ea:	0cdb      	lsrs	r3, r3, #19
 80073ec:	04db      	lsls	r3, r3, #19
 80073ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800740e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007412:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	695a      	ldr	r2, [r3, #20]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	429a      	cmp	r2, r3
 800741e:	d903      	bls.n	8007428 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	691a      	ldr	r2, [r3, #16]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745e:	6939      	ldr	r1, [r7, #16]
 8007460:	0148      	lsls	r0, r1, #5
 8007462:	6979      	ldr	r1, [r7, #20]
 8007464:	4401      	add	r1, r0
 8007466:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800746a:	4313      	orrs	r3, r2
 800746c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d11e      	bne.n	80074b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007488:	461a      	mov	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	e092      	b.n	80075d8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d07e      	beq.n	80075d8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	2101      	movs	r1, #1
 80074ec:	fa01 f303 	lsl.w	r3, r1, r3
 80074f0:	6979      	ldr	r1, [r7, #20]
 80074f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074f6:	4313      	orrs	r3, r2
 80074f8:	634b      	str	r3, [r1, #52]	; 0x34
 80074fa:	e06d      	b.n	80075d8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	0151      	lsls	r1, r2, #5
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	440a      	add	r2, r1
 8007512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007516:	0cdb      	lsrs	r3, r3, #19
 8007518:	04db      	lsls	r3, r3, #19
 800751a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	440a      	add	r2, r1
 8007532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007536:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800753a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800753e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	440a      	add	r2, r1
 8007566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800756a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800756e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	691a      	ldr	r2, [r3, #16]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007586:	6939      	ldr	r1, [r7, #16]
 8007588:	0148      	lsls	r0, r1, #5
 800758a:	6979      	ldr	r1, [r7, #20]
 800758c:	4401      	add	r1, r0
 800758e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007592:	4313      	orrs	r3, r2
 8007594:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d10d      	bne.n	80075b8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d009      	beq.n	80075b8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	68d9      	ldr	r1, [r3, #12]
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b4:	460a      	mov	r2, r1
 80075b6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	0151      	lsls	r1, r2, #5
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	440a      	add	r2, r1
 80075ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b089      	sub	sp, #36	; 0x24
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	4611      	mov	r1, r2
 80075f2:	461a      	mov	r2, r3
 80075f4:	460b      	mov	r3, r1
 80075f6:	71fb      	strb	r3, [r7, #7]
 80075f8:	4613      	mov	r3, r2
 80075fa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007608:	2b00      	cmp	r3, #0
 800760a:	d11a      	bne.n	8007642 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800760c:	88bb      	ldrh	r3, [r7, #4]
 800760e:	3303      	adds	r3, #3
 8007610:	089b      	lsrs	r3, r3, #2
 8007612:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007614:	2300      	movs	r3, #0
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e00f      	b.n	800763a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	031a      	lsls	r2, r3, #12
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	4413      	add	r3, r2
 8007622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007626:	461a      	mov	r2, r3
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	3304      	adds	r3, #4
 8007632:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	3301      	adds	r3, #1
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	429a      	cmp	r2, r3
 8007640:	d3eb      	bcc.n	800761a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3724      	adds	r7, #36	; 0x24
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007650:	b480      	push	{r7}
 8007652:	b089      	sub	sp, #36	; 0x24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	4613      	mov	r3, r2
 800765c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	3303      	adds	r3, #3
 800766a:	089b      	lsrs	r3, r3, #2
 800766c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800766e:	2300      	movs	r3, #0
 8007670:	61bb      	str	r3, [r7, #24]
 8007672:	e00b      	b.n	800768c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	3304      	adds	r3, #4
 8007684:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	3301      	adds	r3, #1
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	429a      	cmp	r2, r3
 8007692:	d3ef      	bcc.n	8007674 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007694:	69fb      	ldr	r3, [r7, #28]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3724      	adds	r7, #36	; 0x24
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	785b      	ldrb	r3, [r3, #1]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d12c      	bne.n	8007718 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	db12      	blt.n	80076f6 <USB_EPSetStall+0x54>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00f      	beq.n	80076f6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	0151      	lsls	r1, r2, #5
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	440a      	add	r2, r1
 80076ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076f4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	e02b      	b.n	8007770 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	db12      	blt.n	8007750 <USB_EPSetStall+0xae>
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00f      	beq.n	8007750 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800774e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	440a      	add	r2, r1
 8007766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800776a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800776e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800777e:	b480      	push	{r7}
 8007780:	b085      	sub	sp, #20
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	785b      	ldrb	r3, [r3, #1]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d128      	bne.n	80077ec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	78db      	ldrb	r3, [r3, #3]
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d003      	beq.n	80077ca <USB_EPClearStall+0x4c>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	78db      	ldrb	r3, [r3, #3]
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d138      	bne.n	800783c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	0151      	lsls	r1, r2, #5
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	440a      	add	r2, r1
 80077e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	e027      	b.n	800783c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007806:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800780a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	78db      	ldrb	r3, [r3, #3]
 8007810:	2b03      	cmp	r3, #3
 8007812:	d003      	beq.n	800781c <USB_EPClearStall+0x9e>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	78db      	ldrb	r3, [r3, #3]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d10f      	bne.n	800783c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007868:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800786c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800787e:	68f9      	ldr	r1, [r7, #12]
 8007880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007884:	4313      	orrs	r3, r2
 8007886:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b0:	f023 0302 	bic.w	r3, r3, #2
 80078b4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80078b6:	2003      	movs	r0, #3
 80078b8:	f7fb f87a 	bl	80029b0 <HAL_Delay>

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e0:	f043 0302 	orr.w	r3, r3, #2
 80078e4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80078e6:	2003      	movs	r0, #3
 80078e8:	f7fb f862 	bl	80029b0 <HAL_Delay>

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4013      	ands	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800790e:	68fb      	ldr	r3, [r7, #12]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	4013      	ands	r3, r2
 800793e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	0c1b      	lsrs	r3, r3, #16
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	4013      	ands	r3, r2
 8007972:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	b29b      	uxth	r3, r3
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	4013      	ands	r3, r2
 80079b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079b2:	68bb      	ldr	r3, [r7, #8]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	fa22 f303 	lsr.w	r3, r2, r3
 80079f0:	01db      	lsls	r3, r3, #7
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	f003 0301 	and.w	r3, r3, #1
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a56:	f023 0307 	bic.w	r3, r3, #7
 8007a5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
	...

08007a80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	333c      	adds	r3, #60	; 0x3c
 8007a96:	3304      	adds	r3, #4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <USB_EP0_OutStart+0xb8>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d90a      	bls.n	8007aba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ab4:	d101      	bne.n	8007aba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e037      	b.n	8007b2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae8:	f043 0318 	orr.w	r3, r3, #24
 8007aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007afc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007b00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b02:	7afb      	ldrb	r3, [r7, #11]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d10f      	bne.n	8007b28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007b26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	4f54300a 	.word	0x4f54300a

08007b3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <USB_CoreReset+0x64>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d901      	bls.n	8007b5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e01b      	b.n	8007b92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	daf2      	bge.n	8007b48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f043 0201 	orr.w	r2, r3, #1
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3301      	adds	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <USB_CoreReset+0x64>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d901      	bls.n	8007b84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e006      	b.n	8007b92 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d0f0      	beq.n	8007b72 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	00030d40 	.word	0x00030d40

08007ba4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007ba8:	4904      	ldr	r1, [pc, #16]	; (8007bbc <MX_FATFS_Init+0x18>)
 8007baa:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <MX_FATFS_Init+0x1c>)
 8007bac:	f004 fb7e 	bl	800c2ac <FATFS_LinkDriver>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	4b03      	ldr	r3, [pc, #12]	; (8007bc4 <MX_FATFS_Init+0x20>)
 8007bb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007bb8:	bf00      	nop
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	2001bf80 	.word	0x2001bf80
 8007bc0:	2000001c 	.word	0x2000001c
 8007bc4:	2001bf84 	.word	0x2001bf84

08007bc8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007bcc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7f9 f8b7 	bl	8000d58 <SD_disk_initialize>
 8007bea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7f9 f98f 	bl	8000f24 <SD_disk_status>
 8007c06:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	607a      	str	r2, [r7, #4]
 8007c1a:	603b      	str	r3, [r7, #0]
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007c20:	7bf8      	ldrb	r0, [r7, #15]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	f7f9 f992 	bl	8000f50 <SD_disk_read>
 8007c2c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007c46:	7bf8      	ldrb	r0, [r7, #15]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	f7f9 f9e9 	bl	8001024 <SD_disk_write>
 8007c52:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	603a      	str	r2, [r7, #0]
 8007c66:	71fb      	strb	r3, [r7, #7]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007c6c:	79b9      	ldrb	r1, [r7, #6]
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7f9 fa5a 	bl	800112c <SD_disk_ioctl>
 8007c78:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c8e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c92:	f005 f901 	bl	800ce98 <malloc>
 8007c96:	4603      	mov	r3, r0
 8007c98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d105      	bne.n	8007cac <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e066      	b.n	8007d7a <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	7c1b      	ldrb	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d119      	bne.n	8007cf0 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	2181      	movs	r1, #129	; 0x81
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f004 ff6e 	bl	800cba6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f004 ff64 	bl	800cba6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2210      	movs	r2, #16
 8007cea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007cee:	e016      	b.n	8007d1e <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cf0:	2340      	movs	r3, #64	; 0x40
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	2181      	movs	r1, #129	; 0x81
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f004 ff55 	bl	800cba6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d02:	2340      	movs	r3, #64	; 0x40
 8007d04:	2202      	movs	r2, #2
 8007d06:	2101      	movs	r1, #1
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f004 ff4c 	bl	800cba6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2210      	movs	r2, #16
 8007d1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d1e:	2308      	movs	r3, #8
 8007d20:	2203      	movs	r2, #3
 8007d22:	2182      	movs	r1, #130	; 0x82
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f004 ff3e 	bl	800cba6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	7c1b      	ldrb	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d109      	bne.n	8007d68 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d5e:	2101      	movs	r1, #1
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f005 f80f 	bl	800cd84 <USBD_LL_PrepareReceive>
 8007d66:	e007      	b.n	8007d78 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d6e:	2340      	movs	r3, #64	; 0x40
 8007d70:	2101      	movs	r1, #1
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f005 f806 	bl	800cd84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d92:	2181      	movs	r1, #129	; 0x81
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f004 ff2c 	bl	800cbf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007da0:	2101      	movs	r1, #1
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f004 ff25 	bl	800cbf2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007db0:	2182      	movs	r1, #130	; 0x82
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f004 ff1d 	bl	800cbf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00e      	beq.n	8007df0 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007de2:	4618      	mov	r0, r3
 8007de4:	f005 f860 	bl	800cea8 <free>
    pdev->pClassData = NULL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e0c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d03a      	beq.n	8007e9c <USBD_CDC_Setup+0xa0>
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	f040 8097 	bne.w	8007f5a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	88db      	ldrh	r3, [r3, #6]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d029      	beq.n	8007e88 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b25b      	sxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	da11      	bge.n	8007e62 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007e4a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	88d2      	ldrh	r2, [r2, #6]
 8007e50:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007e52:	6939      	ldr	r1, [r7, #16]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	88db      	ldrh	r3, [r3, #6]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fa9d 	bl	800939a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007e60:	e082      	b.n	8007f68 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	785a      	ldrb	r2, [r3, #1]
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	88db      	ldrh	r3, [r3, #6]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007e78:	6939      	ldr	r1, [r7, #16]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	88db      	ldrh	r3, [r3, #6]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fab6 	bl	80093f2 <USBD_CtlPrepareRx>
    break;
 8007e86:	e06f      	b.n	8007f68 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	7850      	ldrb	r0, [r2, #1]
 8007e94:	2200      	movs	r2, #0
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	4798      	blx	r3
    break;
 8007e9a:	e065      	b.n	8007f68 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b0b      	cmp	r3, #11
 8007ea2:	d84f      	bhi.n	8007f44 <USBD_CDC_Setup+0x148>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <USBD_CDC_Setup+0xb0>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007edd 	.word	0x08007edd
 8007eb0:	08007f53 	.word	0x08007f53
 8007eb4:	08007f45 	.word	0x08007f45
 8007eb8:	08007f45 	.word	0x08007f45
 8007ebc:	08007f45 	.word	0x08007f45
 8007ec0:	08007f45 	.word	0x08007f45
 8007ec4:	08007f45 	.word	0x08007f45
 8007ec8:	08007f45 	.word	0x08007f45
 8007ecc:	08007f45 	.word	0x08007f45
 8007ed0:	08007f45 	.word	0x08007f45
 8007ed4:	08007f05 	.word	0x08007f05
 8007ed8:	08007f2d 	.word	0x08007f2d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d107      	bne.n	8007ef6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	2202      	movs	r2, #2
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fa53 	bl	800939a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007ef4:	e030      	b.n	8007f58 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 f9dd 	bl	80092b8 <USBD_CtlError>
        ret = USBD_FAIL;
 8007efe:	2303      	movs	r3, #3
 8007f00:	75fb      	strb	r3, [r7, #23]
      break;
 8007f02:	e029      	b.n	8007f58 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d107      	bne.n	8007f1e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f0e:	f107 030f 	add.w	r3, r7, #15
 8007f12:	2201      	movs	r2, #1
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 fa3f 	bl	800939a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007f1c:	e01c      	b.n	8007f58 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 f9c9 	bl	80092b8 <USBD_CtlError>
        ret = USBD_FAIL;
 8007f26:	2303      	movs	r3, #3
 8007f28:	75fb      	strb	r3, [r7, #23]
      break;
 8007f2a:	e015      	b.n	8007f58 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d00f      	beq.n	8007f56 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 f9bd 	bl	80092b8 <USBD_CtlError>
        ret = USBD_FAIL;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007f42:	e008      	b.n	8007f56 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 f9b6 	bl	80092b8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f50:	e002      	b.n	8007f58 <USBD_CDC_Setup+0x15c>
      break;
 8007f52:	bf00      	nop
 8007f54:	e008      	b.n	8007f68 <USBD_CDC_Setup+0x16c>
      break;
 8007f56:	bf00      	nop
    }
    break;
 8007f58:	e006      	b.n	8007f68 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 f9ab 	bl	80092b8 <USBD_CtlError>
    ret = USBD_FAIL;
 8007f62:	2303      	movs	r3, #3
 8007f64:	75fb      	strb	r3, [r7, #23]
    break;
 8007f66:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop

08007f74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e049      	b.n	800802a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	440b      	add	r3, r1
 8007fac:	3318      	adds	r3, #24
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d029      	beq.n	8008008 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007fb4:	78fa      	ldrb	r2, [r7, #3]
 8007fb6:	6879      	ldr	r1, [r7, #4]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	440b      	add	r3, r1
 8007fc2:	3318      	adds	r3, #24
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	78f9      	ldrb	r1, [r7, #3]
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	1a5b      	subs	r3, r3, r1
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4403      	add	r3, r0
 8007fd4:	3344      	adds	r3, #68	; 0x44
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fdc:	fb03 f301 	mul.w	r3, r3, r1
 8007fe0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d110      	bne.n	8008008 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	3318      	adds	r3, #24
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ffa:	78f9      	ldrb	r1, [r7, #3]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	2200      	movs	r2, #0
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f004 fe9e 	bl	800cd42 <USBD_LL_Transmit>
 8008006:	e00f      	b.n	8008028 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2200      	movs	r2, #0
 800800c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008044:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008050:	2303      	movs	r3, #3
 8008052:	e015      	b.n	8008080 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f004 feb4 	bl	800cdc6 <USBD_LL_GetRxDataSize>
 800805e:	4602      	mov	r2, r0
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800807a:	4611      	mov	r1, r2
 800807c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008096:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d015      	beq.n	80080ce <USBD_CDC_EP0_RxReady+0x46>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80080a8:	2bff      	cmp	r3, #255	; 0xff
 80080aa:	d010      	beq.n	80080ce <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80080ba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080c2:	b292      	uxth	r2, r2
 80080c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	22ff      	movs	r2, #255	; 0xff
 80080ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2243      	movs	r2, #67	; 0x43
 80080e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80080e6:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	200000b8 	.word	0x200000b8

080080f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2243      	movs	r2, #67	; 0x43
 8008104:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008106:	4b03      	ldr	r3, [pc, #12]	; (8008114 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	20000074 	.word	0x20000074

08008118 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2243      	movs	r2, #67	; 0x43
 8008124:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008126:	4b03      	ldr	r3, [pc, #12]	; (8008134 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	200000fc 	.word	0x200000fc

08008138 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	220a      	movs	r2, #10
 8008144:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008146:	4b03      	ldr	r3, [pc, #12]	; (8008154 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	20000030 	.word	0x20000030

08008158 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008168:	2303      	movs	r3, #3
 800816a:	e004      	b.n	8008176 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008182:	b480      	push	{r7}
 8008184:	b087      	sub	sp, #28
 8008186:	af00      	add	r7, sp, #0
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008194:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081c4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e01a      	b.n	8008234 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008204:	2b00      	cmp	r3, #0
 8008206:	d114      	bne.n	8008232 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2201      	movs	r2, #1
 800820c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008226:	2181      	movs	r1, #129	; 0x81
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f004 fd8a 	bl	800cd42 <USBD_LL_Transmit>

    ret = USBD_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008232:	7bfb      	ldrb	r3, [r7, #15]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800824a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008256:	2303      	movs	r3, #3
 8008258:	e016      	b.n	8008288 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7c1b      	ldrb	r3, [r3, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800826c:	2101      	movs	r1, #1
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f004 fd88 	bl	800cd84 <USBD_LL_PrepareReceive>
 8008274:	e007      	b.n	8008286 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	2101      	movs	r1, #1
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f004 fd7f 	bl	800cd84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	4613      	mov	r3, r2
 800829c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e025      	b.n	80082f4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	79fa      	ldrb	r2, [r7, #7]
 80082e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f004 fbf5 	bl	800cad8 <USBD_LL_Init>
 80082ee:	4603      	mov	r3, r0
 80082f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	e010      	b.n	8008336 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008324:	f107 020e 	add.w	r2, r7, #14
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	4602      	mov	r2, r0
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f004 fc12 	bl	800cb70 <USBD_LL_Start>
 800834c:	4603      	mov	r3, r0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008378:	2303      	movs	r3, #3
 800837a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	78fa      	ldrb	r2, [r7, #3]
 8008390:	4611      	mov	r1, r2
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
 8008396:	4603      	mov	r3, r0
 8008398:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	78fa      	ldrb	r2, [r7, #3]
 80083c4:	4611      	mov	r1, r2
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
  }

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 ff2c 	bl	8009244 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80083fa:	461a      	mov	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008408:	f003 031f 	and.w	r3, r3, #31
 800840c:	2b01      	cmp	r3, #1
 800840e:	d00e      	beq.n	800842e <USBD_LL_SetupStage+0x5a>
 8008410:	2b01      	cmp	r3, #1
 8008412:	d302      	bcc.n	800841a <USBD_LL_SetupStage+0x46>
 8008414:	2b02      	cmp	r3, #2
 8008416:	d014      	beq.n	8008442 <USBD_LL_SetupStage+0x6e>
 8008418:	e01d      	b.n	8008456 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa18 	bl	8008858 <USBD_StdDevReq>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
      break;
 800842c:	e020      	b.n	8008470 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa7c 	bl	8008934 <USBD_StdItfReq>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
      break;
 8008440:	e016      	b.n	8008470 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fab8 	bl	80089c0 <USBD_StdEPReq>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]
      break;
 8008454:	e00c      	b.n	8008470 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800845c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008460:	b2db      	uxtb	r3, r3
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f004 fbe3 	bl	800cc30 <USBD_LL_StallEP>
 800846a:	4603      	mov	r3, r0
 800846c:	73fb      	strb	r3, [r7, #15]
      break;
 800846e:	bf00      	nop
  }

  return ret;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b086      	sub	sp, #24
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	460b      	mov	r3, r1
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008488:	7afb      	ldrb	r3, [r7, #11]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d137      	bne.n	80084fe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008494:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800849c:	2b03      	cmp	r3, #3
 800849e:	d14a      	bne.n	8008536 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d913      	bls.n	80084d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	1ad2      	subs	r2, r2, r3
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	4293      	cmp	r3, r2
 80084c4:	bf28      	it	cs
 80084c6:	4613      	movcs	r3, r2
 80084c8:	461a      	mov	r2, r3
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 ffad 	bl	800942c <USBD_CtlContinueRx>
 80084d2:	e030      	b.n	8008536 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00a      	beq.n	80084f6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d105      	bne.n	80084f6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 ffa9 	bl	800944e <USBD_CtlSendStatus>
 80084fc:	e01b      	b.n	8008536 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d013      	beq.n	8008532 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008510:	2b03      	cmp	r3, #3
 8008512:	d10e      	bne.n	8008532 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	7afa      	ldrb	r2, [r7, #11]
 800851e:	4611      	mov	r1, r2
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	4798      	blx	r3
 8008524:	4603      	mov	r3, r0
 8008526:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	e002      	b.n	8008538 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008532:	2303      	movs	r3, #3
 8008534:	e000      	b.n	8008538 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	460b      	mov	r3, r1
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800854e:	7afb      	ldrb	r3, [r7, #11]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d16a      	bne.n	800862a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3314      	adds	r3, #20
 8008558:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008560:	2b02      	cmp	r3, #2
 8008562:	d155      	bne.n	8008610 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	429a      	cmp	r2, r3
 800856e:	d914      	bls.n	800859a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	1ad2      	subs	r2, r2, r3
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	461a      	mov	r2, r3
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 ff22 	bl	80093d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800858c:	2300      	movs	r3, #0
 800858e:	2200      	movs	r2, #0
 8008590:	2100      	movs	r1, #0
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f004 fbf6 	bl	800cd84 <USBD_LL_PrepareReceive>
 8008598:	e03a      	b.n	8008610 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d11c      	bne.n	80085e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d316      	bcc.n	80085e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085bc:	429a      	cmp	r2, r3
 80085be:	d20f      	bcs.n	80085e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085c0:	2200      	movs	r2, #0
 80085c2:	2100      	movs	r1, #0
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 ff03 	bl	80093d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085d2:	2300      	movs	r3, #0
 80085d4:	2200      	movs	r2, #0
 80085d6:	2100      	movs	r1, #0
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f004 fbd3 	bl	800cd84 <USBD_LL_PrepareReceive>
 80085de:	e017      	b.n	8008610 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00a      	beq.n	8008602 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d105      	bne.n	8008602 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008602:	2180      	movs	r1, #128	; 0x80
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f004 fb13 	bl	800cc30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 ff32 	bl	8009474 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008616:	2b01      	cmp	r3, #1
 8008618:	d123      	bne.n	8008662 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f7ff fe9b 	bl	8008356 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008628:	e01b      	b.n	8008662 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d013      	beq.n	800865e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800863c:	2b03      	cmp	r3, #3
 800863e:	d10e      	bne.n	800865e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	7afa      	ldrb	r2, [r7, #11]
 800864a:	4611      	mov	r1, r2
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	4798      	blx	r3
 8008650:	4603      	mov	r3, r0
 8008652:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	e002      	b.n	8008664 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800865e:	2303      	movs	r3, #3
 8008660:	e000      	b.n	8008664 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008698:	2b00      	cmp	r3, #0
 800869a:	d009      	beq.n	80086b0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	6852      	ldr	r2, [r2, #4]
 80086a8:	b2d2      	uxtb	r2, r2
 80086aa:	4611      	mov	r1, r2
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086b0:	2340      	movs	r3, #64	; 0x40
 80086b2:	2200      	movs	r2, #0
 80086b4:	2100      	movs	r1, #0
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f004 fa75 	bl	800cba6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2240      	movs	r2, #64	; 0x40
 80086c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086cc:	2340      	movs	r3, #64	; 0x40
 80086ce:	2200      	movs	r2, #0
 80086d0:	2180      	movs	r1, #128	; 0x80
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f004 fa67 	bl	800cba6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2240      	movs	r2, #64	; 0x40
 80086e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	460b      	mov	r3, r1
 80086f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2204      	movs	r2, #4
 8008726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008746:	2b04      	cmp	r3, #4
 8008748:	d105      	bne.n	8008756 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008772:	2b03      	cmp	r3, #3
 8008774:	d10b      	bne.n	800878e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d009      	beq.n	8008810 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6852      	ldr	r2, [r2, #4]
 8008808:	b2d2      	uxtb	r2, r2
 800880a:	4611      	mov	r1, r2
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
  }

  return USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800881a:	b480      	push	{r7}
 800881c:	b087      	sub	sp, #28
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	3301      	adds	r3, #1
 8008830:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008838:	8a3b      	ldrh	r3, [r7, #16]
 800883a:	021b      	lsls	r3, r3, #8
 800883c:	b21a      	sxth	r2, r3
 800883e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008842:	4313      	orrs	r3, r2
 8008844:	b21b      	sxth	r3, r3
 8008846:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008848:	89fb      	ldrh	r3, [r7, #14]
}
 800884a:	4618      	mov	r0, r3
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
	...

08008858 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800886e:	2b20      	cmp	r3, #32
 8008870:	d004      	beq.n	800887c <USBD_StdDevReq+0x24>
 8008872:	2b40      	cmp	r3, #64	; 0x40
 8008874:	d002      	beq.n	800887c <USBD_StdDevReq+0x24>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <USBD_StdDevReq+0x38>
 800887a:	e050      	b.n	800891e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]
    break;
 800888e:	e04b      	b.n	8008928 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	785b      	ldrb	r3, [r3, #1]
 8008894:	2b09      	cmp	r3, #9
 8008896:	d83c      	bhi.n	8008912 <USBD_StdDevReq+0xba>
 8008898:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <USBD_StdDevReq+0x48>)
 800889a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889e:	bf00      	nop
 80088a0:	080088f5 	.word	0x080088f5
 80088a4:	08008909 	.word	0x08008909
 80088a8:	08008913 	.word	0x08008913
 80088ac:	080088ff 	.word	0x080088ff
 80088b0:	08008913 	.word	0x08008913
 80088b4:	080088d3 	.word	0x080088d3
 80088b8:	080088c9 	.word	0x080088c9
 80088bc:	08008913 	.word	0x08008913
 80088c0:	080088eb 	.word	0x080088eb
 80088c4:	080088dd 	.word	0x080088dd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f9ce 	bl	8008c6c <USBD_GetDescriptor>
      break;
 80088d0:	e024      	b.n	800891c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fb33 	bl	8008f40 <USBD_SetAddress>
      break;
 80088da:	e01f      	b.n	800891c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fb70 	bl	8008fc4 <USBD_SetConfig>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]
      break;
 80088e8:	e018      	b.n	800891c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fc0d 	bl	800910c <USBD_GetConfig>
      break;
 80088f2:	e013      	b.n	800891c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fc3c 	bl	8009174 <USBD_GetStatus>
      break;
 80088fc:	e00e      	b.n	800891c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fc6a 	bl	80091da <USBD_SetFeature>
      break;
 8008906:	e009      	b.n	800891c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fc79 	bl	8009202 <USBD_ClrFeature>
      break;
 8008910:	e004      	b.n	800891c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fccf 	bl	80092b8 <USBD_CtlError>
      break;
 800891a:	bf00      	nop
    }
    break;
 800891c:	e004      	b.n	8008928 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fcc9 	bl	80092b8 <USBD_CtlError>
    break;
 8008926:	bf00      	nop
  }

  return ret;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop

08008934 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800894a:	2b20      	cmp	r3, #32
 800894c:	d003      	beq.n	8008956 <USBD_StdItfReq+0x22>
 800894e:	2b40      	cmp	r3, #64	; 0x40
 8008950:	d001      	beq.n	8008956 <USBD_StdItfReq+0x22>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d12a      	bne.n	80089ac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895c:	3b01      	subs	r3, #1
 800895e:	2b02      	cmp	r3, #2
 8008960:	d81d      	bhi.n	800899e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	889b      	ldrh	r3, [r3, #4]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b01      	cmp	r3, #1
 800896a:	d813      	bhi.n	8008994 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	4798      	blx	r3
 800897a:	4603      	mov	r3, r0
 800897c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	88db      	ldrh	r3, [r3, #6]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d110      	bne.n	80089a8 <USBD_StdItfReq+0x74>
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10d      	bne.n	80089a8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fd5e 	bl	800944e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008992:	e009      	b.n	80089a8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fc8e 	bl	80092b8 <USBD_CtlError>
      break;
 800899c:	e004      	b.n	80089a8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fc89 	bl	80092b8 <USBD_CtlError>
      break;
 80089a6:	e000      	b.n	80089aa <USBD_StdItfReq+0x76>
      break;
 80089a8:	bf00      	nop
    }
    break;
 80089aa:	e004      	b.n	80089b6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fc82 	bl	80092b8 <USBD_CtlError>
    break;
 80089b4:	bf00      	nop
  }

  return ret;
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	889b      	ldrh	r3, [r3, #4]
 80089d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089dc:	2b20      	cmp	r3, #32
 80089de:	d004      	beq.n	80089ea <USBD_StdEPReq+0x2a>
 80089e0:	2b40      	cmp	r3, #64	; 0x40
 80089e2:	d002      	beq.n	80089ea <USBD_StdEPReq+0x2a>
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00a      	beq.n	80089fe <USBD_StdEPReq+0x3e>
 80089e8:	e135      	b.n	8008c56 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	4798      	blx	r3
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]
    break;
 80089fc:	e130      	b.n	8008c60 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	785b      	ldrb	r3, [r3, #1]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d03e      	beq.n	8008a84 <USBD_StdEPReq+0xc4>
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d002      	beq.n	8008a10 <USBD_StdEPReq+0x50>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d077      	beq.n	8008afe <USBD_StdEPReq+0x13e>
 8008a0e:	e11c      	b.n	8008c4a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d002      	beq.n	8008a20 <USBD_StdEPReq+0x60>
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d015      	beq.n	8008a4a <USBD_StdEPReq+0x8a>
 8008a1e:	e02b      	b.n	8008a78 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00c      	beq.n	8008a40 <USBD_StdEPReq+0x80>
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	2b80      	cmp	r3, #128	; 0x80
 8008a2a:	d009      	beq.n	8008a40 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f004 f8fd 	bl	800cc30 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a36:	2180      	movs	r1, #128	; 0x80
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f004 f8f9 	bl	800cc30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a3e:	e020      	b.n	8008a82 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fc38 	bl	80092b8 <USBD_CtlError>
        break;
 8008a48:	e01b      	b.n	8008a82 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	885b      	ldrh	r3, [r3, #2]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10e      	bne.n	8008a70 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_StdEPReq+0xb0>
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	2b80      	cmp	r3, #128	; 0x80
 8008a5c:	d008      	beq.n	8008a70 <USBD_StdEPReq+0xb0>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	88db      	ldrh	r3, [r3, #6]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d104      	bne.n	8008a70 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f004 f8e0 	bl	800cc30 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fcec 	bl	800944e <USBD_CtlSendStatus>

        break;
 8008a76:	e004      	b.n	8008a82 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fc1c 	bl	80092b8 <USBD_CtlError>
        break;
 8008a80:	bf00      	nop
      }
      break;
 8008a82:	e0e7      	b.n	8008c54 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d002      	beq.n	8008a94 <USBD_StdEPReq+0xd4>
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d015      	beq.n	8008abe <USBD_StdEPReq+0xfe>
 8008a92:	e02d      	b.n	8008af0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00c      	beq.n	8008ab4 <USBD_StdEPReq+0xf4>
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
 8008a9c:	2b80      	cmp	r3, #128	; 0x80
 8008a9e:	d009      	beq.n	8008ab4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f004 f8c3 	bl	800cc30 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aaa:	2180      	movs	r1, #128	; 0x80
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f004 f8bf 	bl	800cc30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008ab2:	e023      	b.n	8008afc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fbfe 	bl	80092b8 <USBD_CtlError>
        break;
 8008abc:	e01e      	b.n	8008afc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	885b      	ldrh	r3, [r3, #2]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d119      	bne.n	8008afa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f004 f8ca 	bl	800cc6e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fcb7 	bl	800944e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	4798      	blx	r3
        }
        break;
 8008aee:	e004      	b.n	8008afa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fbe0 	bl	80092b8 <USBD_CtlError>
        break;
 8008af8:	e000      	b.n	8008afc <USBD_StdEPReq+0x13c>
        break;
 8008afa:	bf00      	nop
      }
      break;
 8008afc:	e0aa      	b.n	8008c54 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d002      	beq.n	8008b0e <USBD_StdEPReq+0x14e>
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d032      	beq.n	8008b72 <USBD_StdEPReq+0x1b2>
 8008b0c:	e097      	b.n	8008c3e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <USBD_StdEPReq+0x164>
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	2b80      	cmp	r3, #128	; 0x80
 8008b18:	d004      	beq.n	8008b24 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fbcb 	bl	80092b8 <USBD_CtlError>
          break;
 8008b22:	e091      	b.n	8008c48 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	da0b      	bge.n	8008b44 <USBD_StdEPReq+0x184>
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	3310      	adds	r3, #16
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	4413      	add	r3, r2
 8008b40:	3304      	adds	r3, #4
 8008b42:	e00b      	b.n	8008b5c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	4413      	add	r3, r2
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2202      	movs	r2, #2
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fc15 	bl	800939a <USBD_CtlSendData>
        break;
 8008b70:	e06a      	b.n	8008c48 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	da11      	bge.n	8008b9e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	f003 020f 	and.w	r2, r3, #15
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	4613      	mov	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	3324      	adds	r3, #36	; 0x24
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d117      	bne.n	8008bc4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fb8e 	bl	80092b8 <USBD_CtlError>
            break;
 8008b9c:	e054      	b.n	8008c48 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ba0:	f003 020f 	and.w	r2, r3, #15
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	440b      	add	r3, r1
 8008bb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d104      	bne.n	8008bc4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fb7b 	bl	80092b8 <USBD_CtlError>
            break;
 8008bc2:	e041      	b.n	8008c48 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	da0b      	bge.n	8008be4 <USBD_StdEPReq+0x224>
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	3310      	adds	r3, #16
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	4413      	add	r3, r2
 8008be0:	3304      	adds	r3, #4
 8008be2:	e00b      	b.n	8008bfc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bea:	4613      	mov	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <USBD_StdEPReq+0x24a>
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	2b80      	cmp	r3, #128	; 0x80
 8008c08:	d103      	bne.n	8008c12 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	e00e      	b.n	8008c30 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f004 f848 	bl	800ccac <USBD_LL_IsStallEP>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2201      	movs	r2, #1
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	e002      	b.n	8008c30 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2202      	movs	r2, #2
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fbaf 	bl	800939a <USBD_CtlSendData>
          break;
 8008c3c:	e004      	b.n	8008c48 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fb39 	bl	80092b8 <USBD_CtlError>
        break;
 8008c46:	bf00      	nop
      }
      break;
 8008c48:	e004      	b.n	8008c54 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fb33 	bl	80092b8 <USBD_CtlError>
      break;
 8008c52:	bf00      	nop
    }
    break;
 8008c54:	e004      	b.n	8008c60 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fb2d 	bl	80092b8 <USBD_CtlError>
    break;
 8008c5e:	bf00      	nop
  }

  return ret;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	885b      	ldrh	r3, [r3, #2]
 8008c86:	0a1b      	lsrs	r3, r3, #8
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	2b06      	cmp	r3, #6
 8008c8e:	f200 8128 	bhi.w	8008ee2 <USBD_GetDescriptor+0x276>
 8008c92:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <USBD_GetDescriptor+0x2c>)
 8008c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c98:	08008cb5 	.word	0x08008cb5
 8008c9c:	08008ccd 	.word	0x08008ccd
 8008ca0:	08008d0d 	.word	0x08008d0d
 8008ca4:	08008ee3 	.word	0x08008ee3
 8008ca8:	08008ee3 	.word	0x08008ee3
 8008cac:	08008e83 	.word	0x08008e83
 8008cb0:	08008eaf 	.word	0x08008eaf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	7c12      	ldrb	r2, [r2, #16]
 8008cc0:	f107 0108 	add.w	r1, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
    break;
 8008cca:	e112      	b.n	8008ef2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	7c1b      	ldrb	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10d      	bne.n	8008cf0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	f107 0208 	add.w	r2, r7, #8
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
 8008ce4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	2202      	movs	r2, #2
 8008cec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008cee:	e100      	b.n	8008ef2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	f107 0208 	add.w	r2, r7, #8
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4798      	blx	r3
 8008d00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3301      	adds	r3, #1
 8008d06:	2202      	movs	r2, #2
 8008d08:	701a      	strb	r2, [r3, #0]
    break;
 8008d0a:	e0f2      	b.n	8008ef2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	885b      	ldrh	r3, [r3, #2]
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b05      	cmp	r3, #5
 8008d14:	f200 80ac 	bhi.w	8008e70 <USBD_GetDescriptor+0x204>
 8008d18:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <USBD_GetDescriptor+0xb4>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008d39 	.word	0x08008d39
 8008d24:	08008d6d 	.word	0x08008d6d
 8008d28:	08008da1 	.word	0x08008da1
 8008d2c:	08008dd5 	.word	0x08008dd5
 8008d30:	08008e09 	.word	0x08008e09
 8008d34:	08008e3d 	.word	0x08008e3d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	7c12      	ldrb	r2, [r2, #16]
 8008d50:	f107 0108 	add.w	r1, r7, #8
 8008d54:	4610      	mov	r0, r2
 8008d56:	4798      	blx	r3
 8008d58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d5a:	e091      	b.n	8008e80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 faaa 	bl	80092b8 <USBD_CtlError>
        err++;
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	3301      	adds	r3, #1
 8008d68:	72fb      	strb	r3, [r7, #11]
      break;
 8008d6a:	e089      	b.n	8008e80 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	7c12      	ldrb	r2, [r2, #16]
 8008d84:	f107 0108 	add.w	r1, r7, #8
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4798      	blx	r3
 8008d8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d8e:	e077      	b.n	8008e80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa90 	bl	80092b8 <USBD_CtlError>
        err++;
 8008d98:	7afb      	ldrb	r3, [r7, #11]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	72fb      	strb	r3, [r7, #11]
      break;
 8008d9e:	e06f      	b.n	8008e80 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00b      	beq.n	8008dc4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	7c12      	ldrb	r2, [r2, #16]
 8008db8:	f107 0108 	add.w	r1, r7, #8
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4798      	blx	r3
 8008dc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dc2:	e05d      	b.n	8008e80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fa76 	bl	80092b8 <USBD_CtlError>
        err++;
 8008dcc:	7afb      	ldrb	r3, [r7, #11]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	72fb      	strb	r3, [r7, #11]
      break;
 8008dd2:	e055      	b.n	8008e80 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00b      	beq.n	8008df8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	7c12      	ldrb	r2, [r2, #16]
 8008dec:	f107 0108 	add.w	r1, r7, #8
 8008df0:	4610      	mov	r0, r2
 8008df2:	4798      	blx	r3
 8008df4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008df6:	e043      	b.n	8008e80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa5c 	bl	80092b8 <USBD_CtlError>
        err++;
 8008e00:	7afb      	ldrb	r3, [r7, #11]
 8008e02:	3301      	adds	r3, #1
 8008e04:	72fb      	strb	r3, [r7, #11]
      break;
 8008e06:	e03b      	b.n	8008e80 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00b      	beq.n	8008e2c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	7c12      	ldrb	r2, [r2, #16]
 8008e20:	f107 0108 	add.w	r1, r7, #8
 8008e24:	4610      	mov	r0, r2
 8008e26:	4798      	blx	r3
 8008e28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e2a:	e029      	b.n	8008e80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fa42 	bl	80092b8 <USBD_CtlError>
        err++;
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	3301      	adds	r3, #1
 8008e38:	72fb      	strb	r3, [r7, #11]
      break;
 8008e3a:	e021      	b.n	8008e80 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	7c12      	ldrb	r2, [r2, #16]
 8008e54:	f107 0108 	add.w	r1, r7, #8
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4798      	blx	r3
 8008e5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e5e:	e00f      	b.n	8008e80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa28 	bl	80092b8 <USBD_CtlError>
        err++;
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	72fb      	strb	r3, [r7, #11]
      break;
 8008e6e:	e007      	b.n	8008e80 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fa20 	bl	80092b8 <USBD_CtlError>
      err++;
 8008e78:	7afb      	ldrb	r3, [r7, #11]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008e7e:	bf00      	nop
    }
    break;
 8008e80:	e037      	b.n	8008ef2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	7c1b      	ldrb	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d109      	bne.n	8008e9e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e92:	f107 0208 	add.w	r2, r7, #8
 8008e96:	4610      	mov	r0, r2
 8008e98:	4798      	blx	r3
 8008e9a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e9c:	e029      	b.n	8008ef2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fa09 	bl	80092b8 <USBD_CtlError>
      err++;
 8008ea6:	7afb      	ldrb	r3, [r7, #11]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	72fb      	strb	r3, [r7, #11]
    break;
 8008eac:	e021      	b.n	8008ef2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	7c1b      	ldrb	r3, [r3, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10d      	bne.n	8008ed2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	f107 0208 	add.w	r2, r7, #8
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	4798      	blx	r3
 8008ec6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	2207      	movs	r2, #7
 8008ece:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ed0:	e00f      	b.n	8008ef2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f9ef 	bl	80092b8 <USBD_CtlError>
      err++;
 8008eda:	7afb      	ldrb	r3, [r7, #11]
 8008edc:	3301      	adds	r3, #1
 8008ede:	72fb      	strb	r3, [r7, #11]
    break;
 8008ee0:	e007      	b.n	8008ef2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f9e7 	bl	80092b8 <USBD_CtlError>
    err++;
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	3301      	adds	r3, #1
 8008eee:	72fb      	strb	r3, [r7, #11]
    break;
 8008ef0:	bf00      	nop
  }

  if (err != 0U)
 8008ef2:	7afb      	ldrb	r3, [r7, #11]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d11e      	bne.n	8008f36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	88db      	ldrh	r3, [r3, #6]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d016      	beq.n	8008f2e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008f00:	893b      	ldrh	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00e      	beq.n	8008f24 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	88da      	ldrh	r2, [r3, #6]
 8008f0a:	893b      	ldrh	r3, [r7, #8]
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	bf28      	it	cs
 8008f10:	4613      	movcs	r3, r2
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f16:	893b      	ldrh	r3, [r7, #8]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	68f9      	ldr	r1, [r7, #12]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fa3c 	bl	800939a <USBD_CtlSendData>
 8008f22:	e009      	b.n	8008f38 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f9c6 	bl	80092b8 <USBD_CtlError>
 8008f2c:	e004      	b.n	8008f38 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fa8d 	bl	800944e <USBD_CtlSendStatus>
 8008f34:	e000      	b.n	8008f38 <USBD_GetDescriptor+0x2cc>
    return;
 8008f36:	bf00      	nop
    }
  }
}
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop

08008f40 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	889b      	ldrh	r3, [r3, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d130      	bne.n	8008fb4 <USBD_SetAddress+0x74>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	88db      	ldrh	r3, [r3, #6]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d12c      	bne.n	8008fb4 <USBD_SetAddress+0x74>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	885b      	ldrh	r3, [r3, #2]
 8008f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8008f60:	d828      	bhi.n	8008fb4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	885b      	ldrh	r3, [r3, #2]
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d104      	bne.n	8008f82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f99c 	bl	80092b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f80:	e01c      	b.n	8008fbc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	7bfa      	ldrb	r2, [r7, #15]
 8008f86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f003 feb8 	bl	800cd04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fa5a 	bl	800944e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d004      	beq.n	8008faa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa8:	e008      	b.n	8008fbc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb2:	e003      	b.n	8008fbc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f97e 	bl	80092b8 <USBD_CtlError>
  }
}
 8008fbc:	bf00      	nop
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	885b      	ldrh	r3, [r3, #2]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	4b4b      	ldr	r3, [pc, #300]	; (8009108 <USBD_SetConfig+0x144>)
 8008fda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fdc:	4b4a      	ldr	r3, [pc, #296]	; (8009108 <USBD_SetConfig+0x144>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d905      	bls.n	8008ff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f966 	bl	80092b8 <USBD_CtlError>
    return USBD_FAIL;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e087      	b.n	8009100 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d002      	beq.n	8009000 <USBD_SetConfig+0x3c>
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d025      	beq.n	800904a <USBD_SetConfig+0x86>
 8008ffe:	e071      	b.n	80090e4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009000:	4b41      	ldr	r3, [pc, #260]	; (8009108 <USBD_SetConfig+0x144>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01c      	beq.n	8009042 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009008:	4b3f      	ldr	r3, [pc, #252]	; (8009108 <USBD_SetConfig+0x144>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009012:	4b3d      	ldr	r3, [pc, #244]	; (8009108 <USBD_SetConfig+0x144>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff f9a7 	bl	800836c <USBD_SetClassConfig>
 800901e:	4603      	mov	r3, r0
 8009020:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d004      	beq.n	8009032 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f944 	bl	80092b8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009030:	e065      	b.n	80090fe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa0b 	bl	800944e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2203      	movs	r2, #3
 800903c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009040:	e05d      	b.n	80090fe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fa03 	bl	800944e <USBD_CtlSendStatus>
    break;
 8009048:	e059      	b.n	80090fe <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800904a:	4b2f      	ldr	r3, [pc, #188]	; (8009108 <USBD_SetConfig+0x144>)
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d112      	bne.n	8009078 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2202      	movs	r2, #2
 8009056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800905a:	4b2b      	ldr	r3, [pc, #172]	; (8009108 <USBD_SetConfig+0x144>)
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009064:	4b28      	ldr	r3, [pc, #160]	; (8009108 <USBD_SetConfig+0x144>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff f99a 	bl	80083a4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f9ec 	bl	800944e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009076:	e042      	b.n	80090fe <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009078:	4b23      	ldr	r3, [pc, #140]	; (8009108 <USBD_SetConfig+0x144>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	429a      	cmp	r2, r3
 8009084:	d02a      	beq.n	80090dc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff f988 	bl	80083a4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009094:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <USBD_SetConfig+0x144>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	461a      	mov	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800909e:	4b1a      	ldr	r3, [pc, #104]	; (8009108 <USBD_SetConfig+0x144>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff f961 	bl	800836c <USBD_SetClassConfig>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00f      	beq.n	80090d4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f8fe 	bl	80092b8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff f96d 	bl	80083a4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2202      	movs	r2, #2
 80090ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80090d2:	e014      	b.n	80090fe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f9ba 	bl	800944e <USBD_CtlSendStatus>
    break;
 80090da:	e010      	b.n	80090fe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f9b6 	bl	800944e <USBD_CtlSendStatus>
    break;
 80090e2:	e00c      	b.n	80090fe <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80090e4:	6839      	ldr	r1, [r7, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f8e6 	bl	80092b8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090ec:	4b06      	ldr	r3, [pc, #24]	; (8009108 <USBD_SetConfig+0x144>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7ff f956 	bl	80083a4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80090f8:	2303      	movs	r3, #3
 80090fa:	73fb      	strb	r3, [r7, #15]
    break;
 80090fc:	bf00      	nop
  }

  return ret;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20000444 	.word	0x20000444

0800910c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	88db      	ldrh	r3, [r3, #6]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d004      	beq.n	8009128 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f8c9 	bl	80092b8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009126:	e021      	b.n	800916c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800912e:	2b01      	cmp	r3, #1
 8009130:	db17      	blt.n	8009162 <USBD_GetConfig+0x56>
 8009132:	2b02      	cmp	r3, #2
 8009134:	dd02      	ble.n	800913c <USBD_GetConfig+0x30>
 8009136:	2b03      	cmp	r3, #3
 8009138:	d00b      	beq.n	8009152 <USBD_GetConfig+0x46>
 800913a:	e012      	b.n	8009162 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3308      	adds	r3, #8
 8009146:	2201      	movs	r2, #1
 8009148:	4619      	mov	r1, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f925 	bl	800939a <USBD_CtlSendData>
      break;
 8009150:	e00c      	b.n	800916c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3304      	adds	r3, #4
 8009156:	2201      	movs	r2, #1
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f91d 	bl	800939a <USBD_CtlSendData>
      break;
 8009160:	e004      	b.n	800916c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f8a7 	bl	80092b8 <USBD_CtlError>
      break;
 800916a:	bf00      	nop
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009184:	3b01      	subs	r3, #1
 8009186:	2b02      	cmp	r3, #2
 8009188:	d81e      	bhi.n	80091c8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	88db      	ldrh	r3, [r3, #6]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d004      	beq.n	800919c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f88f 	bl	80092b8 <USBD_CtlError>
      break;
 800919a:	e01a      	b.n	80091d2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d005      	beq.n	80091b8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	f043 0202 	orr.w	r2, r3, #2
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	330c      	adds	r3, #12
 80091bc:	2202      	movs	r2, #2
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f8ea 	bl	800939a <USBD_CtlSendData>
    break;
 80091c6:	e004      	b.n	80091d2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f874 	bl	80092b8 <USBD_CtlError>
    break;
 80091d0:	bf00      	nop
  }
}
 80091d2:	bf00      	nop
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	885b      	ldrh	r3, [r3, #2]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d106      	bne.n	80091fa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f92a 	bl	800944e <USBD_CtlSendStatus>
  }
}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009212:	3b01      	subs	r3, #1
 8009214:	2b02      	cmp	r3, #2
 8009216:	d80b      	bhi.n	8009230 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	885b      	ldrh	r3, [r3, #2]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d10c      	bne.n	800923a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f910 	bl	800944e <USBD_CtlSendStatus>
      }
      break;
 800922e:	e004      	b.n	800923a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f840 	bl	80092b8 <USBD_CtlError>
      break;
 8009238:	e000      	b.n	800923c <USBD_ClrFeature+0x3a>
      break;
 800923a:	bf00      	nop
  }
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	781a      	ldrb	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	3301      	adds	r3, #1
 800925e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	781a      	ldrb	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3301      	adds	r3, #1
 800926c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f7ff fad3 	bl	800881a <SWAPBYTE>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3301      	adds	r3, #1
 8009286:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f7ff fac6 	bl	800881a <SWAPBYTE>
 800928e:	4603      	mov	r3, r0
 8009290:	461a      	mov	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3301      	adds	r3, #1
 800929a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3301      	adds	r3, #1
 80092a0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff fab9 	bl	800881a <SWAPBYTE>
 80092a8:	4603      	mov	r3, r0
 80092aa:	461a      	mov	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	80da      	strh	r2, [r3, #6]
}
 80092b0:	bf00      	nop
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092c2:	2180      	movs	r1, #128	; 0x80
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f003 fcb3 	bl	800cc30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092ca:	2100      	movs	r1, #0
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f003 fcaf 	bl	800cc30 <USBD_LL_StallEP>
}
 80092d2:	bf00      	nop
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b086      	sub	sp, #24
 80092de:	af00      	add	r7, sp, #0
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	60b9      	str	r1, [r7, #8]
 80092e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d036      	beq.n	800935e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80092f4:	6938      	ldr	r0, [r7, #16]
 80092f6:	f000 f836 	bl	8009366 <USBD_GetLen>
 80092fa:	4603      	mov	r3, r0
 80092fc:	3301      	adds	r3, #1
 80092fe:	b29b      	uxth	r3, r3
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	b29a      	uxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009308:	7dfb      	ldrb	r3, [r7, #23]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	4413      	add	r3, r2
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	7812      	ldrb	r2, [r2, #0]
 8009312:	701a      	strb	r2, [r3, #0]
  idx++;
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	3301      	adds	r3, #1
 8009318:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	4413      	add	r3, r2
 8009320:	2203      	movs	r2, #3
 8009322:	701a      	strb	r2, [r3, #0]
  idx++;
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	3301      	adds	r3, #1
 8009328:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800932a:	e013      	b.n	8009354 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	4413      	add	r3, r2
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	7812      	ldrb	r2, [r2, #0]
 8009336:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	3301      	adds	r3, #1
 800933c:	613b      	str	r3, [r7, #16]
    idx++;
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	3301      	adds	r3, #1
 8009342:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009344:	7dfb      	ldrb	r3, [r7, #23]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	4413      	add	r3, r2
 800934a:	2200      	movs	r2, #0
 800934c:	701a      	strb	r2, [r3, #0]
    idx++;
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	3301      	adds	r3, #1
 8009352:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1e7      	bne.n	800932c <USBD_GetString+0x52>
 800935c:	e000      	b.n	8009360 <USBD_GetString+0x86>
    return;
 800935e:	bf00      	nop
  }
}
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009366:	b480      	push	{r7}
 8009368:	b085      	sub	sp, #20
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009376:	e005      	b.n	8009384 <USBD_GetLen+0x1e>
  {
    len++;
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	3301      	adds	r3, #1
 800937c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	3301      	adds	r3, #1
 8009382:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1f5      	bne.n	8009378 <USBD_GetLen+0x12>
  }

  return len;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2202      	movs	r2, #2
 80093aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	2100      	movs	r1, #0
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f003 fcbe 	bl	800cd42 <USBD_LL_Transmit>

  return USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	2100      	movs	r1, #0
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f003 fcad 	bl	800cd42 <USBD_LL_Transmit>

  return USBD_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2203      	movs	r2, #3
 8009402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	2100      	movs	r1, #0
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f003 fcb1 	bl	800cd84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	2100      	movs	r1, #0
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f003 fca0 	bl	800cd84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2204      	movs	r2, #4
 800945a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800945e:	2300      	movs	r3, #0
 8009460:	2200      	movs	r2, #0
 8009462:	2100      	movs	r1, #0
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f003 fc6c 	bl	800cd42 <USBD_LL_Transmit>

  return USBD_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2205      	movs	r2, #5
 8009480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009484:	2300      	movs	r3, #0
 8009486:	2200      	movs	r2, #0
 8009488:	2100      	movs	r1, #0
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f003 fc7a 	bl	800cd84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	4a08      	ldr	r2, [pc, #32]	; (80094cc <disk_status+0x30>)
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4413      	add	r3, r2
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	79fa      	ldrb	r2, [r7, #7]
 80094b4:	4905      	ldr	r1, [pc, #20]	; (80094cc <disk_status+0x30>)
 80094b6:	440a      	add	r2, r1
 80094b8:	7a12      	ldrb	r2, [r2, #8]
 80094ba:	4610      	mov	r0, r2
 80094bc:	4798      	blx	r3
 80094be:	4603      	mov	r3, r0
 80094c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20000670 	.word	0x20000670

080094d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80094de:	79fb      	ldrb	r3, [r7, #7]
 80094e0:	4a0d      	ldr	r2, [pc, #52]	; (8009518 <disk_initialize+0x48>)
 80094e2:	5cd3      	ldrb	r3, [r2, r3]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d111      	bne.n	800950c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	4a0b      	ldr	r2, [pc, #44]	; (8009518 <disk_initialize+0x48>)
 80094ec:	2101      	movs	r1, #1
 80094ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	4a09      	ldr	r2, [pc, #36]	; (8009518 <disk_initialize+0x48>)
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	79fa      	ldrb	r2, [r7, #7]
 80094fe:	4906      	ldr	r1, [pc, #24]	; (8009518 <disk_initialize+0x48>)
 8009500:	440a      	add	r2, r1
 8009502:	7a12      	ldrb	r2, [r2, #8]
 8009504:	4610      	mov	r0, r2
 8009506:	4798      	blx	r3
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800950c:	7bfb      	ldrb	r3, [r7, #15]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20000670 	.word	0x20000670

0800951c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800951c:	b590      	push	{r4, r7, lr}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60b9      	str	r1, [r7, #8]
 8009524:	607a      	str	r2, [r7, #4]
 8009526:	603b      	str	r3, [r7, #0]
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	4a0a      	ldr	r2, [pc, #40]	; (8009558 <disk_read+0x3c>)
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	689c      	ldr	r4, [r3, #8]
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	4a07      	ldr	r2, [pc, #28]	; (8009558 <disk_read+0x3c>)
 800953c:	4413      	add	r3, r2
 800953e:	7a18      	ldrb	r0, [r3, #8]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	68b9      	ldr	r1, [r7, #8]
 8009546:	47a0      	blx	r4
 8009548:	4603      	mov	r3, r0
 800954a:	75fb      	strb	r3, [r7, #23]
  return res;
 800954c:	7dfb      	ldrb	r3, [r7, #23]
}
 800954e:	4618      	mov	r0, r3
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	bd90      	pop	{r4, r7, pc}
 8009556:	bf00      	nop
 8009558:	20000670 	.word	0x20000670

0800955c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800955c:	b590      	push	{r4, r7, lr}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	607a      	str	r2, [r7, #4]
 8009566:	603b      	str	r3, [r7, #0]
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	4a0a      	ldr	r2, [pc, #40]	; (8009598 <disk_write+0x3c>)
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	68dc      	ldr	r4, [r3, #12]
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	4a07      	ldr	r2, [pc, #28]	; (8009598 <disk_write+0x3c>)
 800957c:	4413      	add	r3, r2
 800957e:	7a18      	ldrb	r0, [r3, #8]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	68b9      	ldr	r1, [r7, #8]
 8009586:	47a0      	blx	r4
 8009588:	4603      	mov	r3, r0
 800958a:	75fb      	strb	r3, [r7, #23]
  return res;
 800958c:	7dfb      	ldrb	r3, [r7, #23]
}
 800958e:	4618      	mov	r0, r3
 8009590:	371c      	adds	r7, #28
 8009592:	46bd      	mov	sp, r7
 8009594:	bd90      	pop	{r4, r7, pc}
 8009596:	bf00      	nop
 8009598:	20000670 	.word	0x20000670

0800959c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	603a      	str	r2, [r7, #0]
 80095a6:	71fb      	strb	r3, [r7, #7]
 80095a8:	460b      	mov	r3, r1
 80095aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <disk_ioctl+0x38>)
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	79fa      	ldrb	r2, [r7, #7]
 80095ba:	4906      	ldr	r1, [pc, #24]	; (80095d4 <disk_ioctl+0x38>)
 80095bc:	440a      	add	r2, r1
 80095be:	7a10      	ldrb	r0, [r2, #8]
 80095c0:	79b9      	ldrb	r1, [r7, #6]
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	4798      	blx	r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	20000670 	.word	0x20000670

080095d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3301      	adds	r3, #1
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80095e8:	89fb      	ldrh	r3, [r7, #14]
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	b21a      	sxth	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	b21b      	sxth	r3, r3
 80095f4:	4313      	orrs	r3, r2
 80095f6:	b21b      	sxth	r3, r3
 80095f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80095fa:	89fb      	ldrh	r3, [r7, #14]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3303      	adds	r3, #3
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	021b      	lsls	r3, r3, #8
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	3202      	adds	r2, #2
 8009620:	7812      	ldrb	r2, [r2, #0]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	3201      	adds	r2, #1
 800962e:	7812      	ldrb	r2, [r2, #0]
 8009630:	4313      	orrs	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	021b      	lsls	r3, r3, #8
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7812      	ldrb	r2, [r2, #0]
 800963c:	4313      	orrs	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009640:	68fb      	ldr	r3, [r7, #12]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800964e:	b480      	push	{r7}
 8009650:	b083      	sub	sp, #12
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	887a      	ldrh	r2, [r7, #2]
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	701a      	strb	r2, [r3, #0]
 8009666:	887b      	ldrh	r3, [r7, #2]
 8009668:	0a1b      	lsrs	r3, r3, #8
 800966a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	607a      	str	r2, [r7, #4]
 8009672:	887a      	ldrh	r2, [r7, #2]
 8009674:	b2d2      	uxtb	r2, r2
 8009676:	701a      	strb	r2, [r3, #0]
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	b2d2      	uxtb	r2, r2
 8009698:	701a      	strb	r2, [r3, #0]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	0a1b      	lsrs	r3, r3, #8
 800969e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	1c5a      	adds	r2, r3, #1
 80096a4:	607a      	str	r2, [r7, #4]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	b2d2      	uxtb	r2, r2
 80096aa:	701a      	strb	r2, [r3, #0]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	0a1b      	lsrs	r3, r3, #8
 80096b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	0a1b      	lsrs	r3, r3, #8
 80096c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	1c5a      	adds	r2, r3, #1
 80096c8:	607a      	str	r2, [r7, #4]
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	b2d2      	uxtb	r2, r2
 80096ce:	701a      	strb	r2, [r3, #0]
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00d      	beq.n	8009712 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	1c53      	adds	r3, r2, #1
 80096fa:	613b      	str	r3, [r7, #16]
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	1c59      	adds	r1, r3, #1
 8009700:	6179      	str	r1, [r7, #20]
 8009702:	7812      	ldrb	r2, [r2, #0]
 8009704:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3b01      	subs	r3, #1
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f1      	bne.n	80096f6 <mem_cpy+0x1a>
	}
}
 8009712:	bf00      	nop
 8009714:	371c      	adds	r7, #28
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800971e:	b480      	push	{r7}
 8009720:	b087      	sub	sp, #28
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	60b9      	str	r1, [r7, #8]
 8009728:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	617a      	str	r2, [r7, #20]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	b2d2      	uxtb	r2, r2
 8009738:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3b01      	subs	r3, #1
 800973e:	607b      	str	r3, [r7, #4]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1f3      	bne.n	800972e <mem_set+0x10>
}
 8009746:	bf00      	nop
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009752:	b480      	push	{r7}
 8009754:	b089      	sub	sp, #36	; 0x24
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	61fb      	str	r3, [r7, #28]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	61fa      	str	r2, [r7, #28]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	4619      	mov	r1, r3
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	61ba      	str	r2, [r7, #24]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	1acb      	subs	r3, r1, r3
 800977e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3b01      	subs	r3, #1
 8009784:	607b      	str	r3, [r7, #4]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <mem_cmp+0x40>
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0eb      	beq.n	800976a <mem_cmp+0x18>

	return r;
 8009792:	697b      	ldr	r3, [r7, #20]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3724      	adds	r7, #36	; 0x24
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80097aa:	e002      	b.n	80097b2 <chk_chr+0x12>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3301      	adds	r3, #1
 80097b0:	607b      	str	r3, [r7, #4]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d005      	beq.n	80097c6 <chk_chr+0x26>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d1f2      	bne.n	80097ac <chk_chr+0xc>
	return *str;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	781b      	ldrb	r3, [r3, #0]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
	...

080097d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80097e2:	2300      	movs	r3, #0
 80097e4:	60bb      	str	r3, [r7, #8]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	60fb      	str	r3, [r7, #12]
 80097ea:	e029      	b.n	8009840 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80097ec:	4a27      	ldr	r2, [pc, #156]	; (800988c <chk_lock+0xb4>)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	011b      	lsls	r3, r3, #4
 80097f2:	4413      	add	r3, r2
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d01d      	beq.n	8009836 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80097fa:	4a24      	ldr	r2, [pc, #144]	; (800988c <chk_lock+0xb4>)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	011b      	lsls	r3, r3, #4
 8009800:	4413      	add	r3, r2
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	429a      	cmp	r2, r3
 800980a:	d116      	bne.n	800983a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800980c:	4a1f      	ldr	r2, [pc, #124]	; (800988c <chk_lock+0xb4>)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	4413      	add	r3, r2
 8009814:	3304      	adds	r3, #4
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800981c:	429a      	cmp	r2, r3
 800981e:	d10c      	bne.n	800983a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009820:	4a1a      	ldr	r2, [pc, #104]	; (800988c <chk_lock+0xb4>)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	4413      	add	r3, r2
 8009828:	3308      	adds	r3, #8
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009830:	429a      	cmp	r2, r3
 8009832:	d102      	bne.n	800983a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009834:	e007      	b.n	8009846 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009836:	2301      	movs	r3, #1
 8009838:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d9d2      	bls.n	80097ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d109      	bne.n	8009860 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d102      	bne.n	8009858 <chk_lock+0x80>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d101      	bne.n	800985c <chk_lock+0x84>
 8009858:	2300      	movs	r3, #0
 800985a:	e010      	b.n	800987e <chk_lock+0xa6>
 800985c:	2312      	movs	r3, #18
 800985e:	e00e      	b.n	800987e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d108      	bne.n	8009878 <chk_lock+0xa0>
 8009866:	4a09      	ldr	r2, [pc, #36]	; (800988c <chk_lock+0xb4>)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	011b      	lsls	r3, r3, #4
 800986c:	4413      	add	r3, r2
 800986e:	330c      	adds	r3, #12
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009876:	d101      	bne.n	800987c <chk_lock+0xa4>
 8009878:	2310      	movs	r3, #16
 800987a:	e000      	b.n	800987e <chk_lock+0xa6>
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	20000450 	.word	0x20000450

08009890 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009896:	2300      	movs	r3, #0
 8009898:	607b      	str	r3, [r7, #4]
 800989a:	e002      	b.n	80098a2 <enq_lock+0x12>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	3301      	adds	r3, #1
 80098a0:	607b      	str	r3, [r7, #4]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d806      	bhi.n	80098b6 <enq_lock+0x26>
 80098a8:	4a09      	ldr	r2, [pc, #36]	; (80098d0 <enq_lock+0x40>)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	4413      	add	r3, r2
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1f2      	bne.n	800989c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	bf14      	ite	ne
 80098bc:	2301      	movne	r3, #1
 80098be:	2300      	moveq	r3, #0
 80098c0:	b2db      	uxtb	r3, r3
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	20000450 	.word	0x20000450

080098d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80098de:	2300      	movs	r3, #0
 80098e0:	60fb      	str	r3, [r7, #12]
 80098e2:	e01f      	b.n	8009924 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80098e4:	4a41      	ldr	r2, [pc, #260]	; (80099ec <inc_lock+0x118>)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	4413      	add	r3, r2
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d113      	bne.n	800991e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80098f6:	4a3d      	ldr	r2, [pc, #244]	; (80099ec <inc_lock+0x118>)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	4413      	add	r3, r2
 80098fe:	3304      	adds	r3, #4
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009906:	429a      	cmp	r2, r3
 8009908:	d109      	bne.n	800991e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800990a:	4a38      	ldr	r2, [pc, #224]	; (80099ec <inc_lock+0x118>)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	4413      	add	r3, r2
 8009912:	3308      	adds	r3, #8
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800991a:	429a      	cmp	r2, r3
 800991c:	d006      	beq.n	800992c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d9dc      	bls.n	80098e4 <inc_lock+0x10>
 800992a:	e000      	b.n	800992e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800992c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b02      	cmp	r3, #2
 8009932:	d132      	bne.n	800999a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e002      	b.n	8009940 <inc_lock+0x6c>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d806      	bhi.n	8009954 <inc_lock+0x80>
 8009946:	4a29      	ldr	r2, [pc, #164]	; (80099ec <inc_lock+0x118>)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	011b      	lsls	r3, r3, #4
 800994c:	4413      	add	r3, r2
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1f2      	bne.n	800993a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b02      	cmp	r3, #2
 8009958:	d101      	bne.n	800995e <inc_lock+0x8a>
 800995a:	2300      	movs	r3, #0
 800995c:	e040      	b.n	80099e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4922      	ldr	r1, [pc, #136]	; (80099ec <inc_lock+0x118>)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	440b      	add	r3, r1
 800996a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689a      	ldr	r2, [r3, #8]
 8009970:	491e      	ldr	r1, [pc, #120]	; (80099ec <inc_lock+0x118>)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	440b      	add	r3, r1
 8009978:	3304      	adds	r3, #4
 800997a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	695a      	ldr	r2, [r3, #20]
 8009980:	491a      	ldr	r1, [pc, #104]	; (80099ec <inc_lock+0x118>)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	011b      	lsls	r3, r3, #4
 8009986:	440b      	add	r3, r1
 8009988:	3308      	adds	r3, #8
 800998a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800998c:	4a17      	ldr	r2, [pc, #92]	; (80099ec <inc_lock+0x118>)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	011b      	lsls	r3, r3, #4
 8009992:	4413      	add	r3, r2
 8009994:	330c      	adds	r3, #12
 8009996:	2200      	movs	r2, #0
 8009998:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d009      	beq.n	80099b4 <inc_lock+0xe0>
 80099a0:	4a12      	ldr	r2, [pc, #72]	; (80099ec <inc_lock+0x118>)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	011b      	lsls	r3, r3, #4
 80099a6:	4413      	add	r3, r2
 80099a8:	330c      	adds	r3, #12
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <inc_lock+0xe0>
 80099b0:	2300      	movs	r3, #0
 80099b2:	e015      	b.n	80099e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d108      	bne.n	80099cc <inc_lock+0xf8>
 80099ba:	4a0c      	ldr	r2, [pc, #48]	; (80099ec <inc_lock+0x118>)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	4413      	add	r3, r2
 80099c2:	330c      	adds	r3, #12
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	3301      	adds	r3, #1
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	e001      	b.n	80099d0 <inc_lock+0xfc>
 80099cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099d0:	4906      	ldr	r1, [pc, #24]	; (80099ec <inc_lock+0x118>)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	011b      	lsls	r3, r3, #4
 80099d6:	440b      	add	r3, r1
 80099d8:	330c      	adds	r3, #12
 80099da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3301      	adds	r3, #1
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	20000450 	.word	0x20000450

080099f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	e010      	b.n	8009a20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80099fe:	4a0d      	ldr	r2, [pc, #52]	; (8009a34 <clear_lock+0x44>)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	011b      	lsls	r3, r3, #4
 8009a04:	4413      	add	r3, r2
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d105      	bne.n	8009a1a <clear_lock+0x2a>
 8009a0e:	4a09      	ldr	r2, [pc, #36]	; (8009a34 <clear_lock+0x44>)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	011b      	lsls	r3, r3, #4
 8009a14:	4413      	add	r3, r2
 8009a16:	2200      	movs	r2, #0
 8009a18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d9eb      	bls.n	80099fe <clear_lock+0xe>
	}
}
 8009a26:	bf00      	nop
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	20000450 	.word	0x20000450

08009a38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	78db      	ldrb	r3, [r3, #3]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d034      	beq.n	8009ab6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	7858      	ldrb	r0, [r3, #1]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	f7ff fd7c 	bl	800955c <disk_write>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d002      	beq.n	8009a70 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	73fb      	strb	r3, [r7, #15]
 8009a6e:	e022      	b.n	8009ab6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	1ad2      	subs	r2, r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d217      	bcs.n	8009ab6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	789b      	ldrb	r3, [r3, #2]
 8009a8a:	613b      	str	r3, [r7, #16]
 8009a8c:	e010      	b.n	8009ab0 <sync_window+0x78>
					wsect += fs->fsize;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	4413      	add	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	7858      	ldrb	r0, [r3, #1]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	f7ff fd59 	bl	800955c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	613b      	str	r3, [r7, #16]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d8eb      	bhi.n	8009a8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3718      	adds	r7, #24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d01b      	beq.n	8009b10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff ffad 	bl	8009a38 <sync_window>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d113      	bne.n	8009b10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7858      	ldrb	r0, [r3, #1]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009af2:	2301      	movs	r3, #1
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	f7ff fd11 	bl	800951c <disk_read>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009b00:	f04f 33ff 	mov.w	r3, #4294967295
 8009b04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	3b02      	subs	r3, #2
 8009b28:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	3b02      	subs	r3, #2
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d301      	bcc.n	8009b3a <clust2sect+0x20>
 8009b36:	2300      	movs	r3, #0
 8009b38:	e008      	b.n	8009b4c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	895b      	ldrh	r3, [r3, #10]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	fb03 f202 	mul.w	r2, r3, r2
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4a:	4413      	add	r3, r2
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d904      	bls.n	8009b78 <get_fat+0x20>
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d302      	bcc.n	8009b7e <get_fat+0x26>
		val = 1;	/* Internal error */
 8009b78:	2301      	movs	r3, #1
 8009b7a:	617b      	str	r3, [r7, #20]
 8009b7c:	e0b7      	b.n	8009cee <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b82:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d05a      	beq.n	8009c42 <get_fat+0xea>
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d07d      	beq.n	8009c8c <get_fat+0x134>
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	f040 80a2 	bne.w	8009cda <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	085b      	lsrs	r3, r3, #1
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	899b      	ldrh	r3, [r3, #12]
 8009bac:	4619      	mov	r1, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009bb4:	4413      	add	r3, r2
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	6938      	ldr	r0, [r7, #16]
 8009bba:	f7ff ff81 	bl	8009ac0 <move_window>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 808d 	bne.w	8009ce0 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	1c5a      	adds	r2, r3, #1
 8009bca:	60fa      	str	r2, [r7, #12]
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	8992      	ldrh	r2, [r2, #12]
 8009bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bd4:	fb02 f201 	mul.w	r2, r2, r1
 8009bd8:	1a9b      	subs	r3, r3, r2
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009be2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	899b      	ldrh	r3, [r3, #12]
 8009bec:	4619      	mov	r1, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009bf4:	4413      	add	r3, r2
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6938      	ldr	r0, [r7, #16]
 8009bfa:	f7ff ff61 	bl	8009ac0 <move_window>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d16f      	bne.n	8009ce4 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	899b      	ldrh	r3, [r3, #12]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c10:	fb02 f201 	mul.w	r2, r2, r1
 8009c14:	1a9b      	subs	r3, r3, r2
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c1e:	021b      	lsls	r3, r3, #8
 8009c20:	461a      	mov	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <get_fat+0xe0>
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	091b      	lsrs	r3, r3, #4
 8009c36:	e002      	b.n	8009c3e <get_fat+0xe6>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c3e:	617b      	str	r3, [r7, #20]
			break;
 8009c40:	e055      	b.n	8009cee <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	899b      	ldrh	r3, [r3, #12]
 8009c4a:	085b      	lsrs	r3, r3, #1
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	4619      	mov	r1, r3
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c56:	4413      	add	r3, r2
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6938      	ldr	r0, [r7, #16]
 8009c5c:	f7ff ff30 	bl	8009ac0 <move_window>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d140      	bne.n	8009ce8 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	005b      	lsls	r3, r3, #1
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	8992      	ldrh	r2, [r2, #12]
 8009c74:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c78:	fb02 f200 	mul.w	r2, r2, r0
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	440b      	add	r3, r1
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff fca9 	bl	80095d8 <ld_word>
 8009c86:	4603      	mov	r3, r0
 8009c88:	617b      	str	r3, [r7, #20]
			break;
 8009c8a:	e030      	b.n	8009cee <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	899b      	ldrh	r3, [r3, #12]
 8009c94:	089b      	lsrs	r3, r3, #2
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	4619      	mov	r1, r3
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ca0:	4413      	add	r3, r2
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6938      	ldr	r0, [r7, #16]
 8009ca6:	f7ff ff0b 	bl	8009ac0 <move_window>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d11d      	bne.n	8009cec <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	8992      	ldrh	r2, [r2, #12]
 8009cbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8009cc2:	fb02 f200 	mul.w	r2, r2, r0
 8009cc6:	1a9b      	subs	r3, r3, r2
 8009cc8:	440b      	add	r3, r1
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7ff fc9c 	bl	8009608 <ld_dword>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009cd6:	617b      	str	r3, [r7, #20]
			break;
 8009cd8:	e009      	b.n	8009cee <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009cda:	2301      	movs	r3, #1
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	e006      	b.n	8009cee <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ce0:	bf00      	nop
 8009ce2:	e004      	b.n	8009cee <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ce4:	bf00      	nop
 8009ce6:	e002      	b.n	8009cee <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ce8:	bf00      	nop
 8009cea:	e000      	b.n	8009cee <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009cec:	bf00      	nop
		}
	}

	return val;
 8009cee:	697b      	ldr	r3, [r7, #20]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009cf8:	b590      	push	{r4, r7, lr}
 8009cfa:	b089      	sub	sp, #36	; 0x24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009d04:	2302      	movs	r3, #2
 8009d06:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	f240 8106 	bls.w	8009f1c <put_fat+0x224>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	69db      	ldr	r3, [r3, #28]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	f080 8100 	bcs.w	8009f1c <put_fat+0x224>
		switch (fs->fs_type) {
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	f000 8088 	beq.w	8009e36 <put_fat+0x13e>
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	f000 80b0 	beq.w	8009e8c <put_fat+0x194>
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	f040 80f5 	bne.w	8009f1c <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	61bb      	str	r3, [r7, #24]
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	085b      	lsrs	r3, r3, #1
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	899b      	ldrh	r3, [r3, #12]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d50:	4413      	add	r3, r2
 8009d52:	4619      	mov	r1, r3
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7ff feb3 	bl	8009ac0 <move_window>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d5e:	7ffb      	ldrb	r3, [r7, #31]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f040 80d4 	bne.w	8009f0e <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	61ba      	str	r2, [r7, #24]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	8992      	ldrh	r2, [r2, #12]
 8009d76:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d7a:	fb02 f200 	mul.w	r2, r2, r0
 8009d7e:	1a9b      	subs	r3, r3, r2
 8009d80:	440b      	add	r3, r1
 8009d82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00d      	beq.n	8009daa <put_fat+0xb2>
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	b25b      	sxtb	r3, r3
 8009d94:	f003 030f 	and.w	r3, r3, #15
 8009d98:	b25a      	sxtb	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	011b      	lsls	r3, r3, #4
 8009da0:	b25b      	sxtb	r3, r3
 8009da2:	4313      	orrs	r3, r2
 8009da4:	b25b      	sxtb	r3, r3
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	e001      	b.n	8009dae <put_fat+0xb6>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2201      	movs	r2, #1
 8009db6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	899b      	ldrh	r3, [r3, #12]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dc8:	4413      	add	r3, r2
 8009dca:	4619      	mov	r1, r3
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f7ff fe77 	bl	8009ac0 <move_window>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009dd6:	7ffb      	ldrb	r3, [r7, #31]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f040 809a 	bne.w	8009f12 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	899b      	ldrh	r3, [r3, #12]
 8009de8:	461a      	mov	r2, r3
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	fbb3 f0f2 	udiv	r0, r3, r2
 8009df0:	fb02 f200 	mul.w	r2, r2, r0
 8009df4:	1a9b      	subs	r3, r3, r2
 8009df6:	440b      	add	r3, r1
 8009df8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <put_fat+0x114>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	091b      	lsrs	r3, r3, #4
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	e00e      	b.n	8009e2a <put_fat+0x132>
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	b25b      	sxtb	r3, r3
 8009e12:	f023 030f 	bic.w	r3, r3, #15
 8009e16:	b25a      	sxtb	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	0a1b      	lsrs	r3, r3, #8
 8009e1c:	b25b      	sxtb	r3, r3
 8009e1e:	f003 030f 	and.w	r3, r3, #15
 8009e22:	b25b      	sxtb	r3, r3
 8009e24:	4313      	orrs	r3, r2
 8009e26:	b25b      	sxtb	r3, r3
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2201      	movs	r2, #1
 8009e32:	70da      	strb	r2, [r3, #3]
			break;
 8009e34:	e072      	b.n	8009f1c <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	899b      	ldrh	r3, [r3, #12]
 8009e3e:	085b      	lsrs	r3, r3, #1
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	4619      	mov	r1, r3
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e4a:	4413      	add	r3, r2
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f7ff fe36 	bl	8009ac0 <move_window>
 8009e54:	4603      	mov	r3, r0
 8009e56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e58:	7ffb      	ldrb	r3, [r7, #31]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d15b      	bne.n	8009f16 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	005b      	lsls	r3, r3, #1
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	8992      	ldrh	r2, [r2, #12]
 8009e6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e70:	fb02 f200 	mul.w	r2, r2, r0
 8009e74:	1a9b      	subs	r3, r3, r2
 8009e76:	440b      	add	r3, r1
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	b292      	uxth	r2, r2
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7ff fbe5 	bl	800964e <st_word>
			fs->wflag = 1;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2201      	movs	r2, #1
 8009e88:	70da      	strb	r2, [r3, #3]
			break;
 8009e8a:	e047      	b.n	8009f1c <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	899b      	ldrh	r3, [r3, #12]
 8009e94:	089b      	lsrs	r3, r3, #2
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	4619      	mov	r1, r3
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ea0:	4413      	add	r3, r2
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff fe0b 	bl	8009ac0 <move_window>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009eae:	7ffb      	ldrb	r3, [r7, #31]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d132      	bne.n	8009f1a <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	8992      	ldrh	r2, [r2, #12]
 8009ec8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ecc:	fb02 f200 	mul.w	r2, r2, r0
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	440b      	add	r3, r1
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7ff fb97 	bl	8009608 <ld_dword>
 8009eda:	4603      	mov	r3, r0
 8009edc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009ee0:	4323      	orrs	r3, r4
 8009ee2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	8992      	ldrh	r2, [r2, #12]
 8009ef2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ef6:	fb02 f200 	mul.w	r2, r2, r0
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	440b      	add	r3, r1
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff fbbf 	bl	8009684 <st_dword>
			fs->wflag = 1;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	70da      	strb	r2, [r3, #3]
			break;
 8009f0c:	e006      	b.n	8009f1c <put_fat+0x224>
			if (res != FR_OK) break;
 8009f0e:	bf00      	nop
 8009f10:	e004      	b.n	8009f1c <put_fat+0x224>
			if (res != FR_OK) break;
 8009f12:	bf00      	nop
 8009f14:	e002      	b.n	8009f1c <put_fat+0x224>
			if (res != FR_OK) break;
 8009f16:	bf00      	nop
 8009f18:	e000      	b.n	8009f1c <put_fat+0x224>
			if (res != FR_OK) break;
 8009f1a:	bf00      	nop
		}
	}
	return res;
 8009f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3724      	adds	r7, #36	; 0x24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd90      	pop	{r4, r7, pc}

08009f26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b088      	sub	sp, #32
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	60f8      	str	r0, [r7, #12]
 8009f2e:	60b9      	str	r1, [r7, #8]
 8009f30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d904      	bls.n	8009f4c <remove_chain+0x26>
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d301      	bcc.n	8009f50 <remove_chain+0x2a>
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	e04b      	b.n	8009fe8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00c      	beq.n	8009f70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009f56:	f04f 32ff 	mov.w	r2, #4294967295
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	69b8      	ldr	r0, [r7, #24]
 8009f5e:	f7ff fecb 	bl	8009cf8 <put_fat>
 8009f62:	4603      	mov	r3, r0
 8009f64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009f66:	7ffb      	ldrb	r3, [r7, #31]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <remove_chain+0x4a>
 8009f6c:	7ffb      	ldrb	r3, [r7, #31]
 8009f6e:	e03b      	b.n	8009fe8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009f70:	68b9      	ldr	r1, [r7, #8]
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f7ff fdf0 	bl	8009b58 <get_fat>
 8009f78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d031      	beq.n	8009fe4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d101      	bne.n	8009f8a <remove_chain+0x64>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e02e      	b.n	8009fe8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f90:	d101      	bne.n	8009f96 <remove_chain+0x70>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e028      	b.n	8009fe8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009f96:	2200      	movs	r2, #0
 8009f98:	68b9      	ldr	r1, [r7, #8]
 8009f9a:	69b8      	ldr	r0, [r7, #24]
 8009f9c:	f7ff feac 	bl	8009cf8 <put_fat>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009fa4:	7ffb      	ldrb	r3, [r7, #31]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <remove_chain+0x88>
 8009faa:	7ffb      	ldrb	r3, [r7, #31]
 8009fac:	e01c      	b.n	8009fe8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	699a      	ldr	r2, [r3, #24]
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	3b02      	subs	r3, #2
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d20b      	bcs.n	8009fd4 <remove_chain+0xae>
			fs->free_clst++;
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	791b      	ldrb	r3, [r3, #4]
 8009fca:	f043 0301 	orr.w	r3, r3, #1
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d3c6      	bcc.n	8009f70 <remove_chain+0x4a>
 8009fe2:	e000      	b.n	8009fe6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009fe4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3720      	adds	r7, #32
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10d      	bne.n	800a022 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <create_chain+0x2c>
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	69ba      	ldr	r2, [r7, #24]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d31b      	bcc.n	800a054 <create_chain+0x64>
 800a01c:	2301      	movs	r3, #1
 800a01e:	61bb      	str	r3, [r7, #24]
 800a020:	e018      	b.n	800a054 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff fd97 	bl	8009b58 <get_fat>
 800a02a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d801      	bhi.n	800a036 <create_chain+0x46>
 800a032:	2301      	movs	r3, #1
 800a034:	e070      	b.n	800a118 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03c:	d101      	bne.n	800a042 <create_chain+0x52>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	e06a      	b.n	800a118 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d201      	bcs.n	800a050 <create_chain+0x60>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	e063      	b.n	800a118 <create_chain+0x128>
		scl = clst;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	3301      	adds	r3, #1
 800a05c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	69fa      	ldr	r2, [r7, #28]
 800a064:	429a      	cmp	r2, r3
 800a066:	d307      	bcc.n	800a078 <create_chain+0x88>
				ncl = 2;
 800a068:	2302      	movs	r3, #2
 800a06a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a06c:	69fa      	ldr	r2, [r7, #28]
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	429a      	cmp	r2, r3
 800a072:	d901      	bls.n	800a078 <create_chain+0x88>
 800a074:	2300      	movs	r3, #0
 800a076:	e04f      	b.n	800a118 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a078:	69f9      	ldr	r1, [r7, #28]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fd6c 	bl	8009b58 <get_fat>
 800a080:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00e      	beq.n	800a0a6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d003      	beq.n	800a096 <create_chain+0xa6>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a094:	d101      	bne.n	800a09a <create_chain+0xaa>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	e03e      	b.n	800a118 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d1da      	bne.n	800a058 <create_chain+0x68>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	e038      	b.n	800a118 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a0a6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ac:	69f9      	ldr	r1, [r7, #28]
 800a0ae:	6938      	ldr	r0, [r7, #16]
 800a0b0:	f7ff fe22 	bl	8009cf8 <put_fat>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d109      	bne.n	800a0d2 <create_chain+0xe2>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d006      	beq.n	800a0d2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	6938      	ldr	r0, [r7, #16]
 800a0ca:	f7ff fe15 	bl	8009cf8 <put_fat>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d116      	bne.n	800a106 <create_chain+0x116>
		fs->last_clst = ncl;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	69db      	ldr	r3, [r3, #28]
 800a0e6:	3b02      	subs	r3, #2
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d804      	bhi.n	800a0f6 <create_chain+0x106>
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	1e5a      	subs	r2, r3, #1
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	791b      	ldrb	r3, [r3, #4]
 800a0fa:	f043 0301 	orr.w	r3, r3, #1
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	711a      	strb	r2, [r3, #4]
 800a104:	e007      	b.n	800a116 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d102      	bne.n	800a112 <create_chain+0x122>
 800a10c:	f04f 33ff 	mov.w	r3, #4294967295
 800a110:	e000      	b.n	800a114 <create_chain+0x124>
 800a112:	2301      	movs	r3, #1
 800a114:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a116:	69fb      	ldr	r3, [r7, #28]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3720      	adds	r7, #32
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	3304      	adds	r3, #4
 800a136:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	899b      	ldrh	r3, [r3, #12]
 800a13c:	461a      	mov	r2, r3
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	fbb3 f3f2 	udiv	r3, r3, r2
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	8952      	ldrh	r2, [r2, #10]
 800a148:	fbb3 f3f2 	udiv	r3, r3, r2
 800a14c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	613a      	str	r2, [r7, #16]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <clmt_clust+0x42>
 800a15e:	2300      	movs	r3, #0
 800a160:	e010      	b.n	800a184 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	429a      	cmp	r2, r3
 800a168:	d307      	bcc.n	800a17a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	617b      	str	r3, [r7, #20]
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	3304      	adds	r3, #4
 800a176:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a178:	e7e9      	b.n	800a14e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a17a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	4413      	add	r3, r2
}
 800a184:	4618      	mov	r0, r3
 800a186:	371c      	adds	r7, #28
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1a6:	d204      	bcs.n	800a1b2 <dir_sdi+0x22>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	f003 031f 	and.w	r3, r3, #31
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	e071      	b.n	800a29a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d106      	bne.n	800a1d6 <dir_sdi+0x46>
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d902      	bls.n	800a1d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10c      	bne.n	800a1f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	095b      	lsrs	r3, r3, #5
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	8912      	ldrh	r2, [r2, #8]
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d301      	bcc.n	800a1ec <dir_sdi+0x5c>
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	e056      	b.n	800a29a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	61da      	str	r2, [r3, #28]
 800a1f4:	e02d      	b.n	800a252 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	895b      	ldrh	r3, [r3, #10]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	899b      	ldrh	r3, [r3, #12]
 800a200:	fb03 f302 	mul.w	r3, r3, r2
 800a204:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a206:	e019      	b.n	800a23c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6979      	ldr	r1, [r7, #20]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff fca3 	bl	8009b58 <get_fat>
 800a212:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21a:	d101      	bne.n	800a220 <dir_sdi+0x90>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e03c      	b.n	800a29a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d904      	bls.n	800a230 <dir_sdi+0xa0>
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d301      	bcc.n	800a234 <dir_sdi+0xa4>
 800a230:	2302      	movs	r3, #2
 800a232:	e032      	b.n	800a29a <dir_sdi+0x10a>
			ofs -= csz;
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	429a      	cmp	r2, r3
 800a242:	d2e1      	bcs.n	800a208 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a244:	6979      	ldr	r1, [r7, #20]
 800a246:	6938      	ldr	r0, [r7, #16]
 800a248:	f7ff fc67 	bl	8009b1a <clust2sect>
 800a24c:	4602      	mov	r2, r0
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	69db      	ldr	r3, [r3, #28]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <dir_sdi+0xd4>
 800a260:	2302      	movs	r3, #2
 800a262:	e01a      	b.n	800a29a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	69da      	ldr	r2, [r3, #28]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	899b      	ldrh	r3, [r3, #12]
 800a26c:	4619      	mov	r1, r3
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	fbb3 f3f1 	udiv	r3, r3, r1
 800a274:	441a      	add	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	899b      	ldrh	r3, [r3, #12]
 800a284:	461a      	mov	r2, r3
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	fbb3 f0f2 	udiv	r0, r3, r2
 800a28c:	fb02 f200 	mul.w	r2, r2, r0
 800a290:	1a9b      	subs	r3, r3, r2
 800a292:	18ca      	adds	r2, r1, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b086      	sub	sp, #24
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	3320      	adds	r3, #32
 800a2b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	69db      	ldr	r3, [r3, #28]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d003      	beq.n	800a2ca <dir_next+0x28>
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2c8:	d301      	bcc.n	800a2ce <dir_next+0x2c>
 800a2ca:	2304      	movs	r3, #4
 800a2cc:	e0bb      	b.n	800a446 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	899b      	ldrh	r3, [r3, #12]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2da:	fb02 f201 	mul.w	r2, r2, r1
 800a2de:	1a9b      	subs	r3, r3, r2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f040 809d 	bne.w	800a420 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10b      	bne.n	800a310 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	095b      	lsrs	r3, r3, #5
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	8912      	ldrh	r2, [r2, #8]
 800a300:	4293      	cmp	r3, r2
 800a302:	f0c0 808d 	bcc.w	800a420 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	61da      	str	r2, [r3, #28]
 800a30c:	2304      	movs	r3, #4
 800a30e:	e09a      	b.n	800a446 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	899b      	ldrh	r3, [r3, #12]
 800a314:	461a      	mov	r2, r3
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	fbb3 f3f2 	udiv	r3, r3, r2
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	8952      	ldrh	r2, [r2, #10]
 800a320:	3a01      	subs	r2, #1
 800a322:	4013      	ands	r3, r2
 800a324:	2b00      	cmp	r3, #0
 800a326:	d17b      	bne.n	800a420 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	4619      	mov	r1, r3
 800a330:	4610      	mov	r0, r2
 800a332:	f7ff fc11 	bl	8009b58 <get_fat>
 800a336:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d801      	bhi.n	800a342 <dir_next+0xa0>
 800a33e:	2302      	movs	r3, #2
 800a340:	e081      	b.n	800a446 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a348:	d101      	bne.n	800a34e <dir_next+0xac>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e07b      	b.n	800a446 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	429a      	cmp	r2, r3
 800a356:	d359      	bcc.n	800a40c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d104      	bne.n	800a368 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	61da      	str	r2, [r3, #28]
 800a364:	2304      	movs	r3, #4
 800a366:	e06e      	b.n	800a446 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	4619      	mov	r1, r3
 800a370:	4610      	mov	r0, r2
 800a372:	f7ff fe3d 	bl	8009ff0 <create_chain>
 800a376:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <dir_next+0xe0>
 800a37e:	2307      	movs	r3, #7
 800a380:	e061      	b.n	800a446 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d101      	bne.n	800a38c <dir_next+0xea>
 800a388:	2302      	movs	r3, #2
 800a38a:	e05c      	b.n	800a446 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a392:	d101      	bne.n	800a398 <dir_next+0xf6>
 800a394:	2301      	movs	r3, #1
 800a396:	e056      	b.n	800a446 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f7ff fb4d 	bl	8009a38 <sync_window>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <dir_next+0x106>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e04e      	b.n	800a446 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	899b      	ldrh	r3, [r3, #12]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	f7ff f9b2 	bl	800971e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	613b      	str	r3, [r7, #16]
 800a3be:	6979      	ldr	r1, [r7, #20]
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7ff fbaa 	bl	8009b1a <clust2sect>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	635a      	str	r2, [r3, #52]	; 0x34
 800a3cc:	e012      	b.n	800a3f4 <dir_next+0x152>
						fs->wflag = 1;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f7ff fb2f 	bl	8009a38 <sync_window>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <dir_next+0x142>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e030      	b.n	800a446 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	613b      	str	r3, [r7, #16]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	635a      	str	r2, [r3, #52]	; 0x34
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	895b      	ldrh	r3, [r3, #10]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d3e6      	bcc.n	800a3ce <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	1ad2      	subs	r2, r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a412:	6979      	ldr	r1, [r7, #20]
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7ff fb80 	bl	8009b1a <clust2sect>
 800a41a:	4602      	mov	r2, r0
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	899b      	ldrh	r3, [r3, #12]
 800a430:	461a      	mov	r2, r3
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	fbb3 f0f2 	udiv	r0, r3, r2
 800a438:	fb02 f200 	mul.w	r2, r2, r0
 800a43c:	1a9b      	subs	r3, r3, r2
 800a43e:	18ca      	adds	r2, r1, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3718      	adds	r7, #24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b086      	sub	sp, #24
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a45e:	2100      	movs	r1, #0
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7ff fe95 	bl	800a190 <dir_sdi>
 800a466:	4603      	mov	r3, r0
 800a468:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d12b      	bne.n	800a4c8 <dir_alloc+0x7a>
		n = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	4619      	mov	r1, r3
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7ff fb20 	bl	8009ac0 <move_window>
 800a480:	4603      	mov	r3, r0
 800a482:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a484:	7dfb      	ldrb	r3, [r7, #23]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d11d      	bne.n	800a4c6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2be5      	cmp	r3, #229	; 0xe5
 800a492:	d004      	beq.n	800a49e <dir_alloc+0x50>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d107      	bne.n	800a4ae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	613b      	str	r3, [r7, #16]
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d102      	bne.n	800a4b2 <dir_alloc+0x64>
 800a4ac:	e00c      	b.n	800a4c8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff fef4 	bl	800a2a2 <dir_next>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d0d7      	beq.n	800a474 <dir_alloc+0x26>
 800a4c4:	e000      	b.n	800a4c8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a4c6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ca:	2b04      	cmp	r3, #4
 800a4cc:	d101      	bne.n	800a4d2 <dir_alloc+0x84>
 800a4ce:	2307      	movs	r3, #7
 800a4d0:	75fb      	strb	r3, [r7, #23]
	return res;
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	331a      	adds	r3, #26
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff f874 	bl	80095d8 <ld_word>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d109      	bne.n	800a510 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	3314      	adds	r3, #20
 800a500:	4618      	mov	r0, r3
 800a502:	f7ff f869 	bl	80095d8 <ld_word>
 800a506:	4603      	mov	r3, r0
 800a508:	041b      	lsls	r3, r3, #16
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a510:	68fb      	ldr	r3, [r7, #12]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	60f8      	str	r0, [r7, #12]
 800a522:	60b9      	str	r1, [r7, #8]
 800a524:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	331a      	adds	r3, #26
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	b292      	uxth	r2, r2
 800a52e:	4611      	mov	r1, r2
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff f88c 	bl	800964e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d109      	bne.n	800a552 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f103 0214 	add.w	r2, r3, #20
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	0c1b      	lsrs	r3, r3, #16
 800a548:	b29b      	uxth	r3, r3
 800a54a:	4619      	mov	r1, r3
 800a54c:	4610      	mov	r0, r2
 800a54e:	f7ff f87e 	bl	800964e <st_word>
	}
}
 800a552:	bf00      	nop
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a55c:	b590      	push	{r4, r7, lr}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	331a      	adds	r3, #26
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7ff f834 	bl	80095d8 <ld_word>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <cmp_lfn+0x1e>
 800a576:	2300      	movs	r3, #0
 800a578:	e059      	b.n	800a62e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a582:	1e5a      	subs	r2, r3, #1
 800a584:	4613      	mov	r3, r2
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	4413      	add	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a590:	2301      	movs	r3, #1
 800a592:	81fb      	strh	r3, [r7, #14]
 800a594:	2300      	movs	r3, #0
 800a596:	613b      	str	r3, [r7, #16]
 800a598:	e033      	b.n	800a602 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a59a:	4a27      	ldr	r2, [pc, #156]	; (800a638 <cmp_lfn+0xdc>)
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	4413      	add	r3, r2
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff f815 	bl	80095d8 <ld_word>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a5b2:	89fb      	ldrh	r3, [r7, #14]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d01a      	beq.n	800a5ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	2bfe      	cmp	r3, #254	; 0xfe
 800a5bc:	d812      	bhi.n	800a5e4 <cmp_lfn+0x88>
 800a5be:	89bb      	ldrh	r3, [r7, #12]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f001 febf 	bl	800c344 <ff_wtoupper>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	461c      	mov	r4, r3
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	617a      	str	r2, [r7, #20]
 800a5d0:	005b      	lsls	r3, r3, #1
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f001 feb3 	bl	800c344 <ff_wtoupper>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	429c      	cmp	r4, r3
 800a5e2:	d001      	beq.n	800a5e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	e022      	b.n	800a62e <cmp_lfn+0xd2>
			}
			wc = uc;
 800a5e8:	89bb      	ldrh	r3, [r7, #12]
 800a5ea:	81fb      	strh	r3, [r7, #14]
 800a5ec:	e006      	b.n	800a5fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a5ee:	89bb      	ldrh	r3, [r7, #12]
 800a5f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d001      	beq.n	800a5fc <cmp_lfn+0xa0>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e018      	b.n	800a62e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	3301      	adds	r3, #1
 800a600:	613b      	str	r3, [r7, #16]
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2b0c      	cmp	r3, #12
 800a606:	d9c8      	bls.n	800a59a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00b      	beq.n	800a62c <cmp_lfn+0xd0>
 800a614:	89fb      	ldrh	r3, [r7, #14]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d008      	beq.n	800a62c <cmp_lfn+0xd0>
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	4413      	add	r3, r2
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <cmp_lfn+0xd0>
 800a628:	2300      	movs	r3, #0
 800a62a:	e000      	b.n	800a62e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a62c:	2301      	movs	r3, #1
}
 800a62e:	4618      	mov	r0, r3
 800a630:	371c      	adds	r7, #28
 800a632:	46bd      	mov	sp, r7
 800a634:	bd90      	pop	{r4, r7, pc}
 800a636:	bf00      	nop
 800a638:	0800e47c 	.word	0x0800e47c

0800a63c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	4611      	mov	r1, r2
 800a648:	461a      	mov	r2, r3
 800a64a:	460b      	mov	r3, r1
 800a64c:	71fb      	strb	r3, [r7, #7]
 800a64e:	4613      	mov	r3, r2
 800a650:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	330d      	adds	r3, #13
 800a656:	79ba      	ldrb	r2, [r7, #6]
 800a658:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	330b      	adds	r3, #11
 800a65e:	220f      	movs	r2, #15
 800a660:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	330c      	adds	r3, #12
 800a666:	2200      	movs	r2, #0
 800a668:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	331a      	adds	r3, #26
 800a66e:	2100      	movs	r1, #0
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe ffec 	bl	800964e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	1e5a      	subs	r2, r3, #1
 800a67a:	4613      	mov	r3, r2
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	4413      	add	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	82fb      	strh	r3, [r7, #22]
 800a68a:	2300      	movs	r3, #0
 800a68c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a68e:	8afb      	ldrh	r3, [r7, #22]
 800a690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a694:	4293      	cmp	r3, r2
 800a696:	d007      	beq.n	800a6a8 <put_lfn+0x6c>
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	61fa      	str	r2, [r7, #28]
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a6a8:	4a17      	ldr	r2, [pc, #92]	; (800a708 <put_lfn+0xcc>)
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	8afa      	ldrh	r2, [r7, #22]
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe ffc7 	bl	800964e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a6c0:	8afb      	ldrh	r3, [r7, #22]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d102      	bne.n	800a6cc <put_lfn+0x90>
 800a6c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	61bb      	str	r3, [r7, #24]
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	2b0c      	cmp	r3, #12
 800a6d6:	d9da      	bls.n	800a68e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a6d8:	8afb      	ldrh	r3, [r7, #22]
 800a6da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d006      	beq.n	800a6f0 <put_lfn+0xb4>
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	005b      	lsls	r3, r3, #1
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d103      	bne.n	800a6f8 <put_lfn+0xbc>
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	79fa      	ldrb	r2, [r7, #7]
 800a6fc:	701a      	strb	r2, [r3, #0]
}
 800a6fe:	bf00      	nop
 800a700:	3720      	adds	r7, #32
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	0800e47c 	.word	0x0800e47c

0800a70c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08c      	sub	sp, #48	; 0x30
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a71a:	220b      	movs	r2, #11
 800a71c:	68b9      	ldr	r1, [r7, #8]
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7fe ffdc 	bl	80096dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	2b05      	cmp	r3, #5
 800a728:	d92b      	bls.n	800a782 <gen_numname+0x76>
		sr = seq;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a72e:	e022      	b.n	800a776 <gen_numname+0x6a>
			wc = *lfn++;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	1c9a      	adds	r2, r3, #2
 800a734:	607a      	str	r2, [r7, #4]
 800a736:	881b      	ldrh	r3, [r3, #0]
 800a738:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a73a:	2300      	movs	r3, #0
 800a73c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a73e:	e017      	b.n	800a770 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	005a      	lsls	r2, r3, #1
 800a744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	4413      	add	r3, r2
 800a74c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a74e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a750:	085b      	lsrs	r3, r3, #1
 800a752:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d005      	beq.n	800a76a <gen_numname+0x5e>
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a764:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a768:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	3301      	adds	r3, #1
 800a76e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	2b0f      	cmp	r3, #15
 800a774:	d9e4      	bls.n	800a740 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	881b      	ldrh	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1d8      	bne.n	800a730 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a782:	2307      	movs	r3, #7
 800a784:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	f003 030f 	and.w	r3, r3, #15
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	3330      	adds	r3, #48	; 0x30
 800a792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a79a:	2b39      	cmp	r3, #57	; 0x39
 800a79c:	d904      	bls.n	800a7a8 <gen_numname+0x9c>
 800a79e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7a2:	3307      	adds	r3, #7
 800a7a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	1e5a      	subs	r2, r3, #1
 800a7ac:	62ba      	str	r2, [r7, #40]	; 0x28
 800a7ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a7b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	091b      	lsrs	r3, r3, #4
 800a7c0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1de      	bne.n	800a786 <gen_numname+0x7a>
	ns[i] = '~';
 800a7c8:	f107 0214 	add.w	r2, r7, #20
 800a7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ce:	4413      	add	r3, r2
 800a7d0:	227e      	movs	r2, #126	; 0x7e
 800a7d2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7d8:	e002      	b.n	800a7e0 <gen_numname+0xd4>
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	3301      	adds	r3, #1
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
 800a7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d205      	bcs.n	800a7f4 <gen_numname+0xe8>
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	4413      	add	r3, r2
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b20      	cmp	r3, #32
 800a7f2:	d1f2      	bne.n	800a7da <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f6:	2b07      	cmp	r3, #7
 800a7f8:	d808      	bhi.n	800a80c <gen_numname+0x100>
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	62ba      	str	r2, [r7, #40]	; 0x28
 800a800:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a804:	4413      	add	r3, r2
 800a806:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a80a:	e000      	b.n	800a80e <gen_numname+0x102>
 800a80c:	2120      	movs	r1, #32
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	1c5a      	adds	r2, r3, #1
 800a812:	627a      	str	r2, [r7, #36]	; 0x24
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	4413      	add	r3, r2
 800a818:	460a      	mov	r2, r1
 800a81a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	2b07      	cmp	r3, #7
 800a820:	d9e8      	bls.n	800a7f4 <gen_numname+0xe8>
}
 800a822:	bf00      	nop
 800a824:	3730      	adds	r7, #48	; 0x30
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b085      	sub	sp, #20
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a832:	2300      	movs	r3, #0
 800a834:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a836:	230b      	movs	r3, #11
 800a838:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	0852      	lsrs	r2, r2, #1
 800a840:	01db      	lsls	r3, r3, #7
 800a842:	4313      	orrs	r3, r2
 800a844:	b2da      	uxtb	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	1c59      	adds	r1, r3, #1
 800a84a:	6079      	str	r1, [r7, #4]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	4413      	add	r3, r2
 800a850:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	3b01      	subs	r3, #1
 800a856:	60bb      	str	r3, [r7, #8]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1ed      	bne.n	800a83a <sum_sfn+0x10>
	return sum;
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a87a:	2100      	movs	r1, #0
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f7ff fc87 	bl	800a190 <dir_sdi>
 800a882:	4603      	mov	r3, r0
 800a884:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <dir_find+0x24>
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
 800a88e:	e0a9      	b.n	800a9e4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a890:	23ff      	movs	r3, #255	; 0xff
 800a892:	753b      	strb	r3, [r7, #20]
 800a894:	7d3b      	ldrb	r3, [r7, #20]
 800a896:	757b      	strb	r3, [r7, #21]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f04f 32ff 	mov.w	r2, #4294967295
 800a89e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6938      	ldr	r0, [r7, #16]
 800a8a8:	f7ff f90a 	bl	8009ac0 <move_window>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f040 8090 	bne.w	800a9d8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a1b      	ldr	r3, [r3, #32]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a8c0:	7dbb      	ldrb	r3, [r7, #22]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d102      	bne.n	800a8cc <dir_find+0x60>
 800a8c6:	2304      	movs	r3, #4
 800a8c8:	75fb      	strb	r3, [r7, #23]
 800a8ca:	e08a      	b.n	800a9e2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	330b      	adds	r3, #11
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8d8:	73fb      	strb	r3, [r7, #15]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	7bfa      	ldrb	r2, [r7, #15]
 800a8de:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a8e0:	7dbb      	ldrb	r3, [r7, #22]
 800a8e2:	2be5      	cmp	r3, #229	; 0xe5
 800a8e4:	d007      	beq.n	800a8f6 <dir_find+0x8a>
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
 800a8e8:	f003 0308 	and.w	r3, r3, #8
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d009      	beq.n	800a904 <dir_find+0x98>
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
 800a8f2:	2b0f      	cmp	r3, #15
 800a8f4:	d006      	beq.n	800a904 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a8f6:	23ff      	movs	r3, #255	; 0xff
 800a8f8:	757b      	strb	r3, [r7, #21]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a900:	631a      	str	r2, [r3, #48]	; 0x30
 800a902:	e05e      	b.n	800a9c2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a904:	7bfb      	ldrb	r3, [r7, #15]
 800a906:	2b0f      	cmp	r3, #15
 800a908:	d136      	bne.n	800a978 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a914:	2b00      	cmp	r3, #0
 800a916:	d154      	bne.n	800a9c2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a918:	7dbb      	ldrb	r3, [r7, #22]
 800a91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00d      	beq.n	800a93e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	7b5b      	ldrb	r3, [r3, #13]
 800a928:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a92a:	7dbb      	ldrb	r3, [r7, #22]
 800a92c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a930:	75bb      	strb	r3, [r7, #22]
 800a932:	7dbb      	ldrb	r3, [r7, #22]
 800a934:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	695a      	ldr	r2, [r3, #20]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a93e:	7dba      	ldrb	r2, [r7, #22]
 800a940:	7d7b      	ldrb	r3, [r7, #21]
 800a942:	429a      	cmp	r2, r3
 800a944:	d115      	bne.n	800a972 <dir_find+0x106>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	330d      	adds	r3, #13
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	7d3a      	ldrb	r2, [r7, #20]
 800a950:	429a      	cmp	r2, r3
 800a952:	d10e      	bne.n	800a972 <dir_find+0x106>
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	691a      	ldr	r2, [r3, #16]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a1b      	ldr	r3, [r3, #32]
 800a95c:	4619      	mov	r1, r3
 800a95e:	4610      	mov	r0, r2
 800a960:	f7ff fdfc 	bl	800a55c <cmp_lfn>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d003      	beq.n	800a972 <dir_find+0x106>
 800a96a:	7d7b      	ldrb	r3, [r7, #21]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	e000      	b.n	800a974 <dir_find+0x108>
 800a972:	23ff      	movs	r3, #255	; 0xff
 800a974:	757b      	strb	r3, [r7, #21]
 800a976:	e024      	b.n	800a9c2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a978:	7d7b      	ldrb	r3, [r7, #21]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d109      	bne.n	800a992 <dir_find+0x126>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff ff51 	bl	800a82a <sum_sfn>
 800a988:	4603      	mov	r3, r0
 800a98a:	461a      	mov	r2, r3
 800a98c:	7d3b      	ldrb	r3, [r7, #20]
 800a98e:	4293      	cmp	r3, r2
 800a990:	d024      	beq.n	800a9dc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <dir_find+0x14a>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a18      	ldr	r0, [r3, #32]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3324      	adds	r3, #36	; 0x24
 800a9a8:	220b      	movs	r2, #11
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	f7fe fed1 	bl	8009752 <mem_cmp>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d014      	beq.n	800a9e0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a9b6:	23ff      	movs	r3, #255	; 0xff
 800a9b8:	757b      	strb	r3, [r7, #21]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff fc6c 	bl	800a2a2 <dir_next>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f43f af65 	beq.w	800a8a0 <dir_find+0x34>
 800a9d6:	e004      	b.n	800a9e2 <dir_find+0x176>
		if (res != FR_OK) break;
 800a9d8:	bf00      	nop
 800a9da:	e002      	b.n	800a9e2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a9dc:	bf00      	nop
 800a9de:	e000      	b.n	800a9e2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a9e0:	bf00      	nop

	return res;
 800a9e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08c      	sub	sp, #48	; 0x30
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aa00:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <dir_register+0x20>
 800aa08:	2306      	movs	r3, #6
 800aa0a:	e0e0      	b.n	800abce <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa10:	e002      	b.n	800aa18 <dir_register+0x2c>
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	3301      	adds	r3, #1
 800aa16:	627b      	str	r3, [r7, #36]	; 0x24
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	691a      	ldr	r2, [r3, #16]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	4413      	add	r3, r2
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1f4      	bne.n	800aa12 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800aa2e:	f107 030c 	add.w	r3, r7, #12
 800aa32:	220c      	movs	r2, #12
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe fe51 	bl	80096dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d032      	beq.n	800aaaa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2240      	movs	r2, #64	; 0x40
 800aa48:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa50:	e016      	b.n	800aa80 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	691a      	ldr	r2, [r3, #16]
 800aa5c:	f107 010c 	add.w	r1, r7, #12
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa62:	f7ff fe53 	bl	800a70c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7ff ff00 	bl	800a86c <dir_find>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800aa72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d106      	bne.n	800aa88 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa82:	2b63      	cmp	r3, #99	; 0x63
 800aa84:	d9e5      	bls.n	800aa52 <dir_register+0x66>
 800aa86:	e000      	b.n	800aa8a <dir_register+0x9e>
			if (res != FR_OK) break;
 800aa88:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	2b64      	cmp	r3, #100	; 0x64
 800aa8e:	d101      	bne.n	800aa94 <dir_register+0xa8>
 800aa90:	2307      	movs	r3, #7
 800aa92:	e09c      	b.n	800abce <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800aa94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa98:	2b04      	cmp	r3, #4
 800aa9a:	d002      	beq.n	800aaa2 <dir_register+0xb6>
 800aa9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaa0:	e095      	b.n	800abce <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800aaa2:	7dfa      	ldrb	r2, [r7, #23]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d007      	beq.n	800aac4 <dir_register+0xd8>
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	330c      	adds	r3, #12
 800aab8:	4a47      	ldr	r2, [pc, #284]	; (800abd8 <dir_register+0x1ec>)
 800aaba:	fba2 2303 	umull	r2, r3, r2, r3
 800aabe:	089b      	lsrs	r3, r3, #2
 800aac0:	3301      	adds	r3, #1
 800aac2:	e000      	b.n	800aac6 <dir_register+0xda>
 800aac4:	2301      	movs	r3, #1
 800aac6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800aac8:	6a39      	ldr	r1, [r7, #32]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7ff fcbf 	bl	800a44e <dir_alloc>
 800aad0:	4603      	mov	r3, r0
 800aad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800aad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d148      	bne.n	800ab70 <dir_register+0x184>
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	623b      	str	r3, [r7, #32]
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d042      	beq.n	800ab70 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	695a      	ldr	r2, [r3, #20]
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	015b      	lsls	r3, r3, #5
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7ff fb4a 	bl	800a190 <dir_sdi>
 800aafc:	4603      	mov	r3, r0
 800aafe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ab02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d132      	bne.n	800ab70 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3324      	adds	r3, #36	; 0x24
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7ff fe8b 	bl	800a82a <sum_sfn>
 800ab14:	4603      	mov	r3, r0
 800ab16:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	69f8      	ldr	r0, [r7, #28]
 800ab20:	f7fe ffce 	bl	8009ac0 <move_window>
 800ab24:	4603      	mov	r3, r0
 800ab26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ab2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d11d      	bne.n	800ab6e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	6918      	ldr	r0, [r3, #16]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a19      	ldr	r1, [r3, #32]
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	7efb      	ldrb	r3, [r7, #27]
 800ab40:	f7ff fd7c 	bl	800a63c <put_lfn>
				fs->wflag = 1;
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	2201      	movs	r2, #1
 800ab48:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7ff fba8 	bl	800a2a2 <dir_next>
 800ab52:	4603      	mov	r3, r0
 800ab54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ab58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d107      	bne.n	800ab70 <dir_register+0x184>
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	3b01      	subs	r3, #1
 800ab64:	623b      	str	r3, [r7, #32]
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1d5      	bne.n	800ab18 <dir_register+0x12c>
 800ab6c:	e000      	b.n	800ab70 <dir_register+0x184>
				if (res != FR_OK) break;
 800ab6e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ab70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d128      	bne.n	800abca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	69f8      	ldr	r0, [r7, #28]
 800ab80:	f7fe ff9e 	bl	8009ac0 <move_window>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ab8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d11b      	bne.n	800abca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	2220      	movs	r2, #32
 800ab98:	2100      	movs	r1, #0
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe fdbf 	bl	800971e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a18      	ldr	r0, [r3, #32]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3324      	adds	r3, #36	; 0x24
 800aba8:	220b      	movs	r2, #11
 800abaa:	4619      	mov	r1, r3
 800abac:	f7fe fd96 	bl	80096dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	330c      	adds	r3, #12
 800abbc:	f002 0218 	and.w	r2, r2, #24
 800abc0:	b2d2      	uxtb	r2, r2
 800abc2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	2201      	movs	r2, #1
 800abc8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800abca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3730      	adds	r7, #48	; 0x30
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	4ec4ec4f 	.word	0x4ec4ec4f

0800abdc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08a      	sub	sp, #40	; 0x28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	613b      	str	r3, [r7, #16]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	2300      	movs	r3, #0
 800abf6:	617b      	str	r3, [r7, #20]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	61ba      	str	r2, [r7, #24]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	4413      	add	r3, r2
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ac0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac0c:	2b1f      	cmp	r3, #31
 800ac0e:	d940      	bls.n	800ac92 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ac10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac12:	2b2f      	cmp	r3, #47	; 0x2f
 800ac14:	d006      	beq.n	800ac24 <create_name+0x48>
 800ac16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac18:	2b5c      	cmp	r3, #92	; 0x5c
 800ac1a:	d110      	bne.n	800ac3e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ac1c:	e002      	b.n	800ac24 <create_name+0x48>
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	3301      	adds	r3, #1
 800ac22:	61bb      	str	r3, [r7, #24]
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	4413      	add	r3, r2
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b2f      	cmp	r3, #47	; 0x2f
 800ac2e:	d0f6      	beq.n	800ac1e <create_name+0x42>
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	4413      	add	r3, r2
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b5c      	cmp	r3, #92	; 0x5c
 800ac3a:	d0f0      	beq.n	800ac1e <create_name+0x42>
			break;
 800ac3c:	e02a      	b.n	800ac94 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	2bfe      	cmp	r3, #254	; 0xfe
 800ac42:	d901      	bls.n	800ac48 <create_name+0x6c>
 800ac44:	2306      	movs	r3, #6
 800ac46:	e177      	b.n	800af38 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ac48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ac4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac50:	2101      	movs	r1, #1
 800ac52:	4618      	mov	r0, r3
 800ac54:	f001 fb3a 	bl	800c2cc <ff_convert>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ac5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <create_name+0x8a>
 800ac62:	2306      	movs	r3, #6
 800ac64:	e168      	b.n	800af38 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ac66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac68:	2b7f      	cmp	r3, #127	; 0x7f
 800ac6a:	d809      	bhi.n	800ac80 <create_name+0xa4>
 800ac6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac6e:	4619      	mov	r1, r3
 800ac70:	48b3      	ldr	r0, [pc, #716]	; (800af40 <create_name+0x364>)
 800ac72:	f7fe fd95 	bl	80097a0 <chk_chr>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <create_name+0xa4>
 800ac7c:	2306      	movs	r3, #6
 800ac7e:	e15b      	b.n	800af38 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	1c5a      	adds	r2, r3, #1
 800ac84:	617a      	str	r2, [r7, #20]
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac8e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ac90:	e7b4      	b.n	800abfc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ac92:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	441a      	add	r2, r3
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ac9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aca0:	2b1f      	cmp	r3, #31
 800aca2:	d801      	bhi.n	800aca8 <create_name+0xcc>
 800aca4:	2304      	movs	r3, #4
 800aca6:	e000      	b.n	800acaa <create_name+0xce>
 800aca8:	2300      	movs	r3, #0
 800acaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800acae:	e011      	b.n	800acd4 <create_name+0xf8>
		w = lfn[di - 1];
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800acb6:	3b01      	subs	r3, #1
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	4413      	add	r3, r2
 800acbe:	881b      	ldrh	r3, [r3, #0]
 800acc0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800acc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acc4:	2b20      	cmp	r3, #32
 800acc6:	d002      	beq.n	800acce <create_name+0xf2>
 800acc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acca:	2b2e      	cmp	r3, #46	; 0x2e
 800accc:	d106      	bne.n	800acdc <create_name+0x100>
		di--;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1ea      	bne.n	800acb0 <create_name+0xd4>
 800acda:	e000      	b.n	800acde <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800acdc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4413      	add	r3, r2
 800ace6:	2200      	movs	r2, #0
 800ace8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <create_name+0x118>
 800acf0:	2306      	movs	r3, #6
 800acf2:	e121      	b.n	800af38 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3324      	adds	r3, #36	; 0x24
 800acf8:	220b      	movs	r2, #11
 800acfa:	2120      	movs	r1, #32
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe fd0e 	bl	800971e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ad02:	2300      	movs	r3, #0
 800ad04:	61bb      	str	r3, [r7, #24]
 800ad06:	e002      	b.n	800ad0e <create_name+0x132>
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	61bb      	str	r3, [r7, #24]
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	4413      	add	r3, r2
 800ad16:	881b      	ldrh	r3, [r3, #0]
 800ad18:	2b20      	cmp	r3, #32
 800ad1a:	d0f5      	beq.n	800ad08 <create_name+0x12c>
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	4413      	add	r3, r2
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	2b2e      	cmp	r3, #46	; 0x2e
 800ad28:	d0ee      	beq.n	800ad08 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d009      	beq.n	800ad44 <create_name+0x168>
 800ad30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad34:	f043 0303 	orr.w	r3, r3, #3
 800ad38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ad3c:	e002      	b.n	800ad44 <create_name+0x168>
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	617b      	str	r3, [r7, #20]
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d009      	beq.n	800ad5e <create_name+0x182>
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad50:	3b01      	subs	r3, #1
 800ad52:	005b      	lsls	r3, r3, #1
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	4413      	add	r3, r2
 800ad58:	881b      	ldrh	r3, [r3, #0]
 800ad5a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad5c:	d1ef      	bne.n	800ad3e <create_name+0x162>

	i = b = 0; ni = 8;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ad64:	2300      	movs	r3, #0
 800ad66:	623b      	str	r3, [r7, #32]
 800ad68:	2308      	movs	r3, #8
 800ad6a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	61ba      	str	r2, [r7, #24]
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	4413      	add	r3, r2
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ad7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f000 8090 	beq.w	800aea4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ad84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad86:	2b20      	cmp	r3, #32
 800ad88:	d006      	beq.n	800ad98 <create_name+0x1bc>
 800ad8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad8e:	d10a      	bne.n	800ada6 <create_name+0x1ca>
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d006      	beq.n	800ada6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ad98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad9c:	f043 0303 	orr.w	r3, r3, #3
 800ada0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ada4:	e07d      	b.n	800aea2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ada6:	6a3a      	ldr	r2, [r7, #32]
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d203      	bcs.n	800adb6 <create_name+0x1da>
 800adae:	69ba      	ldr	r2, [r7, #24]
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d123      	bne.n	800adfe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	2b0b      	cmp	r3, #11
 800adba:	d106      	bne.n	800adca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800adbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adc0:	f043 0303 	orr.w	r3, r3, #3
 800adc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800adc8:	e06f      	b.n	800aeaa <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800adca:	69ba      	ldr	r2, [r7, #24]
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	429a      	cmp	r2, r3
 800add0:	d005      	beq.n	800adde <create_name+0x202>
 800add2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800add6:	f043 0303 	orr.w	r3, r3, #3
 800adda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d860      	bhi.n	800aea8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	61bb      	str	r3, [r7, #24]
 800adea:	2308      	movs	r3, #8
 800adec:	623b      	str	r3, [r7, #32]
 800adee:	230b      	movs	r3, #11
 800adf0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800adf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800adfc:	e051      	b.n	800aea2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800adfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae00:	2b7f      	cmp	r3, #127	; 0x7f
 800ae02:	d914      	bls.n	800ae2e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ae04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae06:	2100      	movs	r1, #0
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f001 fa5f 	bl	800c2cc <ff_convert>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ae12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <create_name+0x246>
 800ae18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae1a:	3b80      	subs	r3, #128	; 0x80
 800ae1c:	4a49      	ldr	r2, [pc, #292]	; (800af44 <create_name+0x368>)
 800ae1e:	5cd3      	ldrb	r3, [r2, r3]
 800ae20:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ae22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae26:	f043 0302 	orr.w	r3, r3, #2
 800ae2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ae2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d007      	beq.n	800ae44 <create_name+0x268>
 800ae34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae36:	4619      	mov	r1, r3
 800ae38:	4843      	ldr	r0, [pc, #268]	; (800af48 <create_name+0x36c>)
 800ae3a:	f7fe fcb1 	bl	80097a0 <chk_chr>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d008      	beq.n	800ae56 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ae44:	235f      	movs	r3, #95	; 0x5f
 800ae46:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ae48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae4c:	f043 0303 	orr.w	r3, r3, #3
 800ae50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae54:	e01b      	b.n	800ae8e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ae56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae58:	2b40      	cmp	r3, #64	; 0x40
 800ae5a:	d909      	bls.n	800ae70 <create_name+0x294>
 800ae5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae5e:	2b5a      	cmp	r3, #90	; 0x5a
 800ae60:	d806      	bhi.n	800ae70 <create_name+0x294>
					b |= 2;
 800ae62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae66:	f043 0302 	orr.w	r3, r3, #2
 800ae6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ae6e:	e00e      	b.n	800ae8e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ae70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae72:	2b60      	cmp	r3, #96	; 0x60
 800ae74:	d90b      	bls.n	800ae8e <create_name+0x2b2>
 800ae76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae78:	2b7a      	cmp	r3, #122	; 0x7a
 800ae7a:	d808      	bhi.n	800ae8e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ae7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae80:	f043 0301 	orr.w	r3, r3, #1
 800ae84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ae88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae8a:	3b20      	subs	r3, #32
 800ae8c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	623a      	str	r2, [r7, #32]
 800ae94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ae96:	b2d1      	uxtb	r1, r2
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	460a      	mov	r2, r1
 800ae9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800aea2:	e763      	b.n	800ad6c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800aea4:	bf00      	nop
 800aea6:	e000      	b.n	800aeaa <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800aea8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aeb0:	2be5      	cmp	r3, #229	; 0xe5
 800aeb2:	d103      	bne.n	800aebc <create_name+0x2e0>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2205      	movs	r2, #5
 800aeb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	2b08      	cmp	r3, #8
 800aec0:	d104      	bne.n	800aecc <create_name+0x2f0>
 800aec2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800aecc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aed0:	f003 030c 	and.w	r3, r3, #12
 800aed4:	2b0c      	cmp	r3, #12
 800aed6:	d005      	beq.n	800aee4 <create_name+0x308>
 800aed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d105      	bne.n	800aef0 <create_name+0x314>
 800aee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aee8:	f043 0302 	orr.w	r3, r3, #2
 800aeec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800aef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aef4:	f003 0302 	and.w	r3, r3, #2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d117      	bne.n	800af2c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800aefc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	2b01      	cmp	r3, #1
 800af06:	d105      	bne.n	800af14 <create_name+0x338>
 800af08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af0c:	f043 0310 	orr.w	r3, r3, #16
 800af10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800af14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af18:	f003 030c 	and.w	r3, r3, #12
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	d105      	bne.n	800af2c <create_name+0x350>
 800af20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af24:	f043 0308 	orr.w	r3, r3, #8
 800af28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800af36:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3728      	adds	r7, #40	; 0x28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	0800e354 	.word	0x0800e354
 800af44:	0800e3fc 	.word	0x0800e3fc
 800af48:	0800e360 	.word	0x0800e360

0800af4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800af60:	e002      	b.n	800af68 <follow_path+0x1c>
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	3301      	adds	r3, #1
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b2f      	cmp	r3, #47	; 0x2f
 800af6e:	d0f8      	beq.n	800af62 <follow_path+0x16>
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b5c      	cmp	r3, #92	; 0x5c
 800af76:	d0f4      	beq.n	800af62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	2200      	movs	r2, #0
 800af7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b1f      	cmp	r3, #31
 800af84:	d80a      	bhi.n	800af9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2280      	movs	r2, #128	; 0x80
 800af8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800af8e:	2100      	movs	r1, #0
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff f8fd 	bl	800a190 <dir_sdi>
 800af96:	4603      	mov	r3, r0
 800af98:	75fb      	strb	r3, [r7, #23]
 800af9a:	e048      	b.n	800b02e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800af9c:	463b      	mov	r3, r7
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7ff fe1b 	bl	800abdc <create_name>
 800afa6:	4603      	mov	r3, r0
 800afa8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800afaa:	7dfb      	ldrb	r3, [r7, #23]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d139      	bne.n	800b024 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7ff fc5b 	bl	800a86c <dir_find>
 800afb6:	4603      	mov	r3, r0
 800afb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afc0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800afc2:	7dfb      	ldrb	r3, [r7, #23]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00a      	beq.n	800afde <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	2b04      	cmp	r3, #4
 800afcc:	d12c      	bne.n	800b028 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	f003 0304 	and.w	r3, r3, #4
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d127      	bne.n	800b028 <follow_path+0xdc>
 800afd8:	2305      	movs	r3, #5
 800afda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800afdc:	e024      	b.n	800b028 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800afde:	7afb      	ldrb	r3, [r7, #11]
 800afe0:	f003 0304 	and.w	r3, r3, #4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d121      	bne.n	800b02c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	799b      	ldrb	r3, [r3, #6]
 800afec:	f003 0310 	and.w	r3, r3, #16
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d102      	bne.n	800affa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800aff4:	2305      	movs	r3, #5
 800aff6:	75fb      	strb	r3, [r7, #23]
 800aff8:	e019      	b.n	800b02e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	8992      	ldrh	r2, [r2, #12]
 800b008:	fbb3 f0f2 	udiv	r0, r3, r2
 800b00c:	fb02 f200 	mul.w	r2, r2, r0
 800b010:	1a9b      	subs	r3, r3, r2
 800b012:	440b      	add	r3, r1
 800b014:	4619      	mov	r1, r3
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f7ff fa60 	bl	800a4dc <ld_clust>
 800b01c:	4602      	mov	r2, r0
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b022:	e7bb      	b.n	800af9c <follow_path+0x50>
			if (res != FR_OK) break;
 800b024:	bf00      	nop
 800b026:	e002      	b.n	800b02e <follow_path+0xe2>
				break;
 800b028:	bf00      	nop
 800b02a:	e000      	b.n	800b02e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b02c:	bf00      	nop
			}
		}
	}

	return res;
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b040:	f04f 33ff 	mov.w	r3, #4294967295
 800b044:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d031      	beq.n	800b0b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	617b      	str	r3, [r7, #20]
 800b054:	e002      	b.n	800b05c <get_ldnumber+0x24>
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	3301      	adds	r3, #1
 800b05a:	617b      	str	r3, [r7, #20]
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	2b1f      	cmp	r3, #31
 800b062:	d903      	bls.n	800b06c <get_ldnumber+0x34>
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	2b3a      	cmp	r3, #58	; 0x3a
 800b06a:	d1f4      	bne.n	800b056 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	2b3a      	cmp	r3, #58	; 0x3a
 800b072:	d11c      	bne.n	800b0ae <get_ldnumber+0x76>
			tp = *path;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	60fa      	str	r2, [r7, #12]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	3b30      	subs	r3, #48	; 0x30
 800b084:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2b09      	cmp	r3, #9
 800b08a:	d80e      	bhi.n	800b0aa <get_ldnumber+0x72>
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	429a      	cmp	r2, r3
 800b092:	d10a      	bne.n	800b0aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d107      	bne.n	800b0aa <get_ldnumber+0x72>
					vol = (int)i;
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	617b      	str	r3, [r7, #20]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	e002      	b.n	800b0b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b0b2:	693b      	ldr	r3, [r7, #16]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	371c      	adds	r7, #28
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	70da      	strb	r2, [r3, #3]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7fe fcf0 	bl	8009ac0 <move_window>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <check_fs+0x2a>
 800b0e6:	2304      	movs	r3, #4
 800b0e8:	e038      	b.n	800b15c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3338      	adds	r3, #56	; 0x38
 800b0ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fe fa70 	bl	80095d8 <ld_word>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b100:	429a      	cmp	r2, r3
 800b102:	d001      	beq.n	800b108 <check_fs+0x48>
 800b104:	2303      	movs	r3, #3
 800b106:	e029      	b.n	800b15c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b10e:	2be9      	cmp	r3, #233	; 0xe9
 800b110:	d009      	beq.n	800b126 <check_fs+0x66>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b118:	2beb      	cmp	r3, #235	; 0xeb
 800b11a:	d11e      	bne.n	800b15a <check_fs+0x9a>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b122:	2b90      	cmp	r3, #144	; 0x90
 800b124:	d119      	bne.n	800b15a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	3338      	adds	r3, #56	; 0x38
 800b12a:	3336      	adds	r3, #54	; 0x36
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fe fa6b 	bl	8009608 <ld_dword>
 800b132:	4603      	mov	r3, r0
 800b134:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b138:	4a0a      	ldr	r2, [pc, #40]	; (800b164 <check_fs+0xa4>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d101      	bne.n	800b142 <check_fs+0x82>
 800b13e:	2300      	movs	r3, #0
 800b140:	e00c      	b.n	800b15c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3338      	adds	r3, #56	; 0x38
 800b146:	3352      	adds	r3, #82	; 0x52
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fe fa5d 	bl	8009608 <ld_dword>
 800b14e:	4602      	mov	r2, r0
 800b150:	4b05      	ldr	r3, [pc, #20]	; (800b168 <check_fs+0xa8>)
 800b152:	429a      	cmp	r2, r3
 800b154:	d101      	bne.n	800b15a <check_fs+0x9a>
 800b156:	2300      	movs	r3, #0
 800b158:	e000      	b.n	800b15c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b15a:	2302      	movs	r3, #2
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	00544146 	.word	0x00544146
 800b168:	33544146 	.word	0x33544146

0800b16c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b096      	sub	sp, #88	; 0x58
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	4613      	mov	r3, r2
 800b178:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2200      	movs	r2, #0
 800b17e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f7ff ff59 	bl	800b038 <get_ldnumber>
 800b186:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	da01      	bge.n	800b192 <find_volume+0x26>
 800b18e:	230b      	movs	r3, #11
 800b190:	e268      	b.n	800b664 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b192:	4ab0      	ldr	r2, [pc, #704]	; (800b454 <find_volume+0x2e8>)
 800b194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b19a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d101      	bne.n	800b1a6 <find_volume+0x3a>
 800b1a2:	230c      	movs	r3, #12
 800b1a4:	e25e      	b.n	800b664 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b1ac:	79fb      	ldrb	r3, [r7, #7]
 800b1ae:	f023 0301 	bic.w	r3, r3, #1
 800b1b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d01a      	beq.n	800b1f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	785b      	ldrb	r3, [r3, #1]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fe f96b 	bl	800949c <disk_status>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b1cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10c      	bne.n	800b1f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b1d8:	79fb      	ldrb	r3, [r7, #7]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d007      	beq.n	800b1ee <find_volume+0x82>
 800b1de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b1e2:	f003 0304 	and.w	r3, r3, #4
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b1ea:	230a      	movs	r3, #10
 800b1ec:	e23a      	b.n	800b664 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e238      	b.n	800b664 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b202:	785b      	ldrb	r3, [r3, #1]
 800b204:	4618      	mov	r0, r3
 800b206:	f7fe f963 	bl	80094d0 <disk_initialize>
 800b20a:	4603      	mov	r3, r0
 800b20c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b21c:	2303      	movs	r3, #3
 800b21e:	e221      	b.n	800b664 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b220:	79fb      	ldrb	r3, [r7, #7]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d007      	beq.n	800b236 <find_volume+0xca>
 800b226:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b22a:	f003 0304 	and.w	r3, r3, #4
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b232:	230a      	movs	r3, #10
 800b234:	e216      	b.n	800b664 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b238:	7858      	ldrb	r0, [r3, #1]
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	330c      	adds	r3, #12
 800b23e:	461a      	mov	r2, r3
 800b240:	2102      	movs	r1, #2
 800b242:	f7fe f9ab 	bl	800959c <disk_ioctl>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <find_volume+0xe4>
 800b24c:	2301      	movs	r3, #1
 800b24e:	e209      	b.n	800b664 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	899b      	ldrh	r3, [r3, #12]
 800b254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b258:	d80d      	bhi.n	800b276 <find_volume+0x10a>
 800b25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25c:	899b      	ldrh	r3, [r3, #12]
 800b25e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b262:	d308      	bcc.n	800b276 <find_volume+0x10a>
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	899b      	ldrh	r3, [r3, #12]
 800b268:	461a      	mov	r2, r3
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	899b      	ldrh	r3, [r3, #12]
 800b26e:	3b01      	subs	r3, #1
 800b270:	4013      	ands	r3, r2
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <find_volume+0x10e>
 800b276:	2301      	movs	r3, #1
 800b278:	e1f4      	b.n	800b664 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b27e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b282:	f7ff ff1d 	bl	800b0c0 <check_fs>
 800b286:	4603      	mov	r3, r0
 800b288:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b28c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b290:	2b02      	cmp	r3, #2
 800b292:	d14b      	bne.n	800b32c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b294:	2300      	movs	r3, #0
 800b296:	643b      	str	r3, [r7, #64]	; 0x40
 800b298:	e01f      	b.n	800b2da <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2a2:	011b      	lsls	r3, r3, #4
 800b2a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b2a8:	4413      	add	r3, r2
 800b2aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d006      	beq.n	800b2c4 <find_volume+0x158>
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fe f9a4 	bl	8009608 <ld_dword>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	e000      	b.n	800b2c6 <find_volume+0x15a>
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b2ce:	440b      	add	r3, r1
 800b2d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	643b      	str	r3, [r7, #64]	; 0x40
 800b2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2dc:	2b03      	cmp	r3, #3
 800b2de:	d9dc      	bls.n	800b29a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b2e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d002      	beq.n	800b2f0 <find_volume+0x184>
 800b2ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b2f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b2fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b302:	2b00      	cmp	r3, #0
 800b304:	d005      	beq.n	800b312 <find_volume+0x1a6>
 800b306:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b308:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b30a:	f7ff fed9 	bl	800b0c0 <check_fs>
 800b30e:	4603      	mov	r3, r0
 800b310:	e000      	b.n	800b314 <find_volume+0x1a8>
 800b312:	2303      	movs	r3, #3
 800b314:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d905      	bls.n	800b32c <find_volume+0x1c0>
 800b320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b322:	3301      	adds	r3, #1
 800b324:	643b      	str	r3, [r7, #64]	; 0x40
 800b326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d9e1      	bls.n	800b2f0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b32c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b330:	2b04      	cmp	r3, #4
 800b332:	d101      	bne.n	800b338 <find_volume+0x1cc>
 800b334:	2301      	movs	r3, #1
 800b336:	e195      	b.n	800b664 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b338:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d901      	bls.n	800b344 <find_volume+0x1d8>
 800b340:	230d      	movs	r3, #13
 800b342:	e18f      	b.n	800b664 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b346:	3338      	adds	r3, #56	; 0x38
 800b348:	330b      	adds	r3, #11
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe f944 	bl	80095d8 <ld_word>
 800b350:	4603      	mov	r3, r0
 800b352:	461a      	mov	r2, r3
 800b354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b356:	899b      	ldrh	r3, [r3, #12]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d001      	beq.n	800b360 <find_volume+0x1f4>
 800b35c:	230d      	movs	r3, #13
 800b35e:	e181      	b.n	800b664 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b362:	3338      	adds	r3, #56	; 0x38
 800b364:	3316      	adds	r3, #22
 800b366:	4618      	mov	r0, r3
 800b368:	f7fe f936 	bl	80095d8 <ld_word>
 800b36c:	4603      	mov	r3, r0
 800b36e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b372:	2b00      	cmp	r3, #0
 800b374:	d106      	bne.n	800b384 <find_volume+0x218>
 800b376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b378:	3338      	adds	r3, #56	; 0x38
 800b37a:	3324      	adds	r3, #36	; 0x24
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fe f943 	bl	8009608 <ld_dword>
 800b382:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b388:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b396:	789b      	ldrb	r3, [r3, #2]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d005      	beq.n	800b3a8 <find_volume+0x23c>
 800b39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39e:	789b      	ldrb	r3, [r3, #2]
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d001      	beq.n	800b3a8 <find_volume+0x23c>
 800b3a4:	230d      	movs	r3, #13
 800b3a6:	e15d      	b.n	800b664 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	789b      	ldrb	r3, [r3, #2]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b0:	fb02 f303 	mul.w	r3, r2, r3
 800b3b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c4:	895b      	ldrh	r3, [r3, #10]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d008      	beq.n	800b3dc <find_volume+0x270>
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3cc:	895b      	ldrh	r3, [r3, #10]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	895b      	ldrh	r3, [r3, #10]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <find_volume+0x274>
 800b3dc:	230d      	movs	r3, #13
 800b3de:	e141      	b.n	800b664 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e2:	3338      	adds	r3, #56	; 0x38
 800b3e4:	3311      	adds	r3, #17
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe f8f6 	bl	80095d8 <ld_word>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	891b      	ldrh	r3, [r3, #8]
 800b3f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3fa:	8992      	ldrh	r2, [r2, #12]
 800b3fc:	0952      	lsrs	r2, r2, #5
 800b3fe:	b292      	uxth	r2, r2
 800b400:	fbb3 f1f2 	udiv	r1, r3, r2
 800b404:	fb02 f201 	mul.w	r2, r2, r1
 800b408:	1a9b      	subs	r3, r3, r2
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d001      	beq.n	800b414 <find_volume+0x2a8>
 800b410:	230d      	movs	r3, #13
 800b412:	e127      	b.n	800b664 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	3338      	adds	r3, #56	; 0x38
 800b418:	3313      	adds	r3, #19
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fe f8dc 	bl	80095d8 <ld_word>
 800b420:	4603      	mov	r3, r0
 800b422:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b426:	2b00      	cmp	r3, #0
 800b428:	d106      	bne.n	800b438 <find_volume+0x2cc>
 800b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42c:	3338      	adds	r3, #56	; 0x38
 800b42e:	3320      	adds	r3, #32
 800b430:	4618      	mov	r0, r3
 800b432:	f7fe f8e9 	bl	8009608 <ld_dword>
 800b436:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	3338      	adds	r3, #56	; 0x38
 800b43c:	330e      	adds	r3, #14
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe f8ca 	bl	80095d8 <ld_word>
 800b444:	4603      	mov	r3, r0
 800b446:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d104      	bne.n	800b458 <find_volume+0x2ec>
 800b44e:	230d      	movs	r3, #13
 800b450:	e108      	b.n	800b664 <find_volume+0x4f8>
 800b452:	bf00      	nop
 800b454:	20000448 	.word	0x20000448

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b458:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b45c:	4413      	add	r3, r2
 800b45e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b460:	8911      	ldrh	r1, [r2, #8]
 800b462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b464:	8992      	ldrh	r2, [r2, #12]
 800b466:	0952      	lsrs	r2, r2, #5
 800b468:	b292      	uxth	r2, r2
 800b46a:	fbb1 f2f2 	udiv	r2, r1, r2
 800b46e:	b292      	uxth	r2, r2
 800b470:	4413      	add	r3, r2
 800b472:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	429a      	cmp	r2, r3
 800b47a:	d201      	bcs.n	800b480 <find_volume+0x314>
 800b47c:	230d      	movs	r3, #13
 800b47e:	e0f1      	b.n	800b664 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b488:	8952      	ldrh	r2, [r2, #10]
 800b48a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b48e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <find_volume+0x32e>
 800b496:	230d      	movs	r3, #13
 800b498:	e0e4      	b.n	800b664 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800b49a:	2303      	movs	r3, #3
 800b49c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d802      	bhi.n	800b4b0 <find_volume+0x344>
 800b4aa:	2302      	movs	r3, #2
 800b4ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d802      	bhi.n	800b4c0 <find_volume+0x354>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	1c9a      	adds	r2, r3, #2
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4cc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b4ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d2:	441a      	add	r2, r3
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b4d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4dc:	441a      	add	r2, r3
 800b4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b4e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	d11e      	bne.n	800b528 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ec:	3338      	adds	r3, #56	; 0x38
 800b4ee:	332a      	adds	r3, #42	; 0x2a
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7fe f871 	bl	80095d8 <ld_word>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d001      	beq.n	800b500 <find_volume+0x394>
 800b4fc:	230d      	movs	r3, #13
 800b4fe:	e0b1      	b.n	800b664 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b502:	891b      	ldrh	r3, [r3, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d001      	beq.n	800b50c <find_volume+0x3a0>
 800b508:	230d      	movs	r3, #13
 800b50a:	e0ab      	b.n	800b664 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50e:	3338      	adds	r3, #56	; 0x38
 800b510:	332c      	adds	r3, #44	; 0x2c
 800b512:	4618      	mov	r0, r3
 800b514:	f7fe f878 	bl	8009608 <ld_dword>
 800b518:	4602      	mov	r2, r0
 800b51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b520:	69db      	ldr	r3, [r3, #28]
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	647b      	str	r3, [r7, #68]	; 0x44
 800b526:	e01f      	b.n	800b568 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52a:	891b      	ldrh	r3, [r3, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d101      	bne.n	800b534 <find_volume+0x3c8>
 800b530:	230d      	movs	r3, #13
 800b532:	e097      	b.n	800b664 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b53a:	441a      	add	r2, r3
 800b53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b544:	2b02      	cmp	r3, #2
 800b546:	d103      	bne.n	800b550 <find_volume+0x3e4>
 800b548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54a:	69db      	ldr	r3, [r3, #28]
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	e00a      	b.n	800b566 <find_volume+0x3fa>
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	69da      	ldr	r2, [r3, #28]
 800b554:	4613      	mov	r3, r2
 800b556:	005b      	lsls	r3, r3, #1
 800b558:	4413      	add	r3, r2
 800b55a:	085a      	lsrs	r2, r3, #1
 800b55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55e:	69db      	ldr	r3, [r3, #28]
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b566:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56a:	6a1a      	ldr	r2, [r3, #32]
 800b56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56e:	899b      	ldrh	r3, [r3, #12]
 800b570:	4619      	mov	r1, r3
 800b572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b574:	440b      	add	r3, r1
 800b576:	3b01      	subs	r3, #1
 800b578:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b57a:	8989      	ldrh	r1, [r1, #12]
 800b57c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b580:	429a      	cmp	r2, r3
 800b582:	d201      	bcs.n	800b588 <find_volume+0x41c>
 800b584:	230d      	movs	r3, #13
 800b586:	e06d      	b.n	800b664 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58a:	f04f 32ff 	mov.w	r2, #4294967295
 800b58e:	619a      	str	r2, [r3, #24]
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	699a      	ldr	r2, [r3, #24]
 800b594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b596:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	2280      	movs	r2, #128	; 0x80
 800b59c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b59e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5a2:	2b03      	cmp	r3, #3
 800b5a4:	d149      	bne.n	800b63a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a8:	3338      	adds	r3, #56	; 0x38
 800b5aa:	3330      	adds	r3, #48	; 0x30
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fe f813 	bl	80095d8 <ld_word>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d140      	bne.n	800b63a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b5b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b5c0:	f7fe fa7e 	bl	8009ac0 <move_window>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d137      	bne.n	800b63a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d2:	3338      	adds	r3, #56	; 0x38
 800b5d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fd fffd 	bl	80095d8 <ld_word>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d127      	bne.n	800b63a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	3338      	adds	r3, #56	; 0x38
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe f80a 	bl	8009608 <ld_dword>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	4b1d      	ldr	r3, [pc, #116]	; (800b66c <find_volume+0x500>)
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d11e      	bne.n	800b63a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	3338      	adds	r3, #56	; 0x38
 800b600:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b604:	4618      	mov	r0, r3
 800b606:	f7fd ffff 	bl	8009608 <ld_dword>
 800b60a:	4602      	mov	r2, r0
 800b60c:	4b18      	ldr	r3, [pc, #96]	; (800b670 <find_volume+0x504>)
 800b60e:	429a      	cmp	r2, r3
 800b610:	d113      	bne.n	800b63a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	3338      	adds	r3, #56	; 0x38
 800b616:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fd fff4 	bl	8009608 <ld_dword>
 800b620:	4602      	mov	r2, r0
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	3338      	adds	r3, #56	; 0x38
 800b62a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fd ffea 	bl	8009608 <ld_dword>
 800b634:	4602      	mov	r2, r0
 800b636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b638:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b640:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b642:	4b0c      	ldr	r3, [pc, #48]	; (800b674 <find_volume+0x508>)
 800b644:	881b      	ldrh	r3, [r3, #0]
 800b646:	3301      	adds	r3, #1
 800b648:	b29a      	uxth	r2, r3
 800b64a:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <find_volume+0x508>)
 800b64c:	801a      	strh	r2, [r3, #0]
 800b64e:	4b09      	ldr	r3, [pc, #36]	; (800b674 <find_volume+0x508>)
 800b650:	881a      	ldrh	r2, [r3, #0]
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b658:	4a07      	ldr	r2, [pc, #28]	; (800b678 <find_volume+0x50c>)
 800b65a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b65c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b65e:	f7fe f9c7 	bl	80099f0 <clear_lock>
#endif
	return FR_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3758      	adds	r7, #88	; 0x58
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	41615252 	.word	0x41615252
 800b670:	61417272 	.word	0x61417272
 800b674:	2000044c 	.word	0x2000044c
 800b678:	20000470 	.word	0x20000470

0800b67c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b686:	2309      	movs	r3, #9
 800b688:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d01c      	beq.n	800b6ca <validate+0x4e>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d018      	beq.n	800b6ca <validate+0x4e>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d013      	beq.n	800b6ca <validate+0x4e>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	889a      	ldrh	r2, [r3, #4]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	88db      	ldrh	r3, [r3, #6]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d10c      	bne.n	800b6ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	785b      	ldrb	r3, [r3, #1]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fd fef0 	bl	800949c <disk_status>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	f003 0301 	and.w	r3, r3, #1
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d101      	bne.n	800b6ca <validate+0x4e>
			res = FR_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b6ca:	7bfb      	ldrb	r3, [r7, #15]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <validate+0x5a>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	e000      	b.n	800b6d8 <validate+0x5c>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	6013      	str	r3, [r2, #0]
	return res;
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
	...

0800b6e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b088      	sub	sp, #32
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b6fa:	f107 0310 	add.w	r3, r7, #16
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7ff fc9a 	bl	800b038 <get_ldnumber>
 800b704:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	da01      	bge.n	800b710 <f_mount+0x28>
 800b70c:	230b      	movs	r3, #11
 800b70e:	e02b      	b.n	800b768 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b710:	4a17      	ldr	r2, [pc, #92]	; (800b770 <f_mount+0x88>)
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b718:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d005      	beq.n	800b72c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b720:	69b8      	ldr	r0, [r7, #24]
 800b722:	f7fe f965 	bl	80099f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	2200      	movs	r2, #0
 800b72a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	490d      	ldr	r1, [pc, #52]	; (800b770 <f_mount+0x88>)
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d002      	beq.n	800b74e <f_mount+0x66>
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d001      	beq.n	800b752 <f_mount+0x6a>
 800b74e:	2300      	movs	r3, #0
 800b750:	e00a      	b.n	800b768 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b752:	f107 010c 	add.w	r1, r7, #12
 800b756:	f107 0308 	add.w	r3, r7, #8
 800b75a:	2200      	movs	r2, #0
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7ff fd05 	bl	800b16c <find_volume>
 800b762:	4603      	mov	r3, r0
 800b764:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b766:	7dfb      	ldrb	r3, [r7, #23]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3720      	adds	r7, #32
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20000448 	.word	0x20000448

0800b774 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b09a      	sub	sp, #104	; 0x68
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	4613      	mov	r3, r2
 800b780:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <f_open+0x18>
 800b788:	2309      	movs	r3, #9
 800b78a:	e1bb      	b.n	800bb04 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b792:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b794:	79fa      	ldrb	r2, [r7, #7]
 800b796:	f107 0114 	add.w	r1, r7, #20
 800b79a:	f107 0308 	add.w	r3, r7, #8
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff fce4 	bl	800b16c <find_volume>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b7aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f040 819f 	bne.w	800baf2 <f_open+0x37e>
		dj.obj.fs = fs;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	f107 0318 	add.w	r3, r7, #24
 800b7be:	4611      	mov	r1, r2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7ff fbc3 	bl	800af4c <follow_path>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b7cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d11a      	bne.n	800b80a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b7d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b7d8:	b25b      	sxtb	r3, r3
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	da03      	bge.n	800b7e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b7de:	2306      	movs	r3, #6
 800b7e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b7e4:	e011      	b.n	800b80a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	f023 0301 	bic.w	r3, r3, #1
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	bf14      	ite	ne
 800b7f0:	2301      	movne	r3, #1
 800b7f2:	2300      	moveq	r3, #0
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f107 0318 	add.w	r3, r7, #24
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fd ffea 	bl	80097d8 <chk_lock>
 800b804:	4603      	mov	r3, r0
 800b806:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b80a:	79fb      	ldrb	r3, [r7, #7]
 800b80c:	f003 031c 	and.w	r3, r3, #28
 800b810:	2b00      	cmp	r3, #0
 800b812:	d07f      	beq.n	800b914 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b814:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d017      	beq.n	800b84c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b81c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b820:	2b04      	cmp	r3, #4
 800b822:	d10e      	bne.n	800b842 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b824:	f7fe f834 	bl	8009890 <enq_lock>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d006      	beq.n	800b83c <f_open+0xc8>
 800b82e:	f107 0318 	add.w	r3, r7, #24
 800b832:	4618      	mov	r0, r3
 800b834:	f7ff f8da 	bl	800a9ec <dir_register>
 800b838:	4603      	mov	r3, r0
 800b83a:	e000      	b.n	800b83e <f_open+0xca>
 800b83c:	2312      	movs	r3, #18
 800b83e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b842:	79fb      	ldrb	r3, [r7, #7]
 800b844:	f043 0308 	orr.w	r3, r3, #8
 800b848:	71fb      	strb	r3, [r7, #7]
 800b84a:	e010      	b.n	800b86e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b84c:	7fbb      	ldrb	r3, [r7, #30]
 800b84e:	f003 0311 	and.w	r3, r3, #17
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <f_open+0xea>
					res = FR_DENIED;
 800b856:	2307      	movs	r3, #7
 800b858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b85c:	e007      	b.n	800b86e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b85e:	79fb      	ldrb	r3, [r7, #7]
 800b860:	f003 0304 	and.w	r3, r3, #4
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <f_open+0xfa>
 800b868:	2308      	movs	r3, #8
 800b86a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b86e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b872:	2b00      	cmp	r3, #0
 800b874:	d168      	bne.n	800b948 <f_open+0x1d4>
 800b876:	79fb      	ldrb	r3, [r7, #7]
 800b878:	f003 0308 	and.w	r3, r3, #8
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d063      	beq.n	800b948 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b880:	f7fc f9a2 	bl	8007bc8 <get_fattime>
 800b884:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b888:	330e      	adds	r3, #14
 800b88a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fd fef9 	bl	8009684 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	3316      	adds	r3, #22
 800b896:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b898:	4618      	mov	r0, r3
 800b89a:	f7fd fef3 	bl	8009684 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	330b      	adds	r3, #11
 800b8a2:	2220      	movs	r2, #32
 800b8a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fe fe15 	bl	800a4dc <ld_clust>
 800b8b2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe fe2d 	bl	800a51a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	331c      	adds	r3, #28
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fd fedc 	bl	8009684 <st_dword>
					fs->wflag = 1;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b8d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d037      	beq.n	800b948 <f_open+0x1d4>
						dw = fs->winsect;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8dc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b8de:	f107 0318 	add.w	r3, r7, #24
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe fb1d 	bl	8009f26 <remove_chain>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b8f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d126      	bne.n	800b948 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe f8de 	bl	8009ac0 <move_window>
 800b904:	4603      	mov	r3, r0
 800b906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b90e:	3a01      	subs	r2, #1
 800b910:	615a      	str	r2, [r3, #20]
 800b912:	e019      	b.n	800b948 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b914:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d115      	bne.n	800b948 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b91c:	7fbb      	ldrb	r3, [r7, #30]
 800b91e:	f003 0310 	and.w	r3, r3, #16
 800b922:	2b00      	cmp	r3, #0
 800b924:	d003      	beq.n	800b92e <f_open+0x1ba>
					res = FR_NO_FILE;
 800b926:	2304      	movs	r3, #4
 800b928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b92c:	e00c      	b.n	800b948 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	f003 0302 	and.w	r3, r3, #2
 800b934:	2b00      	cmp	r3, #0
 800b936:	d007      	beq.n	800b948 <f_open+0x1d4>
 800b938:	7fbb      	ldrb	r3, [r7, #30]
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d002      	beq.n	800b948 <f_open+0x1d4>
						res = FR_DENIED;
 800b942:	2307      	movs	r3, #7
 800b944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b948:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d128      	bne.n	800b9a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b950:	79fb      	ldrb	r3, [r7, #7]
 800b952:	f003 0308 	and.w	r3, r3, #8
 800b956:	2b00      	cmp	r3, #0
 800b958:	d003      	beq.n	800b962 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b95a:	79fb      	ldrb	r3, [r7, #7]
 800b95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b960:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b96a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	f023 0301 	bic.w	r3, r3, #1
 800b976:	2b00      	cmp	r3, #0
 800b978:	bf14      	ite	ne
 800b97a:	2301      	movne	r3, #1
 800b97c:	2300      	moveq	r3, #0
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	461a      	mov	r2, r3
 800b982:	f107 0318 	add.w	r3, r7, #24
 800b986:	4611      	mov	r1, r2
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fd ffa3 	bl	80098d4 <inc_lock>
 800b98e:	4602      	mov	r2, r0
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d102      	bne.n	800b9a2 <f_open+0x22e>
 800b99c:	2302      	movs	r3, #2
 800b99e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b9a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f040 80a3 	bne.w	800baf2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fe fd92 	bl	800a4dc <ld_clust>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c0:	331c      	adds	r3, #28
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fd fe20 	bl	8009608 <ld_dword>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	88da      	ldrh	r2, [r3, #6]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	79fa      	ldrb	r2, [r7, #7]
 800b9e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3330      	adds	r3, #48	; 0x30
 800b9fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba02:	2100      	movs	r1, #0
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fd fe8a 	bl	800971e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ba0a:	79fb      	ldrb	r3, [r7, #7]
 800ba0c:	f003 0320 	and.w	r3, r3, #32
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d06e      	beq.n	800baf2 <f_open+0x37e>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d06a      	beq.n	800baf2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	895b      	ldrh	r3, [r3, #10]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	899b      	ldrh	r3, [r3, #12]
 800ba2e:	fb03 f302 	mul.w	r3, r3, r2
 800ba32:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba40:	e016      	b.n	800ba70 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe f886 	bl	8009b58 <get_fat>
 800ba4c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ba4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d802      	bhi.n	800ba5a <f_open+0x2e6>
 800ba54:	2302      	movs	r3, #2
 800ba56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ba5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba60:	d102      	bne.n	800ba68 <f_open+0x2f4>
 800ba62:	2301      	movs	r3, #1
 800ba64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d103      	bne.n	800ba80 <f_open+0x30c>
 800ba78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d8e0      	bhi.n	800ba42 <f_open+0x2ce>
				}
				fp->clust = clst;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ba86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d131      	bne.n	800baf2 <f_open+0x37e>
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	899b      	ldrh	r3, [r3, #12]
 800ba92:	461a      	mov	r2, r3
 800ba94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba96:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba9a:	fb02 f201 	mul.w	r2, r2, r1
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d026      	beq.n	800baf2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe f836 	bl	8009b1a <clust2sect>
 800baae:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d103      	bne.n	800babe <f_open+0x34a>
						res = FR_INT_ERR;
 800bab6:	2302      	movs	r3, #2
 800bab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800babc:	e019      	b.n	800baf2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	899b      	ldrh	r3, [r3, #12]
 800bac2:	461a      	mov	r2, r3
 800bac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bac6:	fbb3 f2f2 	udiv	r2, r3, r2
 800baca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bacc:	441a      	add	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	7858      	ldrb	r0, [r3, #1]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6a1a      	ldr	r2, [r3, #32]
 800bae0:	2301      	movs	r3, #1
 800bae2:	f7fd fd1b 	bl	800951c <disk_read>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <f_open+0x37e>
 800baec:	2301      	movs	r3, #1
 800baee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800baf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d002      	beq.n	800bb00 <f_open+0x38c>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3768      	adds	r7, #104	; 0x68
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08e      	sub	sp, #56	; 0x38
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
 800bb18:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2200      	movs	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f107 0214 	add.w	r2, r7, #20
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7ff fda5 	bl	800b67c <validate>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d107      	bne.n	800bb50 <f_read+0x44>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	7d5b      	ldrb	r3, [r3, #21]
 800bb44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bb48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <f_read+0x4a>
 800bb50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb54:	e135      	b.n	800bdc2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	7d1b      	ldrb	r3, [r3, #20]
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <f_read+0x5a>
 800bb62:	2307      	movs	r3, #7
 800bb64:	e12d      	b.n	800bdc2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	68da      	ldr	r2, [r3, #12]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	6a3b      	ldr	r3, [r7, #32]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	f240 811e 	bls.w	800bdb8 <f_read+0x2ac>
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bb80:	e11a      	b.n	800bdb8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	8992      	ldrh	r2, [r2, #12]
 800bb8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb8e:	fb02 f201 	mul.w	r2, r2, r1
 800bb92:	1a9b      	subs	r3, r3, r2
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f040 80d5 	bne.w	800bd44 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	8992      	ldrh	r2, [r2, #12]
 800bba2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	8952      	ldrh	r2, [r2, #10]
 800bbaa:	3a01      	subs	r2, #1
 800bbac:	4013      	ands	r3, r2
 800bbae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d12f      	bne.n	800bc16 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d103      	bne.n	800bbc6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	633b      	str	r3, [r7, #48]	; 0x30
 800bbc4:	e013      	b.n	800bbee <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d007      	beq.n	800bbde <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	699b      	ldr	r3, [r3, #24]
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f7fe faa3 	bl	800a120 <clmt_clust>
 800bbda:	6338      	str	r0, [r7, #48]	; 0x30
 800bbdc:	e007      	b.n	800bbee <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	69db      	ldr	r3, [r3, #28]
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	f7fd ffb6 	bl	8009b58 <get_fat>
 800bbec:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d804      	bhi.n	800bbfe <f_read+0xf2>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	755a      	strb	r2, [r3, #21]
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e0e1      	b.n	800bdc2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc04:	d104      	bne.n	800bc10 <f_read+0x104>
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	755a      	strb	r2, [r3, #21]
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e0d8      	b.n	800bdc2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	69db      	ldr	r3, [r3, #28]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	f7fd ff7b 	bl	8009b1a <clust2sect>
 800bc24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d104      	bne.n	800bc36 <f_read+0x12a>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	755a      	strb	r2, [r3, #21]
 800bc32:	2302      	movs	r3, #2
 800bc34:	e0c5      	b.n	800bdc2 <f_read+0x2b6>
			sect += csect;
 800bc36:	69ba      	ldr	r2, [r7, #24]
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	899b      	ldrh	r3, [r3, #12]
 800bc42:	461a      	mov	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc4a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d041      	beq.n	800bcd6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc52:	69fa      	ldr	r2, [r7, #28]
 800bc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc56:	4413      	add	r3, r2
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	8952      	ldrh	r2, [r2, #10]
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d905      	bls.n	800bc6c <f_read+0x160>
					cc = fs->csize - csect;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	895b      	ldrh	r3, [r3, #10]
 800bc64:	461a      	mov	r2, r3
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	1ad3      	subs	r3, r2, r3
 800bc6a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	7858      	ldrb	r0, [r3, #1]
 800bc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc76:	f7fd fc51 	bl	800951c <disk_read>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d004      	beq.n	800bc8a <f_read+0x17e>
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2201      	movs	r2, #1
 800bc84:	755a      	strb	r2, [r3, #21]
 800bc86:	2301      	movs	r3, #1
 800bc88:	e09b      	b.n	800bdc2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	7d1b      	ldrb	r3, [r3, #20]
 800bc8e:	b25b      	sxtb	r3, r3
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	da18      	bge.n	800bcc6 <f_read+0x1ba>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6a1a      	ldr	r2, [r3, #32]
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d911      	bls.n	800bcc6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6a1a      	ldr	r2, [r3, #32]
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	8992      	ldrh	r2, [r2, #12]
 800bcae:	fb02 f303 	mul.w	r3, r2, r3
 800bcb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb4:	18d0      	adds	r0, r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	899b      	ldrh	r3, [r3, #12]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	f7fd fd0b 	bl	80096dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	899b      	ldrh	r3, [r3, #12]
 800bcca:	461a      	mov	r2, r3
 800bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcce:	fb02 f303 	mul.w	r3, r2, r3
 800bcd2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bcd4:	e05c      	b.n	800bd90 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	69ba      	ldr	r2, [r7, #24]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d02e      	beq.n	800bd3e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	7d1b      	ldrb	r3, [r3, #20]
 800bce4:	b25b      	sxtb	r3, r3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	da18      	bge.n	800bd1c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	7858      	ldrb	r0, [r3, #1]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6a1a      	ldr	r2, [r3, #32]
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f7fd fc2f 	bl	800955c <disk_write>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d004      	beq.n	800bd0e <f_read+0x202>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2201      	movs	r2, #1
 800bd08:	755a      	strb	r2, [r3, #21]
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e059      	b.n	800bdc2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	7d1b      	ldrb	r3, [r3, #20]
 800bd12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	7858      	ldrb	r0, [r3, #1]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd26:	2301      	movs	r3, #1
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	f7fd fbf7 	bl	800951c <disk_read>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d004      	beq.n	800bd3e <f_read+0x232>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2201      	movs	r2, #1
 800bd38:	755a      	strb	r2, [r3, #21]
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e041      	b.n	800bdc2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	69ba      	ldr	r2, [r7, #24]
 800bd42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	899b      	ldrh	r3, [r3, #12]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	8992      	ldrh	r2, [r2, #12]
 800bd52:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd56:	fb02 f201 	mul.w	r2, r2, r1
 800bd5a:	1a9b      	subs	r3, r3, r2
 800bd5c:	1ac3      	subs	r3, r0, r3
 800bd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bd60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d901      	bls.n	800bd6c <f_read+0x260>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	699b      	ldr	r3, [r3, #24]
 800bd76:	697a      	ldr	r2, [r7, #20]
 800bd78:	8992      	ldrh	r2, [r2, #12]
 800bd7a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd7e:	fb02 f200 	mul.w	r2, r2, r0
 800bd82:	1a9b      	subs	r3, r3, r2
 800bd84:	440b      	add	r3, r1
 800bd86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd88:	4619      	mov	r1, r3
 800bd8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd8c:	f7fd fca6 	bl	80096dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bd90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd94:	4413      	add	r3, r2
 800bd96:	627b      	str	r3, [r7, #36]	; 0x24
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	699a      	ldr	r2, [r3, #24]
 800bd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9e:	441a      	add	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	619a      	str	r2, [r3, #24]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	441a      	add	r2, r3
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	601a      	str	r2, [r3, #0]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f47f aee1 	bne.w	800bb82 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3738      	adds	r7, #56	; 0x38
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b090      	sub	sp, #64	; 0x40
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f107 0208 	add.w	r2, r7, #8
 800bdda:	4611      	mov	r1, r2
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7ff fc4d 	bl	800b67c <validate>
 800bde2:	4603      	mov	r3, r0
 800bde4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bde8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d103      	bne.n	800bdf8 <f_lseek+0x2e>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	7d5b      	ldrb	r3, [r3, #21]
 800bdf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bdf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <f_lseek+0x3c>
 800be00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be04:	e201      	b.n	800c20a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f000 80d9 	beq.w	800bfc2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be16:	d15a      	bne.n	800bece <f_lseek+0x104>
			tbl = fp->cltbl;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800be1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be20:	1d1a      	adds	r2, r3, #4
 800be22:	627a      	str	r2, [r7, #36]	; 0x24
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	617b      	str	r3, [r7, #20]
 800be28:	2302      	movs	r3, #2
 800be2a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	2b00      	cmp	r3, #0
 800be36:	d03a      	beq.n	800beae <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	613b      	str	r3, [r7, #16]
 800be3c:	2300      	movs	r3, #0
 800be3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be42:	3302      	adds	r3, #2
 800be44:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800be46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4c:	3301      	adds	r3, #1
 800be4e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be54:	4618      	mov	r0, r3
 800be56:	f7fd fe7f 	bl	8009b58 <get_fat>
 800be5a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d804      	bhi.n	800be6c <f_lseek+0xa2>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2202      	movs	r2, #2
 800be66:	755a      	strb	r2, [r3, #21]
 800be68:	2302      	movs	r3, #2
 800be6a:	e1ce      	b.n	800c20a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be72:	d104      	bne.n	800be7e <f_lseek+0xb4>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2201      	movs	r2, #1
 800be78:	755a      	strb	r2, [r3, #21]
 800be7a:	2301      	movs	r3, #1
 800be7c:	e1c5      	b.n	800c20a <f_lseek+0x440>
					} while (cl == pcl + 1);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3301      	adds	r3, #1
 800be82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be84:	429a      	cmp	r2, r3
 800be86:	d0de      	beq.n	800be46 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800be88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d809      	bhi.n	800bea4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be92:	1d1a      	adds	r2, r3, #4
 800be94:	627a      	str	r2, [r7, #36]	; 0x24
 800be96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	1d1a      	adds	r2, r3, #4
 800be9e:	627a      	str	r2, [r7, #36]	; 0x24
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	69db      	ldr	r3, [r3, #28]
 800bea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beaa:	429a      	cmp	r2, r3
 800beac:	d3c4      	bcc.n	800be38 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beb4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800beb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d803      	bhi.n	800bec6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800bebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec0:	2200      	movs	r2, #0
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	e19f      	b.n	800c206 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bec6:	2311      	movs	r3, #17
 800bec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800becc:	e19b      	b.n	800c206 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d902      	bls.n	800bede <f_lseek+0x114>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f000 818d 	beq.w	800c206 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	3b01      	subs	r3, #1
 800bef0:	4619      	mov	r1, r3
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7fe f914 	bl	800a120 <clmt_clust>
 800bef8:	4602      	mov	r2, r0
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	69db      	ldr	r3, [r3, #28]
 800bf04:	4619      	mov	r1, r3
 800bf06:	4610      	mov	r0, r2
 800bf08:	f7fd fe07 	bl	8009b1a <clust2sect>
 800bf0c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d104      	bne.n	800bf1e <f_lseek+0x154>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	755a      	strb	r2, [r3, #21]
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	e175      	b.n	800c20a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	8992      	ldrh	r2, [r2, #12]
 800bf26:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	8952      	ldrh	r2, [r2, #10]
 800bf2e:	3a01      	subs	r2, #1
 800bf30:	4013      	ands	r3, r2
 800bf32:	69ba      	ldr	r2, [r7, #24]
 800bf34:	4413      	add	r3, r2
 800bf36:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	8992      	ldrh	r2, [r2, #12]
 800bf40:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf44:	fb02 f201 	mul.w	r2, r2, r1
 800bf48:	1a9b      	subs	r3, r3, r2
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 815b 	beq.w	800c206 <f_lseek+0x43c>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a1b      	ldr	r3, [r3, #32]
 800bf54:	69ba      	ldr	r2, [r7, #24]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	f000 8155 	beq.w	800c206 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	7d1b      	ldrb	r3, [r3, #20]
 800bf60:	b25b      	sxtb	r3, r3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	da18      	bge.n	800bf98 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	7858      	ldrb	r0, [r3, #1]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a1a      	ldr	r2, [r3, #32]
 800bf74:	2301      	movs	r3, #1
 800bf76:	f7fd faf1 	bl	800955c <disk_write>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d004      	beq.n	800bf8a <f_lseek+0x1c0>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	755a      	strb	r2, [r3, #21]
 800bf86:	2301      	movs	r3, #1
 800bf88:	e13f      	b.n	800c20a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	7d1b      	ldrb	r3, [r3, #20]
 800bf8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	7858      	ldrb	r0, [r3, #1]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	69ba      	ldr	r2, [r7, #24]
 800bfa6:	f7fd fab9 	bl	800951c <disk_read>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d004      	beq.n	800bfba <f_lseek+0x1f0>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	755a      	strb	r2, [r3, #21]
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e127      	b.n	800c20a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	69ba      	ldr	r2, [r7, #24]
 800bfbe:	621a      	str	r2, [r3, #32]
 800bfc0:	e121      	b.n	800c206 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d908      	bls.n	800bfde <f_lseek+0x214>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	7d1b      	ldrb	r3, [r3, #20]
 800bfd0:	f003 0302 	and.w	r3, r3, #2
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d102      	bne.n	800bfde <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	699b      	ldr	r3, [r3, #24]
 800bfe2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfec:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f000 80b5 	beq.w	800c160 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	895b      	ldrh	r3, [r3, #10]
 800bffa:	461a      	mov	r2, r3
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	899b      	ldrh	r3, [r3, #12]
 800c000:	fb03 f302 	mul.w	r3, r3, r2
 800c004:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c006:	6a3b      	ldr	r3, [r7, #32]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d01b      	beq.n	800c044 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	1e5a      	subs	r2, r3, #1
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	fbb2 f2f3 	udiv	r2, r2, r3
 800c016:	6a3b      	ldr	r3, [r7, #32]
 800c018:	1e59      	subs	r1, r3, #1
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c020:	429a      	cmp	r2, r3
 800c022:	d30f      	bcc.n	800c044 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	1e5a      	subs	r2, r3, #1
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	425b      	negs	r3, r3
 800c02c:	401a      	ands	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	69db      	ldr	r3, [r3, #28]
 800c040:	63bb      	str	r3, [r7, #56]	; 0x38
 800c042:	e022      	b.n	800c08a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d119      	bne.n	800c084 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2100      	movs	r1, #0
 800c054:	4618      	mov	r0, r3
 800c056:	f7fd ffcb 	bl	8009ff0 <create_chain>
 800c05a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d104      	bne.n	800c06c <f_lseek+0x2a2>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2202      	movs	r2, #2
 800c066:	755a      	strb	r2, [r3, #21]
 800c068:	2302      	movs	r3, #2
 800c06a:	e0ce      	b.n	800c20a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c072:	d104      	bne.n	800c07e <f_lseek+0x2b4>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2201      	movs	r2, #1
 800c078:	755a      	strb	r2, [r3, #21]
 800c07a:	2301      	movs	r3, #1
 800c07c:	e0c5      	b.n	800c20a <f_lseek+0x440>
					fp->obj.sclust = clst;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c082:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c088:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d067      	beq.n	800c160 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800c090:	e03a      	b.n	800c108 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	603b      	str	r3, [r7, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	699a      	ldr	r2, [r3, #24]
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	441a      	add	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	7d1b      	ldrb	r3, [r3, #20]
 800c0aa:	f003 0302 	and.w	r3, r3, #2
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00b      	beq.n	800c0ca <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fd ff9a 	bl	8009ff0 <create_chain>
 800c0bc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d108      	bne.n	800c0d6 <f_lseek+0x30c>
							ofs = 0; break;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	603b      	str	r3, [r7, #0]
 800c0c8:	e022      	b.n	800c110 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fd fd42 	bl	8009b58 <get_fat>
 800c0d4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0dc:	d104      	bne.n	800c0e8 <f_lseek+0x31e>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	755a      	strb	r2, [r3, #21]
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e090      	b.n	800c20a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d904      	bls.n	800c0f8 <f_lseek+0x32e>
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	69db      	ldr	r3, [r3, #28]
 800c0f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d304      	bcc.n	800c102 <f_lseek+0x338>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	755a      	strb	r2, [r3, #21]
 800c0fe:	2302      	movs	r3, #2
 800c100:	e083      	b.n	800c20a <f_lseek+0x440>
					fp->clust = clst;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c106:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d8c0      	bhi.n	800c092 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	699a      	ldr	r2, [r3, #24]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	441a      	add	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	899b      	ldrh	r3, [r3, #12]
 800c120:	461a      	mov	r2, r3
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	fbb3 f1f2 	udiv	r1, r3, r2
 800c128:	fb02 f201 	mul.w	r2, r2, r1
 800c12c:	1a9b      	subs	r3, r3, r2
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d016      	beq.n	800c160 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c136:	4618      	mov	r0, r3
 800c138:	f7fd fcef 	bl	8009b1a <clust2sect>
 800c13c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c140:	2b00      	cmp	r3, #0
 800c142:	d104      	bne.n	800c14e <f_lseek+0x384>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2202      	movs	r2, #2
 800c148:	755a      	strb	r2, [r3, #21]
 800c14a:	2302      	movs	r3, #2
 800c14c:	e05d      	b.n	800c20a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	899b      	ldrh	r3, [r3, #12]
 800c152:	461a      	mov	r2, r3
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	fbb3 f3f2 	udiv	r3, r3, r2
 800c15a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c15c:	4413      	add	r3, r2
 800c15e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	699a      	ldr	r2, [r3, #24]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d90a      	bls.n	800c182 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	699a      	ldr	r2, [r3, #24]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	7d1b      	ldrb	r3, [r3, #20]
 800c178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	8992      	ldrh	r2, [r2, #12]
 800c18a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c18e:	fb02 f201 	mul.w	r2, r2, r1
 800c192:	1a9b      	subs	r3, r3, r2
 800c194:	2b00      	cmp	r3, #0
 800c196:	d036      	beq.n	800c206 <f_lseek+0x43c>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6a1b      	ldr	r3, [r3, #32]
 800c19c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d031      	beq.n	800c206 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	7d1b      	ldrb	r3, [r3, #20]
 800c1a6:	b25b      	sxtb	r3, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	da18      	bge.n	800c1de <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	7858      	ldrb	r0, [r3, #1]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a1a      	ldr	r2, [r3, #32]
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	f7fd f9ce 	bl	800955c <disk_write>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d004      	beq.n	800c1d0 <f_lseek+0x406>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	755a      	strb	r2, [r3, #21]
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e01c      	b.n	800c20a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	7d1b      	ldrb	r3, [r3, #20]
 800c1d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1d8:	b2da      	uxtb	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	7858      	ldrb	r0, [r3, #1]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1ec:	f7fd f996 	bl	800951c <disk_read>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d004      	beq.n	800c200 <f_lseek+0x436>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	755a      	strb	r2, [r3, #21]
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e004      	b.n	800c20a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c204:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c206:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3740      	adds	r7, #64	; 0x40
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
	...

0800c214 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c214:	b480      	push	{r7}
 800c216:	b087      	sub	sp, #28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	4613      	mov	r3, r2
 800c220:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c222:	2301      	movs	r3, #1
 800c224:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c22a:	4b1f      	ldr	r3, [pc, #124]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c22c:	7a5b      	ldrb	r3, [r3, #9]
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	2b00      	cmp	r3, #0
 800c232:	d131      	bne.n	800c298 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c234:	4b1c      	ldr	r3, [pc, #112]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c236:	7a5b      	ldrb	r3, [r3, #9]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	461a      	mov	r2, r3
 800c23c:	4b1a      	ldr	r3, [pc, #104]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c23e:	2100      	movs	r1, #0
 800c240:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c242:	4b19      	ldr	r3, [pc, #100]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c244:	7a5b      	ldrb	r3, [r3, #9]
 800c246:	b2db      	uxtb	r3, r3
 800c248:	4a17      	ldr	r2, [pc, #92]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c252:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c254:	7a5b      	ldrb	r3, [r3, #9]
 800c256:	b2db      	uxtb	r3, r3
 800c258:	461a      	mov	r2, r3
 800c25a:	4b13      	ldr	r3, [pc, #76]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c25c:	4413      	add	r3, r2
 800c25e:	79fa      	ldrb	r2, [r7, #7]
 800c260:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c262:	4b11      	ldr	r3, [pc, #68]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c264:	7a5b      	ldrb	r3, [r3, #9]
 800c266:	b2db      	uxtb	r3, r3
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	b2d1      	uxtb	r1, r2
 800c26c:	4a0e      	ldr	r2, [pc, #56]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c26e:	7251      	strb	r1, [r2, #9]
 800c270:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c272:	7dbb      	ldrb	r3, [r7, #22]
 800c274:	3330      	adds	r3, #48	; 0x30
 800c276:	b2da      	uxtb	r2, r3
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	3301      	adds	r3, #1
 800c280:	223a      	movs	r2, #58	; 0x3a
 800c282:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	3302      	adds	r3, #2
 800c288:	222f      	movs	r2, #47	; 0x2f
 800c28a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	3303      	adds	r3, #3
 800c290:	2200      	movs	r2, #0
 800c292:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c298:	7dfb      	ldrb	r3, [r7, #23]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	371c      	adds	r7, #28
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	20000670 	.word	0x20000670

0800c2ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7ff ffaa 	bl	800c214 <FATFS_LinkDriverEx>
 800c2c0:	4603      	mov	r3, r0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
	...

0800c2cc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	6039      	str	r1, [r7, #0]
 800c2d6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c2d8:	88fb      	ldrh	r3, [r7, #6]
 800c2da:	2b7f      	cmp	r3, #127	; 0x7f
 800c2dc:	d802      	bhi.n	800c2e4 <ff_convert+0x18>
		c = chr;
 800c2de:	88fb      	ldrh	r3, [r7, #6]
 800c2e0:	81fb      	strh	r3, [r7, #14]
 800c2e2:	e025      	b.n	800c330 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00b      	beq.n	800c302 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c2ea:	88fb      	ldrh	r3, [r7, #6]
 800c2ec:	2bff      	cmp	r3, #255	; 0xff
 800c2ee:	d805      	bhi.n	800c2fc <ff_convert+0x30>
 800c2f0:	88fb      	ldrh	r3, [r7, #6]
 800c2f2:	3b80      	subs	r3, #128	; 0x80
 800c2f4:	4a12      	ldr	r2, [pc, #72]	; (800c340 <ff_convert+0x74>)
 800c2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2fa:	e000      	b.n	800c2fe <ff_convert+0x32>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	81fb      	strh	r3, [r7, #14]
 800c300:	e016      	b.n	800c330 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c302:	2300      	movs	r3, #0
 800c304:	81fb      	strh	r3, [r7, #14]
 800c306:	e009      	b.n	800c31c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c308:	89fb      	ldrh	r3, [r7, #14]
 800c30a:	4a0d      	ldr	r2, [pc, #52]	; (800c340 <ff_convert+0x74>)
 800c30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c310:	88fa      	ldrh	r2, [r7, #6]
 800c312:	429a      	cmp	r2, r3
 800c314:	d006      	beq.n	800c324 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c316:	89fb      	ldrh	r3, [r7, #14]
 800c318:	3301      	adds	r3, #1
 800c31a:	81fb      	strh	r3, [r7, #14]
 800c31c:	89fb      	ldrh	r3, [r7, #14]
 800c31e:	2b7f      	cmp	r3, #127	; 0x7f
 800c320:	d9f2      	bls.n	800c308 <ff_convert+0x3c>
 800c322:	e000      	b.n	800c326 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c324:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c326:	89fb      	ldrh	r3, [r7, #14]
 800c328:	3380      	adds	r3, #128	; 0x80
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c330:	89fb      	ldrh	r3, [r7, #14]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	0800e48c 	.word	0x0800e48c

0800c344 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c344:	b480      	push	{r7}
 800c346:	b087      	sub	sp, #28
 800c348:	af00      	add	r7, sp, #0
 800c34a:	4603      	mov	r3, r0
 800c34c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c34e:	88fb      	ldrh	r3, [r7, #6]
 800c350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c354:	d201      	bcs.n	800c35a <ff_wtoupper+0x16>
 800c356:	4b3e      	ldr	r3, [pc, #248]	; (800c450 <ff_wtoupper+0x10c>)
 800c358:	e000      	b.n	800c35c <ff_wtoupper+0x18>
 800c35a:	4b3e      	ldr	r3, [pc, #248]	; (800c454 <ff_wtoupper+0x110>)
 800c35c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	1c9a      	adds	r2, r3, #2
 800c362:	617a      	str	r2, [r7, #20]
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c368:	8a7b      	ldrh	r3, [r7, #18]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d068      	beq.n	800c440 <ff_wtoupper+0xfc>
 800c36e:	88fa      	ldrh	r2, [r7, #6]
 800c370:	8a7b      	ldrh	r3, [r7, #18]
 800c372:	429a      	cmp	r2, r3
 800c374:	d364      	bcc.n	800c440 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	1c9a      	adds	r2, r3, #2
 800c37a:	617a      	str	r2, [r7, #20]
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	823b      	strh	r3, [r7, #16]
 800c380:	8a3b      	ldrh	r3, [r7, #16]
 800c382:	0a1b      	lsrs	r3, r3, #8
 800c384:	81fb      	strh	r3, [r7, #14]
 800c386:	8a3b      	ldrh	r3, [r7, #16]
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c38c:	88fa      	ldrh	r2, [r7, #6]
 800c38e:	8a79      	ldrh	r1, [r7, #18]
 800c390:	8a3b      	ldrh	r3, [r7, #16]
 800c392:	440b      	add	r3, r1
 800c394:	429a      	cmp	r2, r3
 800c396:	da49      	bge.n	800c42c <ff_wtoupper+0xe8>
			switch (cmd) {
 800c398:	89fb      	ldrh	r3, [r7, #14]
 800c39a:	2b08      	cmp	r3, #8
 800c39c:	d84f      	bhi.n	800c43e <ff_wtoupper+0xfa>
 800c39e:	a201      	add	r2, pc, #4	; (adr r2, 800c3a4 <ff_wtoupper+0x60>)
 800c3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a4:	0800c3c9 	.word	0x0800c3c9
 800c3a8:	0800c3db 	.word	0x0800c3db
 800c3ac:	0800c3f1 	.word	0x0800c3f1
 800c3b0:	0800c3f9 	.word	0x0800c3f9
 800c3b4:	0800c401 	.word	0x0800c401
 800c3b8:	0800c409 	.word	0x0800c409
 800c3bc:	0800c411 	.word	0x0800c411
 800c3c0:	0800c419 	.word	0x0800c419
 800c3c4:	0800c421 	.word	0x0800c421
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c3c8:	88fa      	ldrh	r2, [r7, #6]
 800c3ca:	8a7b      	ldrh	r3, [r7, #18]
 800c3cc:	1ad3      	subs	r3, r2, r3
 800c3ce:	005b      	lsls	r3, r3, #1
 800c3d0:	697a      	ldr	r2, [r7, #20]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	881b      	ldrh	r3, [r3, #0]
 800c3d6:	80fb      	strh	r3, [r7, #6]
 800c3d8:	e027      	b.n	800c42a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c3da:	88fa      	ldrh	r2, [r7, #6]
 800c3dc:	8a7b      	ldrh	r3, [r7, #18]
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	88fa      	ldrh	r2, [r7, #6]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	80fb      	strh	r3, [r7, #6]
 800c3ee:	e01c      	b.n	800c42a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c3f0:	88fb      	ldrh	r3, [r7, #6]
 800c3f2:	3b10      	subs	r3, #16
 800c3f4:	80fb      	strh	r3, [r7, #6]
 800c3f6:	e018      	b.n	800c42a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c3f8:	88fb      	ldrh	r3, [r7, #6]
 800c3fa:	3b20      	subs	r3, #32
 800c3fc:	80fb      	strh	r3, [r7, #6]
 800c3fe:	e014      	b.n	800c42a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c400:	88fb      	ldrh	r3, [r7, #6]
 800c402:	3b30      	subs	r3, #48	; 0x30
 800c404:	80fb      	strh	r3, [r7, #6]
 800c406:	e010      	b.n	800c42a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c408:	88fb      	ldrh	r3, [r7, #6]
 800c40a:	3b1a      	subs	r3, #26
 800c40c:	80fb      	strh	r3, [r7, #6]
 800c40e:	e00c      	b.n	800c42a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c410:	88fb      	ldrh	r3, [r7, #6]
 800c412:	3308      	adds	r3, #8
 800c414:	80fb      	strh	r3, [r7, #6]
 800c416:	e008      	b.n	800c42a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c418:	88fb      	ldrh	r3, [r7, #6]
 800c41a:	3b50      	subs	r3, #80	; 0x50
 800c41c:	80fb      	strh	r3, [r7, #6]
 800c41e:	e004      	b.n	800c42a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c420:	88fb      	ldrh	r3, [r7, #6]
 800c422:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c426:	80fb      	strh	r3, [r7, #6]
 800c428:	bf00      	nop
			}
			break;
 800c42a:	e008      	b.n	800c43e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c42c:	89fb      	ldrh	r3, [r7, #14]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d195      	bne.n	800c35e <ff_wtoupper+0x1a>
 800c432:	8a3b      	ldrh	r3, [r7, #16]
 800c434:	005b      	lsls	r3, r3, #1
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	4413      	add	r3, r2
 800c43a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c43c:	e78f      	b.n	800c35e <ff_wtoupper+0x1a>
			break;
 800c43e:	bf00      	nop
	}

	return chr;
 800c440:	88fb      	ldrh	r3, [r7, #6]
}
 800c442:	4618      	mov	r0, r3
 800c444:	371c      	adds	r7, #28
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	0800e58c 	.word	0x0800e58c
 800c454:	0800e780 	.word	0x0800e780

0800c458 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c45c:	2200      	movs	r2, #0
 800c45e:	4912      	ldr	r1, [pc, #72]	; (800c4a8 <MX_USB_DEVICE_Init+0x50>)
 800c460:	4812      	ldr	r0, [pc, #72]	; (800c4ac <MX_USB_DEVICE_Init+0x54>)
 800c462:	f7fb ff15 	bl	8008290 <USBD_Init>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c46c:	f7f5 ff0a 	bl	8002284 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c470:	490f      	ldr	r1, [pc, #60]	; (800c4b0 <MX_USB_DEVICE_Init+0x58>)
 800c472:	480e      	ldr	r0, [pc, #56]	; (800c4ac <MX_USB_DEVICE_Init+0x54>)
 800c474:	f7fb ff42 	bl	80082fc <USBD_RegisterClass>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c47e:	f7f5 ff01 	bl	8002284 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c482:	490c      	ldr	r1, [pc, #48]	; (800c4b4 <MX_USB_DEVICE_Init+0x5c>)
 800c484:	4809      	ldr	r0, [pc, #36]	; (800c4ac <MX_USB_DEVICE_Init+0x54>)
 800c486:	f7fb fe67 	bl	8008158 <USBD_CDC_RegisterInterface>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c490:	f7f5 fef8 	bl	8002284 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c494:	4805      	ldr	r0, [pc, #20]	; (800c4ac <MX_USB_DEVICE_Init+0x54>)
 800c496:	f7fb ff52 	bl	800833e <USBD_Start>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c4a0:	f7f5 fef0 	bl	8002284 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c4a4:	bf00      	nop
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	20000154 	.word	0x20000154
 800c4ac:	2001dff0 	.word	0x2001dff0
 800c4b0:	2000003c 	.word	0x2000003c
 800c4b4:	20000140 	.word	0x20000140

0800c4b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c4bc:	2200      	movs	r2, #0
 800c4be:	4905      	ldr	r1, [pc, #20]	; (800c4d4 <CDC_Init_FS+0x1c>)
 800c4c0:	4805      	ldr	r0, [pc, #20]	; (800c4d8 <CDC_Init_FS+0x20>)
 800c4c2:	f7fb fe5e 	bl	8008182 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c4c6:	4905      	ldr	r1, [pc, #20]	; (800c4dc <CDC_Init_FS+0x24>)
 800c4c8:	4803      	ldr	r0, [pc, #12]	; (800c4d8 <CDC_Init_FS+0x20>)
 800c4ca:	f7fb fe73 	bl	80081b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c4ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	2001eac0 	.word	0x2001eac0
 800c4d8:	2001dff0 	.word	0x2001dff0
 800c4dc:	2001e2c0 	.word	0x2001e2c0

0800c4e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c4e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	6039      	str	r1, [r7, #0]
 800c4fa:	71fb      	strb	r3, [r7, #7]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c500:	79fb      	ldrb	r3, [r7, #7]
 800c502:	2b23      	cmp	r3, #35	; 0x23
 800c504:	d84a      	bhi.n	800c59c <CDC_Control_FS+0xac>
 800c506:	a201      	add	r2, pc, #4	; (adr r2, 800c50c <CDC_Control_FS+0x1c>)
 800c508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50c:	0800c59d 	.word	0x0800c59d
 800c510:	0800c59d 	.word	0x0800c59d
 800c514:	0800c59d 	.word	0x0800c59d
 800c518:	0800c59d 	.word	0x0800c59d
 800c51c:	0800c59d 	.word	0x0800c59d
 800c520:	0800c59d 	.word	0x0800c59d
 800c524:	0800c59d 	.word	0x0800c59d
 800c528:	0800c59d 	.word	0x0800c59d
 800c52c:	0800c59d 	.word	0x0800c59d
 800c530:	0800c59d 	.word	0x0800c59d
 800c534:	0800c59d 	.word	0x0800c59d
 800c538:	0800c59d 	.word	0x0800c59d
 800c53c:	0800c59d 	.word	0x0800c59d
 800c540:	0800c59d 	.word	0x0800c59d
 800c544:	0800c59d 	.word	0x0800c59d
 800c548:	0800c59d 	.word	0x0800c59d
 800c54c:	0800c59d 	.word	0x0800c59d
 800c550:	0800c59d 	.word	0x0800c59d
 800c554:	0800c59d 	.word	0x0800c59d
 800c558:	0800c59d 	.word	0x0800c59d
 800c55c:	0800c59d 	.word	0x0800c59d
 800c560:	0800c59d 	.word	0x0800c59d
 800c564:	0800c59d 	.word	0x0800c59d
 800c568:	0800c59d 	.word	0x0800c59d
 800c56c:	0800c59d 	.word	0x0800c59d
 800c570:	0800c59d 	.word	0x0800c59d
 800c574:	0800c59d 	.word	0x0800c59d
 800c578:	0800c59d 	.word	0x0800c59d
 800c57c:	0800c59d 	.word	0x0800c59d
 800c580:	0800c59d 	.word	0x0800c59d
 800c584:	0800c59d 	.word	0x0800c59d
 800c588:	0800c59d 	.word	0x0800c59d
 800c58c:	0800c59d 	.word	0x0800c59d
 800c590:	0800c59d 	.word	0x0800c59d
 800c594:	0800c59d 	.word	0x0800c59d
 800c598:	0800c59d 	.word	0x0800c59d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c59c:	bf00      	nop
  }

  return (USBD_OK);
 800c59e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c5b6:	6879      	ldr	r1, [r7, #4]
 800c5b8:	4805      	ldr	r0, [pc, #20]	; (800c5d0 <CDC_Receive_FS+0x24>)
 800c5ba:	f7fb fdfb 	bl	80081b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c5be:	4804      	ldr	r0, [pc, #16]	; (800c5d0 <CDC_Receive_FS+0x24>)
 800c5c0:	f7fb fe3c 	bl	800823c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c5c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3708      	adds	r7, #8
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	2001dff0 	.word	0x2001dff0

0800c5d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c5e4:	4b0d      	ldr	r3, [pc, #52]	; (800c61c <CDC_Transmit_FS+0x48>)
 800c5e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e00b      	b.n	800c612 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c5fa:	887b      	ldrh	r3, [r7, #2]
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	6879      	ldr	r1, [r7, #4]
 800c600:	4806      	ldr	r0, [pc, #24]	; (800c61c <CDC_Transmit_FS+0x48>)
 800c602:	f7fb fdbe 	bl	8008182 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c606:	4805      	ldr	r0, [pc, #20]	; (800c61c <CDC_Transmit_FS+0x48>)
 800c608:	f7fb fde8 	bl	80081dc <USBD_CDC_TransmitPacket>
 800c60c:	4603      	mov	r3, r0
 800c60e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c610:	7bfb      	ldrb	r3, [r7, #15]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	2001dff0 	.word	0x2001dff0

0800c620 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	4613      	mov	r3, r2
 800c62c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c62e:	2300      	movs	r3, #0
 800c630:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c636:	4618      	mov	r0, r3
 800c638:	371c      	adds	r7, #28
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
	...

0800c644 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	4603      	mov	r3, r0
 800c64c:	6039      	str	r1, [r7, #0]
 800c64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	2212      	movs	r2, #18
 800c654:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c656:	4b03      	ldr	r3, [pc, #12]	; (800c664 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c658:	4618      	mov	r0, r3
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr
 800c664:	20000170 	.word	0x20000170

0800c668 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	6039      	str	r1, [r7, #0]
 800c672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	2204      	movs	r2, #4
 800c678:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c67a:	4b03      	ldr	r3, [pc, #12]	; (800c688 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	20000184 	.word	0x20000184

0800c68c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	4603      	mov	r3, r0
 800c694:	6039      	str	r1, [r7, #0]
 800c696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c698:	79fb      	ldrb	r3, [r7, #7]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d105      	bne.n	800c6aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	4907      	ldr	r1, [pc, #28]	; (800c6c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6a2:	4808      	ldr	r0, [pc, #32]	; (800c6c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6a4:	f7fc fe19 	bl	80092da <USBD_GetString>
 800c6a8:	e004      	b.n	800c6b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6aa:	683a      	ldr	r2, [r7, #0]
 800c6ac:	4904      	ldr	r1, [pc, #16]	; (800c6c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6ae:	4805      	ldr	r0, [pc, #20]	; (800c6c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6b0:	f7fc fe13 	bl	80092da <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6b4:	4b02      	ldr	r3, [pc, #8]	; (800c6c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	2001f2c0 	.word	0x2001f2c0
 800c6c4:	0800e39c 	.word	0x0800e39c

0800c6c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	6039      	str	r1, [r7, #0]
 800c6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	4904      	ldr	r1, [pc, #16]	; (800c6e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c6d8:	4804      	ldr	r0, [pc, #16]	; (800c6ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c6da:	f7fc fdfe 	bl	80092da <USBD_GetString>
  return USBD_StrDesc;
 800c6de:	4b02      	ldr	r3, [pc, #8]	; (800c6e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	2001f2c0 	.word	0x2001f2c0
 800c6ec:	0800e3b4 	.word	0x0800e3b4

0800c6f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	6039      	str	r1, [r7, #0]
 800c6fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	221a      	movs	r2, #26
 800c700:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c702:	f000 f843 	bl	800c78c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c706:	4b02      	ldr	r3, [pc, #8]	; (800c710 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	20000188 	.word	0x20000188

0800c714 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	4603      	mov	r3, r0
 800c71c:	6039      	str	r1, [r7, #0]
 800c71e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c720:	79fb      	ldrb	r3, [r7, #7]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d105      	bne.n	800c732 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	4907      	ldr	r1, [pc, #28]	; (800c748 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c72a:	4808      	ldr	r0, [pc, #32]	; (800c74c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c72c:	f7fc fdd5 	bl	80092da <USBD_GetString>
 800c730:	e004      	b.n	800c73c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	4904      	ldr	r1, [pc, #16]	; (800c748 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c736:	4805      	ldr	r0, [pc, #20]	; (800c74c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c738:	f7fc fdcf 	bl	80092da <USBD_GetString>
  }
  return USBD_StrDesc;
 800c73c:	4b02      	ldr	r3, [pc, #8]	; (800c748 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	2001f2c0 	.word	0x2001f2c0
 800c74c:	0800e3c8 	.word	0x0800e3c8

0800c750 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	6039      	str	r1, [r7, #0]
 800c75a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c75c:	79fb      	ldrb	r3, [r7, #7]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d105      	bne.n	800c76e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	4907      	ldr	r1, [pc, #28]	; (800c784 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c766:	4808      	ldr	r0, [pc, #32]	; (800c788 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c768:	f7fc fdb7 	bl	80092da <USBD_GetString>
 800c76c:	e004      	b.n	800c778 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	4904      	ldr	r1, [pc, #16]	; (800c784 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c772:	4805      	ldr	r0, [pc, #20]	; (800c788 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c774:	f7fc fdb1 	bl	80092da <USBD_GetString>
  }
  return USBD_StrDesc;
 800c778:	4b02      	ldr	r3, [pc, #8]	; (800c784 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	2001f2c0 	.word	0x2001f2c0
 800c788:	0800e3d4 	.word	0x0800e3d4

0800c78c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c792:	4b0f      	ldr	r3, [pc, #60]	; (800c7d0 <Get_SerialNum+0x44>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c798:	4b0e      	ldr	r3, [pc, #56]	; (800c7d4 <Get_SerialNum+0x48>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c79e:	4b0e      	ldr	r3, [pc, #56]	; (800c7d8 <Get_SerialNum+0x4c>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d009      	beq.n	800c7c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7b2:	2208      	movs	r2, #8
 800c7b4:	4909      	ldr	r1, [pc, #36]	; (800c7dc <Get_SerialNum+0x50>)
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f000 f814 	bl	800c7e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7bc:	2204      	movs	r2, #4
 800c7be:	4908      	ldr	r1, [pc, #32]	; (800c7e0 <Get_SerialNum+0x54>)
 800c7c0:	68b8      	ldr	r0, [r7, #8]
 800c7c2:	f000 f80f 	bl	800c7e4 <IntToUnicode>
  }
}
 800c7c6:	bf00      	nop
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	1fff7a10 	.word	0x1fff7a10
 800c7d4:	1fff7a14 	.word	0x1fff7a14
 800c7d8:	1fff7a18 	.word	0x1fff7a18
 800c7dc:	2000018a 	.word	0x2000018a
 800c7e0:	2000019a 	.word	0x2000019a

0800c7e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b087      	sub	sp, #28
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	75fb      	strb	r3, [r7, #23]
 800c7fa:	e027      	b.n	800c84c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	0f1b      	lsrs	r3, r3, #28
 800c800:	2b09      	cmp	r3, #9
 800c802:	d80b      	bhi.n	800c81c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	0f1b      	lsrs	r3, r3, #28
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	4619      	mov	r1, r3
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	440b      	add	r3, r1
 800c814:	3230      	adds	r2, #48	; 0x30
 800c816:	b2d2      	uxtb	r2, r2
 800c818:	701a      	strb	r2, [r3, #0]
 800c81a:	e00a      	b.n	800c832 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	0f1b      	lsrs	r3, r3, #28
 800c820:	b2da      	uxtb	r2, r3
 800c822:	7dfb      	ldrb	r3, [r7, #23]
 800c824:	005b      	lsls	r3, r3, #1
 800c826:	4619      	mov	r1, r3
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	440b      	add	r3, r1
 800c82c:	3237      	adds	r2, #55	; 0x37
 800c82e:	b2d2      	uxtb	r2, r2
 800c830:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	011b      	lsls	r3, r3, #4
 800c836:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c838:	7dfb      	ldrb	r3, [r7, #23]
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	3301      	adds	r3, #1
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	4413      	add	r3, r2
 800c842:	2200      	movs	r2, #0
 800c844:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c846:	7dfb      	ldrb	r3, [r7, #23]
 800c848:	3301      	adds	r3, #1
 800c84a:	75fb      	strb	r3, [r7, #23]
 800c84c:	7dfa      	ldrb	r2, [r7, #23]
 800c84e:	79fb      	ldrb	r3, [r7, #7]
 800c850:	429a      	cmp	r2, r3
 800c852:	d3d3      	bcc.n	800c7fc <IntToUnicode+0x18>
  }
}
 800c854:	bf00      	nop
 800c856:	371c      	adds	r7, #28
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b08a      	sub	sp, #40	; 0x28
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c868:	f107 0314 	add.w	r3, r7, #20
 800c86c:	2200      	movs	r2, #0
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	605a      	str	r2, [r3, #4]
 800c872:	609a      	str	r2, [r3, #8]
 800c874:	60da      	str	r2, [r3, #12]
 800c876:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c880:	d13a      	bne.n	800c8f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c882:	2300      	movs	r3, #0
 800c884:	613b      	str	r3, [r7, #16]
 800c886:	4b1e      	ldr	r3, [pc, #120]	; (800c900 <HAL_PCD_MspInit+0xa0>)
 800c888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c88a:	4a1d      	ldr	r2, [pc, #116]	; (800c900 <HAL_PCD_MspInit+0xa0>)
 800c88c:	f043 0301 	orr.w	r3, r3, #1
 800c890:	6313      	str	r3, [r2, #48]	; 0x30
 800c892:	4b1b      	ldr	r3, [pc, #108]	; (800c900 <HAL_PCD_MspInit+0xa0>)
 800c894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c896:	f003 0301 	and.w	r3, r3, #1
 800c89a:	613b      	str	r3, [r7, #16]
 800c89c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c89e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c8a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c8b0:	230a      	movs	r3, #10
 800c8b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8b4:	f107 0314 	add.w	r3, r7, #20
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	4812      	ldr	r0, [pc, #72]	; (800c904 <HAL_PCD_MspInit+0xa4>)
 800c8bc:	f7f6 fc94 	bl	80031e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c8c0:	4b0f      	ldr	r3, [pc, #60]	; (800c900 <HAL_PCD_MspInit+0xa0>)
 800c8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c4:	4a0e      	ldr	r2, [pc, #56]	; (800c900 <HAL_PCD_MspInit+0xa0>)
 800c8c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8ca:	6353      	str	r3, [r2, #52]	; 0x34
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60fb      	str	r3, [r7, #12]
 800c8d0:	4b0b      	ldr	r3, [pc, #44]	; (800c900 <HAL_PCD_MspInit+0xa0>)
 800c8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8d4:	4a0a      	ldr	r2, [pc, #40]	; (800c900 <HAL_PCD_MspInit+0xa0>)
 800c8d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c8da:	6453      	str	r3, [r2, #68]	; 0x44
 800c8dc:	4b08      	ldr	r3, [pc, #32]	; (800c900 <HAL_PCD_MspInit+0xa0>)
 800c8de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	2043      	movs	r0, #67	; 0x43
 800c8ee:	f7f6 f95c 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c8f2:	2043      	movs	r0, #67	; 0x43
 800c8f4:	f7f6 f975 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c8f8:	bf00      	nop
 800c8fa:	3728      	adds	r7, #40	; 0x28
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	40023800 	.word	0x40023800
 800c904:	40020000 	.word	0x40020000

0800c908 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c91c:	4619      	mov	r1, r3
 800c91e:	4610      	mov	r0, r2
 800c920:	f7fb fd58 	bl	80083d4 <USBD_LL_SetupStage>
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	460b      	mov	r3, r1
 800c936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c93e:	78fa      	ldrb	r2, [r7, #3]
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	4613      	mov	r3, r2
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	1a9b      	subs	r3, r3, r2
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	440b      	add	r3, r1
 800c94c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	78fb      	ldrb	r3, [r7, #3]
 800c954:	4619      	mov	r1, r3
 800c956:	f7fb fd90 	bl	800847a <USBD_LL_DataOutStage>
}
 800c95a:	bf00      	nop
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b082      	sub	sp, #8
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	460b      	mov	r3, r1
 800c96c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c974:	78fa      	ldrb	r2, [r7, #3]
 800c976:	6879      	ldr	r1, [r7, #4]
 800c978:	4613      	mov	r3, r2
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	1a9b      	subs	r3, r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	440b      	add	r3, r1
 800c982:	3348      	adds	r3, #72	; 0x48
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	78fb      	ldrb	r3, [r7, #3]
 800c988:	4619      	mov	r1, r3
 800c98a:	f7fb fdd9 	bl	8008540 <USBD_LL_DataInStage>
}
 800c98e:	bf00      	nop
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b082      	sub	sp, #8
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7fb fedd 	bl	8008764 <USBD_LL_SOF>
}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d001      	beq.n	800c9ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9c6:	f7f5 fc5d 	bl	8002284 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9d0:	7bfa      	ldrb	r2, [r7, #15]
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fb fe8a 	bl	80086ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fb fe43 	bl	800866c <USBD_LL_Reset>
}
 800c9e6:	bf00      	nop
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
	...

0800c9f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fb fe85 	bl	800870e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	6812      	ldr	r2, [r2, #0]
 800ca12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca16:	f043 0301 	orr.w	r3, r3, #1
 800ca1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a1b      	ldr	r3, [r3, #32]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d005      	beq.n	800ca30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca24:	4b04      	ldr	r3, [pc, #16]	; (800ca38 <HAL_PCD_SuspendCallback+0x48>)
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	4a03      	ldr	r2, [pc, #12]	; (800ca38 <HAL_PCD_SuspendCallback+0x48>)
 800ca2a:	f043 0306 	orr.w	r3, r3, #6
 800ca2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca30:	bf00      	nop
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	e000ed00 	.word	0xe000ed00

0800ca3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fb fe74 	bl	8008738 <USBD_LL_Resume>
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	460b      	mov	r3, r1
 800ca62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca6a:	78fa      	ldrb	r2, [r7, #3]
 800ca6c:	4611      	mov	r1, r2
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fb fe9f 	bl	80087b2 <USBD_LL_IsoOUTIncomplete>
}
 800ca74:	bf00      	nop
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca8e:	78fa      	ldrb	r2, [r7, #3]
 800ca90:	4611      	mov	r1, r2
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fb fe80 	bl	8008798 <USBD_LL_IsoINIncomplete>
}
 800ca98:	bf00      	nop
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800caae:	4618      	mov	r0, r3
 800cab0:	f7fb fe8c 	bl	80087cc <USBD_LL_DevConnected>
}
 800cab4:	bf00      	nop
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fb fe89 	bl	80087e2 <USBD_LL_DevDisconnected>
}
 800cad0:	bf00      	nop
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d13c      	bne.n	800cb62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cae8:	4a20      	ldr	r2, [pc, #128]	; (800cb6c <USBD_LL_Init+0x94>)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a1e      	ldr	r2, [pc, #120]	; (800cb6c <USBD_LL_Init+0x94>)
 800caf4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800caf8:	4b1c      	ldr	r3, [pc, #112]	; (800cb6c <USBD_LL_Init+0x94>)
 800cafa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cafe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cb00:	4b1a      	ldr	r3, [pc, #104]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb02:	2204      	movs	r2, #4
 800cb04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cb06:	4b19      	ldr	r3, [pc, #100]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb08:	2202      	movs	r2, #2
 800cb0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb0c:	4b17      	ldr	r3, [pc, #92]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb12:	4b16      	ldr	r3, [pc, #88]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb14:	2202      	movs	r2, #2
 800cb16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb18:	4b14      	ldr	r3, [pc, #80]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cb1e:	4b13      	ldr	r3, [pc, #76]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cb24:	4b11      	ldr	r3, [pc, #68]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cb2a:	4b10      	ldr	r3, [pc, #64]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cb30:	4b0e      	ldr	r3, [pc, #56]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cb36:	480d      	ldr	r0, [pc, #52]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb38:	f7f6 fcf1 	bl	800351e <HAL_PCD_Init>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d001      	beq.n	800cb46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cb42:	f7f5 fb9f 	bl	8002284 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb46:	2180      	movs	r1, #128	; 0x80
 800cb48:	4808      	ldr	r0, [pc, #32]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb4a:	f7f7 fe4e 	bl	80047ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb4e:	2240      	movs	r2, #64	; 0x40
 800cb50:	2100      	movs	r1, #0
 800cb52:	4806      	ldr	r0, [pc, #24]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb54:	f7f7 fe02 	bl	800475c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb58:	2280      	movs	r2, #128	; 0x80
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	4803      	ldr	r0, [pc, #12]	; (800cb6c <USBD_LL_Init+0x94>)
 800cb5e:	f7f7 fdfd 	bl	800475c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	2001f4c0 	.word	0x2001f4c0

0800cb70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7f6 fde6 	bl	8003758 <HAL_PCD_Start>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 f92a 	bl	800cdec <USBD_Get_USB_Status>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b084      	sub	sp, #16
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	4608      	mov	r0, r1
 800cbb0:	4611      	mov	r1, r2
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	70fb      	strb	r3, [r7, #3]
 800cbb8:	460b      	mov	r3, r1
 800cbba:	70bb      	strb	r3, [r7, #2]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbce:	78bb      	ldrb	r3, [r7, #2]
 800cbd0:	883a      	ldrh	r2, [r7, #0]
 800cbd2:	78f9      	ldrb	r1, [r7, #3]
 800cbd4:	f7f7 f9ca 	bl	8003f6c <HAL_PCD_EP_Open>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 f904 	bl	800cdec <USBD_Get_USB_Status>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc0c:	78fa      	ldrb	r2, [r7, #3]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7f7 fa13 	bl	800403c <HAL_PCD_EP_Close>
 800cc16:	4603      	mov	r3, r0
 800cc18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f000 f8e5 	bl	800cdec <USBD_Get_USB_Status>
 800cc22:	4603      	mov	r3, r0
 800cc24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc4a:	78fa      	ldrb	r2, [r7, #3]
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7f7 faeb 	bl	800422a <HAL_PCD_EP_SetStall>
 800cc54:	4603      	mov	r3, r0
 800cc56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f000 f8c6 	bl	800cdec <USBD_Get_USB_Status>
 800cc60:	4603      	mov	r3, r0
 800cc62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc64:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b084      	sub	sp, #16
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	460b      	mov	r3, r1
 800cc78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc88:	78fa      	ldrb	r2, [r7, #3]
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7f7 fb30 	bl	80042f2 <HAL_PCD_EP_ClrStall>
 800cc92:	4603      	mov	r3, r0
 800cc94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 f8a7 	bl	800cdec <USBD_Get_USB_Status>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cca2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	da0b      	bge.n	800cce0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ccc8:	78fb      	ldrb	r3, [r7, #3]
 800ccca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccce:	68f9      	ldr	r1, [r7, #12]
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	00db      	lsls	r3, r3, #3
 800ccd4:	1a9b      	subs	r3, r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	440b      	add	r3, r1
 800ccda:	333e      	adds	r3, #62	; 0x3e
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	e00b      	b.n	800ccf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cce0:	78fb      	ldrb	r3, [r7, #3]
 800cce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cce6:	68f9      	ldr	r1, [r7, #12]
 800cce8:	4613      	mov	r3, r2
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	1a9b      	subs	r3, r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	440b      	add	r3, r1
 800ccf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ccf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3714      	adds	r7, #20
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd1e:	78fa      	ldrb	r2, [r7, #3]
 800cd20:	4611      	mov	r1, r2
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7f7 f8fd 	bl	8003f22 <HAL_PCD_SetAddress>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd2c:	7bfb      	ldrb	r3, [r7, #15]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 f85c 	bl	800cdec <USBD_Get_USB_Status>
 800cd34:	4603      	mov	r3, r0
 800cd36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd38:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b086      	sub	sp, #24
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	60f8      	str	r0, [r7, #12]
 800cd4a:	607a      	str	r2, [r7, #4]
 800cd4c:	603b      	str	r3, [r7, #0]
 800cd4e:	460b      	mov	r3, r1
 800cd50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd60:	7af9      	ldrb	r1, [r7, #11]
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	f7f7 fa16 	bl	8004196 <HAL_PCD_EP_Transmit>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 f83b 	bl	800cdec <USBD_Get_USB_Status>
 800cd76:	4603      	mov	r3, r0
 800cd78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	607a      	str	r2, [r7, #4]
 800cd8e:	603b      	str	r3, [r7, #0]
 800cd90:	460b      	mov	r3, r1
 800cd92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cda2:	7af9      	ldrb	r1, [r7, #11]
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	f7f7 f992 	bl	80040d0 <HAL_PCD_EP_Receive>
 800cdac:	4603      	mov	r3, r0
 800cdae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdb0:	7dfb      	ldrb	r3, [r7, #23]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f000 f81a 	bl	800cdec <USBD_Get_USB_Status>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdbc:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3718      	adds	r7, #24
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b082      	sub	sp, #8
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	460b      	mov	r3, r1
 800cdd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cdd8:	78fa      	ldrb	r2, [r7, #3]
 800cdda:	4611      	mov	r1, r2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7f7 f9c2 	bl	8004166 <HAL_PCD_EP_GetRxCount>
 800cde2:	4603      	mov	r3, r0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cdfa:	79fb      	ldrb	r3, [r7, #7]
 800cdfc:	2b03      	cmp	r3, #3
 800cdfe:	d817      	bhi.n	800ce30 <USBD_Get_USB_Status+0x44>
 800ce00:	a201      	add	r2, pc, #4	; (adr r2, 800ce08 <USBD_Get_USB_Status+0x1c>)
 800ce02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce06:	bf00      	nop
 800ce08:	0800ce19 	.word	0x0800ce19
 800ce0c:	0800ce1f 	.word	0x0800ce1f
 800ce10:	0800ce25 	.word	0x0800ce25
 800ce14:	0800ce2b 	.word	0x0800ce2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce1c:	e00b      	b.n	800ce36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	73fb      	strb	r3, [r7, #15]
    break;
 800ce22:	e008      	b.n	800ce36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce24:	2301      	movs	r3, #1
 800ce26:	73fb      	strb	r3, [r7, #15]
    break;
 800ce28:	e005      	b.n	800ce36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce2e:	e002      	b.n	800ce36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce30:	2303      	movs	r3, #3
 800ce32:	73fb      	strb	r3, [r7, #15]
    break;
 800ce34:	bf00      	nop
  }
  return usb_status;
 800ce36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3714      	adds	r7, #20
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <__errno>:
 800ce44:	4b01      	ldr	r3, [pc, #4]	; (800ce4c <__errno+0x8>)
 800ce46:	6818      	ldr	r0, [r3, #0]
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	200001a4 	.word	0x200001a4

0800ce50 <__libc_init_array>:
 800ce50:	b570      	push	{r4, r5, r6, lr}
 800ce52:	4e0d      	ldr	r6, [pc, #52]	; (800ce88 <__libc_init_array+0x38>)
 800ce54:	4c0d      	ldr	r4, [pc, #52]	; (800ce8c <__libc_init_array+0x3c>)
 800ce56:	1ba4      	subs	r4, r4, r6
 800ce58:	10a4      	asrs	r4, r4, #2
 800ce5a:	2500      	movs	r5, #0
 800ce5c:	42a5      	cmp	r5, r4
 800ce5e:	d109      	bne.n	800ce74 <__libc_init_array+0x24>
 800ce60:	4e0b      	ldr	r6, [pc, #44]	; (800ce90 <__libc_init_array+0x40>)
 800ce62:	4c0c      	ldr	r4, [pc, #48]	; (800ce94 <__libc_init_array+0x44>)
 800ce64:	f001 f93c 	bl	800e0e0 <_init>
 800ce68:	1ba4      	subs	r4, r4, r6
 800ce6a:	10a4      	asrs	r4, r4, #2
 800ce6c:	2500      	movs	r5, #0
 800ce6e:	42a5      	cmp	r5, r4
 800ce70:	d105      	bne.n	800ce7e <__libc_init_array+0x2e>
 800ce72:	bd70      	pop	{r4, r5, r6, pc}
 800ce74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce78:	4798      	blx	r3
 800ce7a:	3501      	adds	r5, #1
 800ce7c:	e7ee      	b.n	800ce5c <__libc_init_array+0xc>
 800ce7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce82:	4798      	blx	r3
 800ce84:	3501      	adds	r5, #1
 800ce86:	e7f2      	b.n	800ce6e <__libc_init_array+0x1e>
 800ce88:	0800e89c 	.word	0x0800e89c
 800ce8c:	0800e89c 	.word	0x0800e89c
 800ce90:	0800e89c 	.word	0x0800e89c
 800ce94:	0800e8a0 	.word	0x0800e8a0

0800ce98 <malloc>:
 800ce98:	4b02      	ldr	r3, [pc, #8]	; (800cea4 <malloc+0xc>)
 800ce9a:	4601      	mov	r1, r0
 800ce9c:	6818      	ldr	r0, [r3, #0]
 800ce9e:	f000 b861 	b.w	800cf64 <_malloc_r>
 800cea2:	bf00      	nop
 800cea4:	200001a4 	.word	0x200001a4

0800cea8 <free>:
 800cea8:	4b02      	ldr	r3, [pc, #8]	; (800ceb4 <free+0xc>)
 800ceaa:	4601      	mov	r1, r0
 800ceac:	6818      	ldr	r0, [r3, #0]
 800ceae:	f000 b80b 	b.w	800cec8 <_free_r>
 800ceb2:	bf00      	nop
 800ceb4:	200001a4 	.word	0x200001a4

0800ceb8 <memset>:
 800ceb8:	4402      	add	r2, r0
 800ceba:	4603      	mov	r3, r0
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d100      	bne.n	800cec2 <memset+0xa>
 800cec0:	4770      	bx	lr
 800cec2:	f803 1b01 	strb.w	r1, [r3], #1
 800cec6:	e7f9      	b.n	800cebc <memset+0x4>

0800cec8 <_free_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	4605      	mov	r5, r0
 800cecc:	2900      	cmp	r1, #0
 800cece:	d045      	beq.n	800cf5c <_free_r+0x94>
 800ced0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ced4:	1f0c      	subs	r4, r1, #4
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	bfb8      	it	lt
 800ceda:	18e4      	addlt	r4, r4, r3
 800cedc:	f000 f8cc 	bl	800d078 <__malloc_lock>
 800cee0:	4a1f      	ldr	r2, [pc, #124]	; (800cf60 <_free_r+0x98>)
 800cee2:	6813      	ldr	r3, [r2, #0]
 800cee4:	4610      	mov	r0, r2
 800cee6:	b933      	cbnz	r3, 800cef6 <_free_r+0x2e>
 800cee8:	6063      	str	r3, [r4, #4]
 800ceea:	6014      	str	r4, [r2, #0]
 800ceec:	4628      	mov	r0, r5
 800ceee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cef2:	f000 b8c2 	b.w	800d07a <__malloc_unlock>
 800cef6:	42a3      	cmp	r3, r4
 800cef8:	d90c      	bls.n	800cf14 <_free_r+0x4c>
 800cefa:	6821      	ldr	r1, [r4, #0]
 800cefc:	1862      	adds	r2, r4, r1
 800cefe:	4293      	cmp	r3, r2
 800cf00:	bf04      	itt	eq
 800cf02:	681a      	ldreq	r2, [r3, #0]
 800cf04:	685b      	ldreq	r3, [r3, #4]
 800cf06:	6063      	str	r3, [r4, #4]
 800cf08:	bf04      	itt	eq
 800cf0a:	1852      	addeq	r2, r2, r1
 800cf0c:	6022      	streq	r2, [r4, #0]
 800cf0e:	6004      	str	r4, [r0, #0]
 800cf10:	e7ec      	b.n	800ceec <_free_r+0x24>
 800cf12:	4613      	mov	r3, r2
 800cf14:	685a      	ldr	r2, [r3, #4]
 800cf16:	b10a      	cbz	r2, 800cf1c <_free_r+0x54>
 800cf18:	42a2      	cmp	r2, r4
 800cf1a:	d9fa      	bls.n	800cf12 <_free_r+0x4a>
 800cf1c:	6819      	ldr	r1, [r3, #0]
 800cf1e:	1858      	adds	r0, r3, r1
 800cf20:	42a0      	cmp	r0, r4
 800cf22:	d10b      	bne.n	800cf3c <_free_r+0x74>
 800cf24:	6820      	ldr	r0, [r4, #0]
 800cf26:	4401      	add	r1, r0
 800cf28:	1858      	adds	r0, r3, r1
 800cf2a:	4282      	cmp	r2, r0
 800cf2c:	6019      	str	r1, [r3, #0]
 800cf2e:	d1dd      	bne.n	800ceec <_free_r+0x24>
 800cf30:	6810      	ldr	r0, [r2, #0]
 800cf32:	6852      	ldr	r2, [r2, #4]
 800cf34:	605a      	str	r2, [r3, #4]
 800cf36:	4401      	add	r1, r0
 800cf38:	6019      	str	r1, [r3, #0]
 800cf3a:	e7d7      	b.n	800ceec <_free_r+0x24>
 800cf3c:	d902      	bls.n	800cf44 <_free_r+0x7c>
 800cf3e:	230c      	movs	r3, #12
 800cf40:	602b      	str	r3, [r5, #0]
 800cf42:	e7d3      	b.n	800ceec <_free_r+0x24>
 800cf44:	6820      	ldr	r0, [r4, #0]
 800cf46:	1821      	adds	r1, r4, r0
 800cf48:	428a      	cmp	r2, r1
 800cf4a:	bf04      	itt	eq
 800cf4c:	6811      	ldreq	r1, [r2, #0]
 800cf4e:	6852      	ldreq	r2, [r2, #4]
 800cf50:	6062      	str	r2, [r4, #4]
 800cf52:	bf04      	itt	eq
 800cf54:	1809      	addeq	r1, r1, r0
 800cf56:	6021      	streq	r1, [r4, #0]
 800cf58:	605c      	str	r4, [r3, #4]
 800cf5a:	e7c7      	b.n	800ceec <_free_r+0x24>
 800cf5c:	bd38      	pop	{r3, r4, r5, pc}
 800cf5e:	bf00      	nop
 800cf60:	2000067c 	.word	0x2000067c

0800cf64 <_malloc_r>:
 800cf64:	b570      	push	{r4, r5, r6, lr}
 800cf66:	1ccd      	adds	r5, r1, #3
 800cf68:	f025 0503 	bic.w	r5, r5, #3
 800cf6c:	3508      	adds	r5, #8
 800cf6e:	2d0c      	cmp	r5, #12
 800cf70:	bf38      	it	cc
 800cf72:	250c      	movcc	r5, #12
 800cf74:	2d00      	cmp	r5, #0
 800cf76:	4606      	mov	r6, r0
 800cf78:	db01      	blt.n	800cf7e <_malloc_r+0x1a>
 800cf7a:	42a9      	cmp	r1, r5
 800cf7c:	d903      	bls.n	800cf86 <_malloc_r+0x22>
 800cf7e:	230c      	movs	r3, #12
 800cf80:	6033      	str	r3, [r6, #0]
 800cf82:	2000      	movs	r0, #0
 800cf84:	bd70      	pop	{r4, r5, r6, pc}
 800cf86:	f000 f877 	bl	800d078 <__malloc_lock>
 800cf8a:	4a21      	ldr	r2, [pc, #132]	; (800d010 <_malloc_r+0xac>)
 800cf8c:	6814      	ldr	r4, [r2, #0]
 800cf8e:	4621      	mov	r1, r4
 800cf90:	b991      	cbnz	r1, 800cfb8 <_malloc_r+0x54>
 800cf92:	4c20      	ldr	r4, [pc, #128]	; (800d014 <_malloc_r+0xb0>)
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	b91b      	cbnz	r3, 800cfa0 <_malloc_r+0x3c>
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f000 f83d 	bl	800d018 <_sbrk_r>
 800cf9e:	6020      	str	r0, [r4, #0]
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f000 f838 	bl	800d018 <_sbrk_r>
 800cfa8:	1c43      	adds	r3, r0, #1
 800cfaa:	d124      	bne.n	800cff6 <_malloc_r+0x92>
 800cfac:	230c      	movs	r3, #12
 800cfae:	6033      	str	r3, [r6, #0]
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	f000 f862 	bl	800d07a <__malloc_unlock>
 800cfb6:	e7e4      	b.n	800cf82 <_malloc_r+0x1e>
 800cfb8:	680b      	ldr	r3, [r1, #0]
 800cfba:	1b5b      	subs	r3, r3, r5
 800cfbc:	d418      	bmi.n	800cff0 <_malloc_r+0x8c>
 800cfbe:	2b0b      	cmp	r3, #11
 800cfc0:	d90f      	bls.n	800cfe2 <_malloc_r+0x7e>
 800cfc2:	600b      	str	r3, [r1, #0]
 800cfc4:	50cd      	str	r5, [r1, r3]
 800cfc6:	18cc      	adds	r4, r1, r3
 800cfc8:	4630      	mov	r0, r6
 800cfca:	f000 f856 	bl	800d07a <__malloc_unlock>
 800cfce:	f104 000b 	add.w	r0, r4, #11
 800cfd2:	1d23      	adds	r3, r4, #4
 800cfd4:	f020 0007 	bic.w	r0, r0, #7
 800cfd8:	1ac3      	subs	r3, r0, r3
 800cfda:	d0d3      	beq.n	800cf84 <_malloc_r+0x20>
 800cfdc:	425a      	negs	r2, r3
 800cfde:	50e2      	str	r2, [r4, r3]
 800cfe0:	e7d0      	b.n	800cf84 <_malloc_r+0x20>
 800cfe2:	428c      	cmp	r4, r1
 800cfe4:	684b      	ldr	r3, [r1, #4]
 800cfe6:	bf16      	itet	ne
 800cfe8:	6063      	strne	r3, [r4, #4]
 800cfea:	6013      	streq	r3, [r2, #0]
 800cfec:	460c      	movne	r4, r1
 800cfee:	e7eb      	b.n	800cfc8 <_malloc_r+0x64>
 800cff0:	460c      	mov	r4, r1
 800cff2:	6849      	ldr	r1, [r1, #4]
 800cff4:	e7cc      	b.n	800cf90 <_malloc_r+0x2c>
 800cff6:	1cc4      	adds	r4, r0, #3
 800cff8:	f024 0403 	bic.w	r4, r4, #3
 800cffc:	42a0      	cmp	r0, r4
 800cffe:	d005      	beq.n	800d00c <_malloc_r+0xa8>
 800d000:	1a21      	subs	r1, r4, r0
 800d002:	4630      	mov	r0, r6
 800d004:	f000 f808 	bl	800d018 <_sbrk_r>
 800d008:	3001      	adds	r0, #1
 800d00a:	d0cf      	beq.n	800cfac <_malloc_r+0x48>
 800d00c:	6025      	str	r5, [r4, #0]
 800d00e:	e7db      	b.n	800cfc8 <_malloc_r+0x64>
 800d010:	2000067c 	.word	0x2000067c
 800d014:	20000680 	.word	0x20000680

0800d018 <_sbrk_r>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	4c06      	ldr	r4, [pc, #24]	; (800d034 <_sbrk_r+0x1c>)
 800d01c:	2300      	movs	r3, #0
 800d01e:	4605      	mov	r5, r0
 800d020:	4608      	mov	r0, r1
 800d022:	6023      	str	r3, [r4, #0]
 800d024:	f7f5 fa60 	bl	80024e8 <_sbrk>
 800d028:	1c43      	adds	r3, r0, #1
 800d02a:	d102      	bne.n	800d032 <_sbrk_r+0x1a>
 800d02c:	6823      	ldr	r3, [r4, #0]
 800d02e:	b103      	cbz	r3, 800d032 <_sbrk_r+0x1a>
 800d030:	602b      	str	r3, [r5, #0]
 800d032:	bd38      	pop	{r3, r4, r5, pc}
 800d034:	2001f8c8 	.word	0x2001f8c8

0800d038 <siprintf>:
 800d038:	b40e      	push	{r1, r2, r3}
 800d03a:	b500      	push	{lr}
 800d03c:	b09c      	sub	sp, #112	; 0x70
 800d03e:	ab1d      	add	r3, sp, #116	; 0x74
 800d040:	9002      	str	r0, [sp, #8]
 800d042:	9006      	str	r0, [sp, #24]
 800d044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d048:	4809      	ldr	r0, [pc, #36]	; (800d070 <siprintf+0x38>)
 800d04a:	9107      	str	r1, [sp, #28]
 800d04c:	9104      	str	r1, [sp, #16]
 800d04e:	4909      	ldr	r1, [pc, #36]	; (800d074 <siprintf+0x3c>)
 800d050:	f853 2b04 	ldr.w	r2, [r3], #4
 800d054:	9105      	str	r1, [sp, #20]
 800d056:	6800      	ldr	r0, [r0, #0]
 800d058:	9301      	str	r3, [sp, #4]
 800d05a:	a902      	add	r1, sp, #8
 800d05c:	f000 f868 	bl	800d130 <_svfiprintf_r>
 800d060:	9b02      	ldr	r3, [sp, #8]
 800d062:	2200      	movs	r2, #0
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	b01c      	add	sp, #112	; 0x70
 800d068:	f85d eb04 	ldr.w	lr, [sp], #4
 800d06c:	b003      	add	sp, #12
 800d06e:	4770      	bx	lr
 800d070:	200001a4 	.word	0x200001a4
 800d074:	ffff0208 	.word	0xffff0208

0800d078 <__malloc_lock>:
 800d078:	4770      	bx	lr

0800d07a <__malloc_unlock>:
 800d07a:	4770      	bx	lr

0800d07c <__ssputs_r>:
 800d07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d080:	688e      	ldr	r6, [r1, #8]
 800d082:	429e      	cmp	r6, r3
 800d084:	4682      	mov	sl, r0
 800d086:	460c      	mov	r4, r1
 800d088:	4690      	mov	r8, r2
 800d08a:	4699      	mov	r9, r3
 800d08c:	d837      	bhi.n	800d0fe <__ssputs_r+0x82>
 800d08e:	898a      	ldrh	r2, [r1, #12]
 800d090:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d094:	d031      	beq.n	800d0fa <__ssputs_r+0x7e>
 800d096:	6825      	ldr	r5, [r4, #0]
 800d098:	6909      	ldr	r1, [r1, #16]
 800d09a:	1a6f      	subs	r7, r5, r1
 800d09c:	6965      	ldr	r5, [r4, #20]
 800d09e:	2302      	movs	r3, #2
 800d0a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0a4:	fb95 f5f3 	sdiv	r5, r5, r3
 800d0a8:	f109 0301 	add.w	r3, r9, #1
 800d0ac:	443b      	add	r3, r7
 800d0ae:	429d      	cmp	r5, r3
 800d0b0:	bf38      	it	cc
 800d0b2:	461d      	movcc	r5, r3
 800d0b4:	0553      	lsls	r3, r2, #21
 800d0b6:	d530      	bpl.n	800d11a <__ssputs_r+0x9e>
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7ff ff53 	bl	800cf64 <_malloc_r>
 800d0be:	4606      	mov	r6, r0
 800d0c0:	b950      	cbnz	r0, 800d0d8 <__ssputs_r+0x5c>
 800d0c2:	230c      	movs	r3, #12
 800d0c4:	f8ca 3000 	str.w	r3, [sl]
 800d0c8:	89a3      	ldrh	r3, [r4, #12]
 800d0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ce:	81a3      	strh	r3, [r4, #12]
 800d0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d8:	463a      	mov	r2, r7
 800d0da:	6921      	ldr	r1, [r4, #16]
 800d0dc:	f000 faa8 	bl	800d630 <memcpy>
 800d0e0:	89a3      	ldrh	r3, [r4, #12]
 800d0e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0ea:	81a3      	strh	r3, [r4, #12]
 800d0ec:	6126      	str	r6, [r4, #16]
 800d0ee:	6165      	str	r5, [r4, #20]
 800d0f0:	443e      	add	r6, r7
 800d0f2:	1bed      	subs	r5, r5, r7
 800d0f4:	6026      	str	r6, [r4, #0]
 800d0f6:	60a5      	str	r5, [r4, #8]
 800d0f8:	464e      	mov	r6, r9
 800d0fa:	454e      	cmp	r6, r9
 800d0fc:	d900      	bls.n	800d100 <__ssputs_r+0x84>
 800d0fe:	464e      	mov	r6, r9
 800d100:	4632      	mov	r2, r6
 800d102:	4641      	mov	r1, r8
 800d104:	6820      	ldr	r0, [r4, #0]
 800d106:	f000 fa9e 	bl	800d646 <memmove>
 800d10a:	68a3      	ldr	r3, [r4, #8]
 800d10c:	1b9b      	subs	r3, r3, r6
 800d10e:	60a3      	str	r3, [r4, #8]
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	441e      	add	r6, r3
 800d114:	6026      	str	r6, [r4, #0]
 800d116:	2000      	movs	r0, #0
 800d118:	e7dc      	b.n	800d0d4 <__ssputs_r+0x58>
 800d11a:	462a      	mov	r2, r5
 800d11c:	f000 faac 	bl	800d678 <_realloc_r>
 800d120:	4606      	mov	r6, r0
 800d122:	2800      	cmp	r0, #0
 800d124:	d1e2      	bne.n	800d0ec <__ssputs_r+0x70>
 800d126:	6921      	ldr	r1, [r4, #16]
 800d128:	4650      	mov	r0, sl
 800d12a:	f7ff fecd 	bl	800cec8 <_free_r>
 800d12e:	e7c8      	b.n	800d0c2 <__ssputs_r+0x46>

0800d130 <_svfiprintf_r>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	461d      	mov	r5, r3
 800d136:	898b      	ldrh	r3, [r1, #12]
 800d138:	061f      	lsls	r7, r3, #24
 800d13a:	b09d      	sub	sp, #116	; 0x74
 800d13c:	4680      	mov	r8, r0
 800d13e:	460c      	mov	r4, r1
 800d140:	4616      	mov	r6, r2
 800d142:	d50f      	bpl.n	800d164 <_svfiprintf_r+0x34>
 800d144:	690b      	ldr	r3, [r1, #16]
 800d146:	b96b      	cbnz	r3, 800d164 <_svfiprintf_r+0x34>
 800d148:	2140      	movs	r1, #64	; 0x40
 800d14a:	f7ff ff0b 	bl	800cf64 <_malloc_r>
 800d14e:	6020      	str	r0, [r4, #0]
 800d150:	6120      	str	r0, [r4, #16]
 800d152:	b928      	cbnz	r0, 800d160 <_svfiprintf_r+0x30>
 800d154:	230c      	movs	r3, #12
 800d156:	f8c8 3000 	str.w	r3, [r8]
 800d15a:	f04f 30ff 	mov.w	r0, #4294967295
 800d15e:	e0c8      	b.n	800d2f2 <_svfiprintf_r+0x1c2>
 800d160:	2340      	movs	r3, #64	; 0x40
 800d162:	6163      	str	r3, [r4, #20]
 800d164:	2300      	movs	r3, #0
 800d166:	9309      	str	r3, [sp, #36]	; 0x24
 800d168:	2320      	movs	r3, #32
 800d16a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d16e:	2330      	movs	r3, #48	; 0x30
 800d170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d174:	9503      	str	r5, [sp, #12]
 800d176:	f04f 0b01 	mov.w	fp, #1
 800d17a:	4637      	mov	r7, r6
 800d17c:	463d      	mov	r5, r7
 800d17e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d182:	b10b      	cbz	r3, 800d188 <_svfiprintf_r+0x58>
 800d184:	2b25      	cmp	r3, #37	; 0x25
 800d186:	d13e      	bne.n	800d206 <_svfiprintf_r+0xd6>
 800d188:	ebb7 0a06 	subs.w	sl, r7, r6
 800d18c:	d00b      	beq.n	800d1a6 <_svfiprintf_r+0x76>
 800d18e:	4653      	mov	r3, sl
 800d190:	4632      	mov	r2, r6
 800d192:	4621      	mov	r1, r4
 800d194:	4640      	mov	r0, r8
 800d196:	f7ff ff71 	bl	800d07c <__ssputs_r>
 800d19a:	3001      	adds	r0, #1
 800d19c:	f000 80a4 	beq.w	800d2e8 <_svfiprintf_r+0x1b8>
 800d1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a2:	4453      	add	r3, sl
 800d1a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a6:	783b      	ldrb	r3, [r7, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 809d 	beq.w	800d2e8 <_svfiprintf_r+0x1b8>
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1b8:	9304      	str	r3, [sp, #16]
 800d1ba:	9307      	str	r3, [sp, #28]
 800d1bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1c0:	931a      	str	r3, [sp, #104]	; 0x68
 800d1c2:	462f      	mov	r7, r5
 800d1c4:	2205      	movs	r2, #5
 800d1c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d1ca:	4850      	ldr	r0, [pc, #320]	; (800d30c <_svfiprintf_r+0x1dc>)
 800d1cc:	f7f3 f810 	bl	80001f0 <memchr>
 800d1d0:	9b04      	ldr	r3, [sp, #16]
 800d1d2:	b9d0      	cbnz	r0, 800d20a <_svfiprintf_r+0xda>
 800d1d4:	06d9      	lsls	r1, r3, #27
 800d1d6:	bf44      	itt	mi
 800d1d8:	2220      	movmi	r2, #32
 800d1da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d1de:	071a      	lsls	r2, r3, #28
 800d1e0:	bf44      	itt	mi
 800d1e2:	222b      	movmi	r2, #43	; 0x2b
 800d1e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d1e8:	782a      	ldrb	r2, [r5, #0]
 800d1ea:	2a2a      	cmp	r2, #42	; 0x2a
 800d1ec:	d015      	beq.n	800d21a <_svfiprintf_r+0xea>
 800d1ee:	9a07      	ldr	r2, [sp, #28]
 800d1f0:	462f      	mov	r7, r5
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	250a      	movs	r5, #10
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1fc:	3b30      	subs	r3, #48	; 0x30
 800d1fe:	2b09      	cmp	r3, #9
 800d200:	d94d      	bls.n	800d29e <_svfiprintf_r+0x16e>
 800d202:	b1b8      	cbz	r0, 800d234 <_svfiprintf_r+0x104>
 800d204:	e00f      	b.n	800d226 <_svfiprintf_r+0xf6>
 800d206:	462f      	mov	r7, r5
 800d208:	e7b8      	b.n	800d17c <_svfiprintf_r+0x4c>
 800d20a:	4a40      	ldr	r2, [pc, #256]	; (800d30c <_svfiprintf_r+0x1dc>)
 800d20c:	1a80      	subs	r0, r0, r2
 800d20e:	fa0b f000 	lsl.w	r0, fp, r0
 800d212:	4318      	orrs	r0, r3
 800d214:	9004      	str	r0, [sp, #16]
 800d216:	463d      	mov	r5, r7
 800d218:	e7d3      	b.n	800d1c2 <_svfiprintf_r+0x92>
 800d21a:	9a03      	ldr	r2, [sp, #12]
 800d21c:	1d11      	adds	r1, r2, #4
 800d21e:	6812      	ldr	r2, [r2, #0]
 800d220:	9103      	str	r1, [sp, #12]
 800d222:	2a00      	cmp	r2, #0
 800d224:	db01      	blt.n	800d22a <_svfiprintf_r+0xfa>
 800d226:	9207      	str	r2, [sp, #28]
 800d228:	e004      	b.n	800d234 <_svfiprintf_r+0x104>
 800d22a:	4252      	negs	r2, r2
 800d22c:	f043 0302 	orr.w	r3, r3, #2
 800d230:	9207      	str	r2, [sp, #28]
 800d232:	9304      	str	r3, [sp, #16]
 800d234:	783b      	ldrb	r3, [r7, #0]
 800d236:	2b2e      	cmp	r3, #46	; 0x2e
 800d238:	d10c      	bne.n	800d254 <_svfiprintf_r+0x124>
 800d23a:	787b      	ldrb	r3, [r7, #1]
 800d23c:	2b2a      	cmp	r3, #42	; 0x2a
 800d23e:	d133      	bne.n	800d2a8 <_svfiprintf_r+0x178>
 800d240:	9b03      	ldr	r3, [sp, #12]
 800d242:	1d1a      	adds	r2, r3, #4
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	9203      	str	r2, [sp, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	bfb8      	it	lt
 800d24c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d250:	3702      	adds	r7, #2
 800d252:	9305      	str	r3, [sp, #20]
 800d254:	4d2e      	ldr	r5, [pc, #184]	; (800d310 <_svfiprintf_r+0x1e0>)
 800d256:	7839      	ldrb	r1, [r7, #0]
 800d258:	2203      	movs	r2, #3
 800d25a:	4628      	mov	r0, r5
 800d25c:	f7f2 ffc8 	bl	80001f0 <memchr>
 800d260:	b138      	cbz	r0, 800d272 <_svfiprintf_r+0x142>
 800d262:	2340      	movs	r3, #64	; 0x40
 800d264:	1b40      	subs	r0, r0, r5
 800d266:	fa03 f000 	lsl.w	r0, r3, r0
 800d26a:	9b04      	ldr	r3, [sp, #16]
 800d26c:	4303      	orrs	r3, r0
 800d26e:	3701      	adds	r7, #1
 800d270:	9304      	str	r3, [sp, #16]
 800d272:	7839      	ldrb	r1, [r7, #0]
 800d274:	4827      	ldr	r0, [pc, #156]	; (800d314 <_svfiprintf_r+0x1e4>)
 800d276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d27a:	2206      	movs	r2, #6
 800d27c:	1c7e      	adds	r6, r7, #1
 800d27e:	f7f2 ffb7 	bl	80001f0 <memchr>
 800d282:	2800      	cmp	r0, #0
 800d284:	d038      	beq.n	800d2f8 <_svfiprintf_r+0x1c8>
 800d286:	4b24      	ldr	r3, [pc, #144]	; (800d318 <_svfiprintf_r+0x1e8>)
 800d288:	bb13      	cbnz	r3, 800d2d0 <_svfiprintf_r+0x1a0>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	3307      	adds	r3, #7
 800d28e:	f023 0307 	bic.w	r3, r3, #7
 800d292:	3308      	adds	r3, #8
 800d294:	9303      	str	r3, [sp, #12]
 800d296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d298:	444b      	add	r3, r9
 800d29a:	9309      	str	r3, [sp, #36]	; 0x24
 800d29c:	e76d      	b.n	800d17a <_svfiprintf_r+0x4a>
 800d29e:	fb05 3202 	mla	r2, r5, r2, r3
 800d2a2:	2001      	movs	r0, #1
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	e7a6      	b.n	800d1f6 <_svfiprintf_r+0xc6>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	3701      	adds	r7, #1
 800d2ac:	9305      	str	r3, [sp, #20]
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	250a      	movs	r5, #10
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2b8:	3a30      	subs	r2, #48	; 0x30
 800d2ba:	2a09      	cmp	r2, #9
 800d2bc:	d903      	bls.n	800d2c6 <_svfiprintf_r+0x196>
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d0c8      	beq.n	800d254 <_svfiprintf_r+0x124>
 800d2c2:	9105      	str	r1, [sp, #20]
 800d2c4:	e7c6      	b.n	800d254 <_svfiprintf_r+0x124>
 800d2c6:	fb05 2101 	mla	r1, r5, r1, r2
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	4607      	mov	r7, r0
 800d2ce:	e7f0      	b.n	800d2b2 <_svfiprintf_r+0x182>
 800d2d0:	ab03      	add	r3, sp, #12
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	4622      	mov	r2, r4
 800d2d6:	4b11      	ldr	r3, [pc, #68]	; (800d31c <_svfiprintf_r+0x1ec>)
 800d2d8:	a904      	add	r1, sp, #16
 800d2da:	4640      	mov	r0, r8
 800d2dc:	f3af 8000 	nop.w
 800d2e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d2e4:	4681      	mov	r9, r0
 800d2e6:	d1d6      	bne.n	800d296 <_svfiprintf_r+0x166>
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	065b      	lsls	r3, r3, #25
 800d2ec:	f53f af35 	bmi.w	800d15a <_svfiprintf_r+0x2a>
 800d2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2f2:	b01d      	add	sp, #116	; 0x74
 800d2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f8:	ab03      	add	r3, sp, #12
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	4622      	mov	r2, r4
 800d2fe:	4b07      	ldr	r3, [pc, #28]	; (800d31c <_svfiprintf_r+0x1ec>)
 800d300:	a904      	add	r1, sp, #16
 800d302:	4640      	mov	r0, r8
 800d304:	f000 f882 	bl	800d40c <_printf_i>
 800d308:	e7ea      	b.n	800d2e0 <_svfiprintf_r+0x1b0>
 800d30a:	bf00      	nop
 800d30c:	0800e83c 	.word	0x0800e83c
 800d310:	0800e842 	.word	0x0800e842
 800d314:	0800e846 	.word	0x0800e846
 800d318:	00000000 	.word	0x00000000
 800d31c:	0800d07d 	.word	0x0800d07d

0800d320 <_printf_common>:
 800d320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d324:	4691      	mov	r9, r2
 800d326:	461f      	mov	r7, r3
 800d328:	688a      	ldr	r2, [r1, #8]
 800d32a:	690b      	ldr	r3, [r1, #16]
 800d32c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d330:	4293      	cmp	r3, r2
 800d332:	bfb8      	it	lt
 800d334:	4613      	movlt	r3, r2
 800d336:	f8c9 3000 	str.w	r3, [r9]
 800d33a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d33e:	4606      	mov	r6, r0
 800d340:	460c      	mov	r4, r1
 800d342:	b112      	cbz	r2, 800d34a <_printf_common+0x2a>
 800d344:	3301      	adds	r3, #1
 800d346:	f8c9 3000 	str.w	r3, [r9]
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	0699      	lsls	r1, r3, #26
 800d34e:	bf42      	ittt	mi
 800d350:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d354:	3302      	addmi	r3, #2
 800d356:	f8c9 3000 	strmi.w	r3, [r9]
 800d35a:	6825      	ldr	r5, [r4, #0]
 800d35c:	f015 0506 	ands.w	r5, r5, #6
 800d360:	d107      	bne.n	800d372 <_printf_common+0x52>
 800d362:	f104 0a19 	add.w	sl, r4, #25
 800d366:	68e3      	ldr	r3, [r4, #12]
 800d368:	f8d9 2000 	ldr.w	r2, [r9]
 800d36c:	1a9b      	subs	r3, r3, r2
 800d36e:	42ab      	cmp	r3, r5
 800d370:	dc28      	bgt.n	800d3c4 <_printf_common+0xa4>
 800d372:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d376:	6822      	ldr	r2, [r4, #0]
 800d378:	3300      	adds	r3, #0
 800d37a:	bf18      	it	ne
 800d37c:	2301      	movne	r3, #1
 800d37e:	0692      	lsls	r2, r2, #26
 800d380:	d42d      	bmi.n	800d3de <_printf_common+0xbe>
 800d382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d386:	4639      	mov	r1, r7
 800d388:	4630      	mov	r0, r6
 800d38a:	47c0      	blx	r8
 800d38c:	3001      	adds	r0, #1
 800d38e:	d020      	beq.n	800d3d2 <_printf_common+0xb2>
 800d390:	6823      	ldr	r3, [r4, #0]
 800d392:	68e5      	ldr	r5, [r4, #12]
 800d394:	f8d9 2000 	ldr.w	r2, [r9]
 800d398:	f003 0306 	and.w	r3, r3, #6
 800d39c:	2b04      	cmp	r3, #4
 800d39e:	bf08      	it	eq
 800d3a0:	1aad      	subeq	r5, r5, r2
 800d3a2:	68a3      	ldr	r3, [r4, #8]
 800d3a4:	6922      	ldr	r2, [r4, #16]
 800d3a6:	bf0c      	ite	eq
 800d3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3ac:	2500      	movne	r5, #0
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	bfc4      	itt	gt
 800d3b2:	1a9b      	subgt	r3, r3, r2
 800d3b4:	18ed      	addgt	r5, r5, r3
 800d3b6:	f04f 0900 	mov.w	r9, #0
 800d3ba:	341a      	adds	r4, #26
 800d3bc:	454d      	cmp	r5, r9
 800d3be:	d11a      	bne.n	800d3f6 <_printf_common+0xd6>
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	e008      	b.n	800d3d6 <_printf_common+0xb6>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	4652      	mov	r2, sl
 800d3c8:	4639      	mov	r1, r7
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	47c0      	blx	r8
 800d3ce:	3001      	adds	r0, #1
 800d3d0:	d103      	bne.n	800d3da <_printf_common+0xba>
 800d3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3da:	3501      	adds	r5, #1
 800d3dc:	e7c3      	b.n	800d366 <_printf_common+0x46>
 800d3de:	18e1      	adds	r1, r4, r3
 800d3e0:	1c5a      	adds	r2, r3, #1
 800d3e2:	2030      	movs	r0, #48	; 0x30
 800d3e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3e8:	4422      	add	r2, r4
 800d3ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3f2:	3302      	adds	r3, #2
 800d3f4:	e7c5      	b.n	800d382 <_printf_common+0x62>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	4622      	mov	r2, r4
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	47c0      	blx	r8
 800d400:	3001      	adds	r0, #1
 800d402:	d0e6      	beq.n	800d3d2 <_printf_common+0xb2>
 800d404:	f109 0901 	add.w	r9, r9, #1
 800d408:	e7d8      	b.n	800d3bc <_printf_common+0x9c>
	...

0800d40c <_printf_i>:
 800d40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d410:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d414:	460c      	mov	r4, r1
 800d416:	7e09      	ldrb	r1, [r1, #24]
 800d418:	b085      	sub	sp, #20
 800d41a:	296e      	cmp	r1, #110	; 0x6e
 800d41c:	4617      	mov	r7, r2
 800d41e:	4606      	mov	r6, r0
 800d420:	4698      	mov	r8, r3
 800d422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d424:	f000 80b3 	beq.w	800d58e <_printf_i+0x182>
 800d428:	d822      	bhi.n	800d470 <_printf_i+0x64>
 800d42a:	2963      	cmp	r1, #99	; 0x63
 800d42c:	d036      	beq.n	800d49c <_printf_i+0x90>
 800d42e:	d80a      	bhi.n	800d446 <_printf_i+0x3a>
 800d430:	2900      	cmp	r1, #0
 800d432:	f000 80b9 	beq.w	800d5a8 <_printf_i+0x19c>
 800d436:	2958      	cmp	r1, #88	; 0x58
 800d438:	f000 8083 	beq.w	800d542 <_printf_i+0x136>
 800d43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d440:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d444:	e032      	b.n	800d4ac <_printf_i+0xa0>
 800d446:	2964      	cmp	r1, #100	; 0x64
 800d448:	d001      	beq.n	800d44e <_printf_i+0x42>
 800d44a:	2969      	cmp	r1, #105	; 0x69
 800d44c:	d1f6      	bne.n	800d43c <_printf_i+0x30>
 800d44e:	6820      	ldr	r0, [r4, #0]
 800d450:	6813      	ldr	r3, [r2, #0]
 800d452:	0605      	lsls	r5, r0, #24
 800d454:	f103 0104 	add.w	r1, r3, #4
 800d458:	d52a      	bpl.n	800d4b0 <_printf_i+0xa4>
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6011      	str	r1, [r2, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	da03      	bge.n	800d46a <_printf_i+0x5e>
 800d462:	222d      	movs	r2, #45	; 0x2d
 800d464:	425b      	negs	r3, r3
 800d466:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d46a:	486f      	ldr	r0, [pc, #444]	; (800d628 <_printf_i+0x21c>)
 800d46c:	220a      	movs	r2, #10
 800d46e:	e039      	b.n	800d4e4 <_printf_i+0xd8>
 800d470:	2973      	cmp	r1, #115	; 0x73
 800d472:	f000 809d 	beq.w	800d5b0 <_printf_i+0x1a4>
 800d476:	d808      	bhi.n	800d48a <_printf_i+0x7e>
 800d478:	296f      	cmp	r1, #111	; 0x6f
 800d47a:	d020      	beq.n	800d4be <_printf_i+0xb2>
 800d47c:	2970      	cmp	r1, #112	; 0x70
 800d47e:	d1dd      	bne.n	800d43c <_printf_i+0x30>
 800d480:	6823      	ldr	r3, [r4, #0]
 800d482:	f043 0320 	orr.w	r3, r3, #32
 800d486:	6023      	str	r3, [r4, #0]
 800d488:	e003      	b.n	800d492 <_printf_i+0x86>
 800d48a:	2975      	cmp	r1, #117	; 0x75
 800d48c:	d017      	beq.n	800d4be <_printf_i+0xb2>
 800d48e:	2978      	cmp	r1, #120	; 0x78
 800d490:	d1d4      	bne.n	800d43c <_printf_i+0x30>
 800d492:	2378      	movs	r3, #120	; 0x78
 800d494:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d498:	4864      	ldr	r0, [pc, #400]	; (800d62c <_printf_i+0x220>)
 800d49a:	e055      	b.n	800d548 <_printf_i+0x13c>
 800d49c:	6813      	ldr	r3, [r2, #0]
 800d49e:	1d19      	adds	r1, r3, #4
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	6011      	str	r1, [r2, #0]
 800d4a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e08c      	b.n	800d5ca <_printf_i+0x1be>
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	6011      	str	r1, [r2, #0]
 800d4b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d4b8:	bf18      	it	ne
 800d4ba:	b21b      	sxthne	r3, r3
 800d4bc:	e7cf      	b.n	800d45e <_printf_i+0x52>
 800d4be:	6813      	ldr	r3, [r2, #0]
 800d4c0:	6825      	ldr	r5, [r4, #0]
 800d4c2:	1d18      	adds	r0, r3, #4
 800d4c4:	6010      	str	r0, [r2, #0]
 800d4c6:	0628      	lsls	r0, r5, #24
 800d4c8:	d501      	bpl.n	800d4ce <_printf_i+0xc2>
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	e002      	b.n	800d4d4 <_printf_i+0xc8>
 800d4ce:	0668      	lsls	r0, r5, #25
 800d4d0:	d5fb      	bpl.n	800d4ca <_printf_i+0xbe>
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	4854      	ldr	r0, [pc, #336]	; (800d628 <_printf_i+0x21c>)
 800d4d6:	296f      	cmp	r1, #111	; 0x6f
 800d4d8:	bf14      	ite	ne
 800d4da:	220a      	movne	r2, #10
 800d4dc:	2208      	moveq	r2, #8
 800d4de:	2100      	movs	r1, #0
 800d4e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4e4:	6865      	ldr	r5, [r4, #4]
 800d4e6:	60a5      	str	r5, [r4, #8]
 800d4e8:	2d00      	cmp	r5, #0
 800d4ea:	f2c0 8095 	blt.w	800d618 <_printf_i+0x20c>
 800d4ee:	6821      	ldr	r1, [r4, #0]
 800d4f0:	f021 0104 	bic.w	r1, r1, #4
 800d4f4:	6021      	str	r1, [r4, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d13d      	bne.n	800d576 <_printf_i+0x16a>
 800d4fa:	2d00      	cmp	r5, #0
 800d4fc:	f040 808e 	bne.w	800d61c <_printf_i+0x210>
 800d500:	4665      	mov	r5, ip
 800d502:	2a08      	cmp	r2, #8
 800d504:	d10b      	bne.n	800d51e <_printf_i+0x112>
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	07db      	lsls	r3, r3, #31
 800d50a:	d508      	bpl.n	800d51e <_printf_i+0x112>
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	6862      	ldr	r2, [r4, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	bfde      	ittt	le
 800d514:	2330      	movle	r3, #48	; 0x30
 800d516:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d51a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d51e:	ebac 0305 	sub.w	r3, ip, r5
 800d522:	6123      	str	r3, [r4, #16]
 800d524:	f8cd 8000 	str.w	r8, [sp]
 800d528:	463b      	mov	r3, r7
 800d52a:	aa03      	add	r2, sp, #12
 800d52c:	4621      	mov	r1, r4
 800d52e:	4630      	mov	r0, r6
 800d530:	f7ff fef6 	bl	800d320 <_printf_common>
 800d534:	3001      	adds	r0, #1
 800d536:	d14d      	bne.n	800d5d4 <_printf_i+0x1c8>
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	b005      	add	sp, #20
 800d53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d542:	4839      	ldr	r0, [pc, #228]	; (800d628 <_printf_i+0x21c>)
 800d544:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d548:	6813      	ldr	r3, [r2, #0]
 800d54a:	6821      	ldr	r1, [r4, #0]
 800d54c:	1d1d      	adds	r5, r3, #4
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	6015      	str	r5, [r2, #0]
 800d552:	060a      	lsls	r2, r1, #24
 800d554:	d50b      	bpl.n	800d56e <_printf_i+0x162>
 800d556:	07ca      	lsls	r2, r1, #31
 800d558:	bf44      	itt	mi
 800d55a:	f041 0120 	orrmi.w	r1, r1, #32
 800d55e:	6021      	strmi	r1, [r4, #0]
 800d560:	b91b      	cbnz	r3, 800d56a <_printf_i+0x15e>
 800d562:	6822      	ldr	r2, [r4, #0]
 800d564:	f022 0220 	bic.w	r2, r2, #32
 800d568:	6022      	str	r2, [r4, #0]
 800d56a:	2210      	movs	r2, #16
 800d56c:	e7b7      	b.n	800d4de <_printf_i+0xd2>
 800d56e:	064d      	lsls	r5, r1, #25
 800d570:	bf48      	it	mi
 800d572:	b29b      	uxthmi	r3, r3
 800d574:	e7ef      	b.n	800d556 <_printf_i+0x14a>
 800d576:	4665      	mov	r5, ip
 800d578:	fbb3 f1f2 	udiv	r1, r3, r2
 800d57c:	fb02 3311 	mls	r3, r2, r1, r3
 800d580:	5cc3      	ldrb	r3, [r0, r3]
 800d582:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d586:	460b      	mov	r3, r1
 800d588:	2900      	cmp	r1, #0
 800d58a:	d1f5      	bne.n	800d578 <_printf_i+0x16c>
 800d58c:	e7b9      	b.n	800d502 <_printf_i+0xf6>
 800d58e:	6813      	ldr	r3, [r2, #0]
 800d590:	6825      	ldr	r5, [r4, #0]
 800d592:	6961      	ldr	r1, [r4, #20]
 800d594:	1d18      	adds	r0, r3, #4
 800d596:	6010      	str	r0, [r2, #0]
 800d598:	0628      	lsls	r0, r5, #24
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	d501      	bpl.n	800d5a2 <_printf_i+0x196>
 800d59e:	6019      	str	r1, [r3, #0]
 800d5a0:	e002      	b.n	800d5a8 <_printf_i+0x19c>
 800d5a2:	066a      	lsls	r2, r5, #25
 800d5a4:	d5fb      	bpl.n	800d59e <_printf_i+0x192>
 800d5a6:	8019      	strh	r1, [r3, #0]
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	6123      	str	r3, [r4, #16]
 800d5ac:	4665      	mov	r5, ip
 800d5ae:	e7b9      	b.n	800d524 <_printf_i+0x118>
 800d5b0:	6813      	ldr	r3, [r2, #0]
 800d5b2:	1d19      	adds	r1, r3, #4
 800d5b4:	6011      	str	r1, [r2, #0]
 800d5b6:	681d      	ldr	r5, [r3, #0]
 800d5b8:	6862      	ldr	r2, [r4, #4]
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	4628      	mov	r0, r5
 800d5be:	f7f2 fe17 	bl	80001f0 <memchr>
 800d5c2:	b108      	cbz	r0, 800d5c8 <_printf_i+0x1bc>
 800d5c4:	1b40      	subs	r0, r0, r5
 800d5c6:	6060      	str	r0, [r4, #4]
 800d5c8:	6863      	ldr	r3, [r4, #4]
 800d5ca:	6123      	str	r3, [r4, #16]
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5d2:	e7a7      	b.n	800d524 <_printf_i+0x118>
 800d5d4:	6923      	ldr	r3, [r4, #16]
 800d5d6:	462a      	mov	r2, r5
 800d5d8:	4639      	mov	r1, r7
 800d5da:	4630      	mov	r0, r6
 800d5dc:	47c0      	blx	r8
 800d5de:	3001      	adds	r0, #1
 800d5e0:	d0aa      	beq.n	800d538 <_printf_i+0x12c>
 800d5e2:	6823      	ldr	r3, [r4, #0]
 800d5e4:	079b      	lsls	r3, r3, #30
 800d5e6:	d413      	bmi.n	800d610 <_printf_i+0x204>
 800d5e8:	68e0      	ldr	r0, [r4, #12]
 800d5ea:	9b03      	ldr	r3, [sp, #12]
 800d5ec:	4298      	cmp	r0, r3
 800d5ee:	bfb8      	it	lt
 800d5f0:	4618      	movlt	r0, r3
 800d5f2:	e7a3      	b.n	800d53c <_printf_i+0x130>
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	464a      	mov	r2, r9
 800d5f8:	4639      	mov	r1, r7
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	47c0      	blx	r8
 800d5fe:	3001      	adds	r0, #1
 800d600:	d09a      	beq.n	800d538 <_printf_i+0x12c>
 800d602:	3501      	adds	r5, #1
 800d604:	68e3      	ldr	r3, [r4, #12]
 800d606:	9a03      	ldr	r2, [sp, #12]
 800d608:	1a9b      	subs	r3, r3, r2
 800d60a:	42ab      	cmp	r3, r5
 800d60c:	dcf2      	bgt.n	800d5f4 <_printf_i+0x1e8>
 800d60e:	e7eb      	b.n	800d5e8 <_printf_i+0x1dc>
 800d610:	2500      	movs	r5, #0
 800d612:	f104 0919 	add.w	r9, r4, #25
 800d616:	e7f5      	b.n	800d604 <_printf_i+0x1f8>
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d1ac      	bne.n	800d576 <_printf_i+0x16a>
 800d61c:	7803      	ldrb	r3, [r0, #0]
 800d61e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d622:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d626:	e76c      	b.n	800d502 <_printf_i+0xf6>
 800d628:	0800e84d 	.word	0x0800e84d
 800d62c:	0800e85e 	.word	0x0800e85e

0800d630 <memcpy>:
 800d630:	b510      	push	{r4, lr}
 800d632:	1e43      	subs	r3, r0, #1
 800d634:	440a      	add	r2, r1
 800d636:	4291      	cmp	r1, r2
 800d638:	d100      	bne.n	800d63c <memcpy+0xc>
 800d63a:	bd10      	pop	{r4, pc}
 800d63c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d640:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d644:	e7f7      	b.n	800d636 <memcpy+0x6>

0800d646 <memmove>:
 800d646:	4288      	cmp	r0, r1
 800d648:	b510      	push	{r4, lr}
 800d64a:	eb01 0302 	add.w	r3, r1, r2
 800d64e:	d807      	bhi.n	800d660 <memmove+0x1a>
 800d650:	1e42      	subs	r2, r0, #1
 800d652:	4299      	cmp	r1, r3
 800d654:	d00a      	beq.n	800d66c <memmove+0x26>
 800d656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d65a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d65e:	e7f8      	b.n	800d652 <memmove+0xc>
 800d660:	4283      	cmp	r3, r0
 800d662:	d9f5      	bls.n	800d650 <memmove+0xa>
 800d664:	1881      	adds	r1, r0, r2
 800d666:	1ad2      	subs	r2, r2, r3
 800d668:	42d3      	cmn	r3, r2
 800d66a:	d100      	bne.n	800d66e <memmove+0x28>
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d672:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d676:	e7f7      	b.n	800d668 <memmove+0x22>

0800d678 <_realloc_r>:
 800d678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67a:	4607      	mov	r7, r0
 800d67c:	4614      	mov	r4, r2
 800d67e:	460e      	mov	r6, r1
 800d680:	b921      	cbnz	r1, 800d68c <_realloc_r+0x14>
 800d682:	4611      	mov	r1, r2
 800d684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d688:	f7ff bc6c 	b.w	800cf64 <_malloc_r>
 800d68c:	b922      	cbnz	r2, 800d698 <_realloc_r+0x20>
 800d68e:	f7ff fc1b 	bl	800cec8 <_free_r>
 800d692:	4625      	mov	r5, r4
 800d694:	4628      	mov	r0, r5
 800d696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d698:	f000 f814 	bl	800d6c4 <_malloc_usable_size_r>
 800d69c:	42a0      	cmp	r0, r4
 800d69e:	d20f      	bcs.n	800d6c0 <_realloc_r+0x48>
 800d6a0:	4621      	mov	r1, r4
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	f7ff fc5e 	bl	800cf64 <_malloc_r>
 800d6a8:	4605      	mov	r5, r0
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d0f2      	beq.n	800d694 <_realloc_r+0x1c>
 800d6ae:	4631      	mov	r1, r6
 800d6b0:	4622      	mov	r2, r4
 800d6b2:	f7ff ffbd 	bl	800d630 <memcpy>
 800d6b6:	4631      	mov	r1, r6
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	f7ff fc05 	bl	800cec8 <_free_r>
 800d6be:	e7e9      	b.n	800d694 <_realloc_r+0x1c>
 800d6c0:	4635      	mov	r5, r6
 800d6c2:	e7e7      	b.n	800d694 <_realloc_r+0x1c>

0800d6c4 <_malloc_usable_size_r>:
 800d6c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6c8:	1f18      	subs	r0, r3, #4
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	bfbc      	itt	lt
 800d6ce:	580b      	ldrlt	r3, [r1, r0]
 800d6d0:	18c0      	addlt	r0, r0, r3
 800d6d2:	4770      	bx	lr

0800d6d4 <powf>:
 800d6d4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800d6d8:	ed2d 8b04 	vpush	{d8-d9}
 800d6dc:	4ca7      	ldr	r4, [pc, #668]	; (800d97c <powf+0x2a8>)
 800d6de:	b08a      	sub	sp, #40	; 0x28
 800d6e0:	eef0 8a40 	vmov.f32	s17, s0
 800d6e4:	eeb0 8a60 	vmov.f32	s16, s1
 800d6e8:	f000 f958 	bl	800d99c <__ieee754_powf>
 800d6ec:	f994 5000 	ldrsb.w	r5, [r4]
 800d6f0:	1c6b      	adds	r3, r5, #1
 800d6f2:	eeb0 9a40 	vmov.f32	s18, s0
 800d6f6:	4626      	mov	r6, r4
 800d6f8:	d05f      	beq.n	800d7ba <powf+0xe6>
 800d6fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800d6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d702:	d65a      	bvs.n	800d7ba <powf+0xe6>
 800d704:	eef4 8a68 	vcmp.f32	s17, s17
 800d708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70c:	d721      	bvc.n	800d752 <powf+0x7e>
 800d70e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d716:	d150      	bne.n	800d7ba <powf+0xe6>
 800d718:	2301      	movs	r3, #1
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	4b98      	ldr	r3, [pc, #608]	; (800d980 <powf+0x2ac>)
 800d71e:	9301      	str	r3, [sp, #4]
 800d720:	ee18 0a90 	vmov	r0, s17
 800d724:	2300      	movs	r3, #0
 800d726:	9308      	str	r3, [sp, #32]
 800d728:	f7f2 ff16 	bl	8000558 <__aeabi_f2d>
 800d72c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d730:	ee18 0a10 	vmov	r0, s16
 800d734:	f7f2 ff10 	bl	8000558 <__aeabi_f2d>
 800d738:	4b92      	ldr	r3, [pc, #584]	; (800d984 <powf+0x2b0>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	2d02      	cmp	r5, #2
 800d73e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d742:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d746:	d032      	beq.n	800d7ae <powf+0xda>
 800d748:	4668      	mov	r0, sp
 800d74a:	f000 fbea 	bl	800df22 <matherr>
 800d74e:	bb40      	cbnz	r0, 800d7a2 <powf+0xce>
 800d750:	e065      	b.n	800d81e <powf+0x14a>
 800d752:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800d988 <powf+0x2b4>
 800d756:	eef4 8a69 	vcmp.f32	s17, s19
 800d75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d75e:	d163      	bne.n	800d828 <powf+0x154>
 800d760:	eeb4 8a69 	vcmp.f32	s16, s19
 800d764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d768:	d12e      	bne.n	800d7c8 <powf+0xf4>
 800d76a:	2301      	movs	r3, #1
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	4b84      	ldr	r3, [pc, #528]	; (800d980 <powf+0x2ac>)
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	ee18 0a90 	vmov	r0, s17
 800d776:	2300      	movs	r3, #0
 800d778:	9308      	str	r3, [sp, #32]
 800d77a:	f7f2 feed 	bl	8000558 <__aeabi_f2d>
 800d77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d782:	ee18 0a10 	vmov	r0, s16
 800d786:	f7f2 fee7 	bl	8000558 <__aeabi_f2d>
 800d78a:	2200      	movs	r2, #0
 800d78c:	2300      	movs	r3, #0
 800d78e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d792:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d796:	2d00      	cmp	r5, #0
 800d798:	d0d6      	beq.n	800d748 <powf+0x74>
 800d79a:	4b7a      	ldr	r3, [pc, #488]	; (800d984 <powf+0x2b0>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d7a2:	9b08      	ldr	r3, [sp, #32]
 800d7a4:	b11b      	cbz	r3, 800d7ae <powf+0xda>
 800d7a6:	f7ff fb4d 	bl	800ce44 <__errno>
 800d7aa:	9b08      	ldr	r3, [sp, #32]
 800d7ac:	6003      	str	r3, [r0, #0]
 800d7ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7b2:	f7f2 ff29 	bl	8000608 <__aeabi_d2f>
 800d7b6:	ee09 0a10 	vmov	s18, r0
 800d7ba:	eeb0 0a49 	vmov.f32	s0, s18
 800d7be:	b00a      	add	sp, #40	; 0x28
 800d7c0:	ecbd 8b04 	vpop	{d8-d9}
 800d7c4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d7c8:	eeb0 0a48 	vmov.f32	s0, s16
 800d7cc:	f000 fbb2 	bl	800df34 <finitef>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d0f2      	beq.n	800d7ba <powf+0xe6>
 800d7d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7dc:	d5ed      	bpl.n	800d7ba <powf+0xe6>
 800d7de:	2301      	movs	r3, #1
 800d7e0:	9300      	str	r3, [sp, #0]
 800d7e2:	4b67      	ldr	r3, [pc, #412]	; (800d980 <powf+0x2ac>)
 800d7e4:	9301      	str	r3, [sp, #4]
 800d7e6:	ee18 0a90 	vmov	r0, s17
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	9308      	str	r3, [sp, #32]
 800d7ee:	f7f2 feb3 	bl	8000558 <__aeabi_f2d>
 800d7f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7f6:	ee18 0a10 	vmov	r0, s16
 800d7fa:	f7f2 fead 	bl	8000558 <__aeabi_f2d>
 800d7fe:	f994 3000 	ldrsb.w	r3, [r4]
 800d802:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d806:	b923      	cbnz	r3, 800d812 <powf+0x13e>
 800d808:	2200      	movs	r2, #0
 800d80a:	2300      	movs	r3, #0
 800d80c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d810:	e79a      	b.n	800d748 <powf+0x74>
 800d812:	495e      	ldr	r1, [pc, #376]	; (800d98c <powf+0x2b8>)
 800d814:	2000      	movs	r0, #0
 800d816:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d81a:	2b02      	cmp	r3, #2
 800d81c:	d194      	bne.n	800d748 <powf+0x74>
 800d81e:	f7ff fb11 	bl	800ce44 <__errno>
 800d822:	2321      	movs	r3, #33	; 0x21
 800d824:	6003      	str	r3, [r0, #0]
 800d826:	e7bc      	b.n	800d7a2 <powf+0xce>
 800d828:	f000 fb84 	bl	800df34 <finitef>
 800d82c:	4605      	mov	r5, r0
 800d82e:	2800      	cmp	r0, #0
 800d830:	d173      	bne.n	800d91a <powf+0x246>
 800d832:	eeb0 0a68 	vmov.f32	s0, s17
 800d836:	f000 fb7d 	bl	800df34 <finitef>
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d06d      	beq.n	800d91a <powf+0x246>
 800d83e:	eeb0 0a48 	vmov.f32	s0, s16
 800d842:	f000 fb77 	bl	800df34 <finitef>
 800d846:	2800      	cmp	r0, #0
 800d848:	d067      	beq.n	800d91a <powf+0x246>
 800d84a:	ee18 0a90 	vmov	r0, s17
 800d84e:	f7f2 fe83 	bl	8000558 <__aeabi_f2d>
 800d852:	4680      	mov	r8, r0
 800d854:	ee18 0a10 	vmov	r0, s16
 800d858:	4689      	mov	r9, r1
 800d85a:	f7f2 fe7d 	bl	8000558 <__aeabi_f2d>
 800d85e:	eeb4 9a49 	vcmp.f32	s18, s18
 800d862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d866:	f994 4000 	ldrsb.w	r4, [r4]
 800d86a:	4b45      	ldr	r3, [pc, #276]	; (800d980 <powf+0x2ac>)
 800d86c:	d713      	bvc.n	800d896 <powf+0x1c2>
 800d86e:	2201      	movs	r2, #1
 800d870:	e9cd 2300 	strd	r2, r3, [sp]
 800d874:	9508      	str	r5, [sp, #32]
 800d876:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d87a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d87e:	2c00      	cmp	r4, #0
 800d880:	d0c2      	beq.n	800d808 <powf+0x134>
 800d882:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800d886:	ee17 0a90 	vmov	r0, s15
 800d88a:	f7f2 fe65 	bl	8000558 <__aeabi_f2d>
 800d88e:	2c02      	cmp	r4, #2
 800d890:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d894:	e7c2      	b.n	800d81c <powf+0x148>
 800d896:	2203      	movs	r2, #3
 800d898:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d89c:	e9cd 2300 	strd	r2, r3, [sp]
 800d8a0:	9508      	str	r5, [sp, #32]
 800d8a2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d8a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d8ae:	b9fc      	cbnz	r4, 800d8f0 <powf+0x21c>
 800d8b0:	4b37      	ldr	r3, [pc, #220]	; (800d990 <powf+0x2bc>)
 800d8b2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800d8b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d8c2:	d553      	bpl.n	800d96c <powf+0x298>
 800d8c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d8c8:	f000 fb44 	bl	800df54 <rintf>
 800d8cc:	eeb4 0a48 	vcmp.f32	s0, s16
 800d8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d4:	d004      	beq.n	800d8e0 <powf+0x20c>
 800d8d6:	4b2f      	ldr	r3, [pc, #188]	; (800d994 <powf+0x2c0>)
 800d8d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d8dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d8e0:	f996 3000 	ldrsb.w	r3, [r6]
 800d8e4:	2b02      	cmp	r3, #2
 800d8e6:	d141      	bne.n	800d96c <powf+0x298>
 800d8e8:	f7ff faac 	bl	800ce44 <__errno>
 800d8ec:	2322      	movs	r3, #34	; 0x22
 800d8ee:	e799      	b.n	800d824 <powf+0x150>
 800d8f0:	4b29      	ldr	r3, [pc, #164]	; (800d998 <powf+0x2c4>)
 800d8f2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d900:	d5ee      	bpl.n	800d8e0 <powf+0x20c>
 800d902:	eeb0 0a48 	vmov.f32	s0, s16
 800d906:	f000 fb25 	bl	800df54 <rintf>
 800d90a:	eeb4 0a48 	vcmp.f32	s0, s16
 800d90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d912:	d0e5      	beq.n	800d8e0 <powf+0x20c>
 800d914:	2200      	movs	r2, #0
 800d916:	4b1d      	ldr	r3, [pc, #116]	; (800d98c <powf+0x2b8>)
 800d918:	e7e0      	b.n	800d8dc <powf+0x208>
 800d91a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d922:	f47f af4a 	bne.w	800d7ba <powf+0xe6>
 800d926:	eeb0 0a68 	vmov.f32	s0, s17
 800d92a:	f000 fb03 	bl	800df34 <finitef>
 800d92e:	2800      	cmp	r0, #0
 800d930:	f43f af43 	beq.w	800d7ba <powf+0xe6>
 800d934:	eeb0 0a48 	vmov.f32	s0, s16
 800d938:	f000 fafc 	bl	800df34 <finitef>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	f43f af3c 	beq.w	800d7ba <powf+0xe6>
 800d942:	2304      	movs	r3, #4
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	4b0e      	ldr	r3, [pc, #56]	; (800d980 <powf+0x2ac>)
 800d948:	9301      	str	r3, [sp, #4]
 800d94a:	ee18 0a90 	vmov	r0, s17
 800d94e:	2300      	movs	r3, #0
 800d950:	9308      	str	r3, [sp, #32]
 800d952:	f7f2 fe01 	bl	8000558 <__aeabi_f2d>
 800d956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d95a:	ee18 0a10 	vmov	r0, s16
 800d95e:	f7f2 fdfb 	bl	8000558 <__aeabi_f2d>
 800d962:	2200      	movs	r2, #0
 800d964:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d968:	2300      	movs	r3, #0
 800d96a:	e7b7      	b.n	800d8dc <powf+0x208>
 800d96c:	4668      	mov	r0, sp
 800d96e:	f000 fad8 	bl	800df22 <matherr>
 800d972:	2800      	cmp	r0, #0
 800d974:	f47f af15 	bne.w	800d7a2 <powf+0xce>
 800d978:	e7b6      	b.n	800d8e8 <powf+0x214>
 800d97a:	bf00      	nop
 800d97c:	20000208 	.word	0x20000208
 800d980:	0800e86f 	.word	0x0800e86f
 800d984:	3ff00000 	.word	0x3ff00000
 800d988:	00000000 	.word	0x00000000
 800d98c:	fff00000 	.word	0xfff00000
 800d990:	47efffff 	.word	0x47efffff
 800d994:	c7efffff 	.word	0xc7efffff
 800d998:	7ff00000 	.word	0x7ff00000

0800d99c <__ieee754_powf>:
 800d99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a0:	ee10 5a90 	vmov	r5, s1
 800d9a4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800d9a8:	ed2d 8b02 	vpush	{d8}
 800d9ac:	eeb0 8a40 	vmov.f32	s16, s0
 800d9b0:	eef0 8a60 	vmov.f32	s17, s1
 800d9b4:	f000 8293 	beq.w	800dede <__ieee754_powf+0x542>
 800d9b8:	ee10 8a10 	vmov	r8, s0
 800d9bc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800d9c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d9c4:	dc06      	bgt.n	800d9d4 <__ieee754_powf+0x38>
 800d9c6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d9ca:	dd0a      	ble.n	800d9e2 <__ieee754_powf+0x46>
 800d9cc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d9d0:	f000 8285 	beq.w	800dede <__ieee754_powf+0x542>
 800d9d4:	ecbd 8b02 	vpop	{d8}
 800d9d8:	48d9      	ldr	r0, [pc, #868]	; (800dd40 <__ieee754_powf+0x3a4>)
 800d9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9de:	f000 bab3 	b.w	800df48 <nanf>
 800d9e2:	f1b8 0f00 	cmp.w	r8, #0
 800d9e6:	da1d      	bge.n	800da24 <__ieee754_powf+0x88>
 800d9e8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800d9ec:	da2c      	bge.n	800da48 <__ieee754_powf+0xac>
 800d9ee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d9f2:	db30      	blt.n	800da56 <__ieee754_powf+0xba>
 800d9f4:	15fb      	asrs	r3, r7, #23
 800d9f6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d9fa:	fa47 f603 	asr.w	r6, r7, r3
 800d9fe:	fa06 f303 	lsl.w	r3, r6, r3
 800da02:	42bb      	cmp	r3, r7
 800da04:	d127      	bne.n	800da56 <__ieee754_powf+0xba>
 800da06:	f006 0601 	and.w	r6, r6, #1
 800da0a:	f1c6 0602 	rsb	r6, r6, #2
 800da0e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800da12:	d122      	bne.n	800da5a <__ieee754_powf+0xbe>
 800da14:	2d00      	cmp	r5, #0
 800da16:	f280 8268 	bge.w	800deea <__ieee754_powf+0x54e>
 800da1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800da1e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800da22:	e00d      	b.n	800da40 <__ieee754_powf+0xa4>
 800da24:	2600      	movs	r6, #0
 800da26:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800da2a:	d1f0      	bne.n	800da0e <__ieee754_powf+0x72>
 800da2c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800da30:	f000 8255 	beq.w	800dede <__ieee754_powf+0x542>
 800da34:	dd0a      	ble.n	800da4c <__ieee754_powf+0xb0>
 800da36:	2d00      	cmp	r5, #0
 800da38:	f280 8254 	bge.w	800dee4 <__ieee754_powf+0x548>
 800da3c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800dd44 <__ieee754_powf+0x3a8>
 800da40:	ecbd 8b02 	vpop	{d8}
 800da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da48:	2602      	movs	r6, #2
 800da4a:	e7ec      	b.n	800da26 <__ieee754_powf+0x8a>
 800da4c:	2d00      	cmp	r5, #0
 800da4e:	daf5      	bge.n	800da3c <__ieee754_powf+0xa0>
 800da50:	eeb1 0a68 	vneg.f32	s0, s17
 800da54:	e7f4      	b.n	800da40 <__ieee754_powf+0xa4>
 800da56:	2600      	movs	r6, #0
 800da58:	e7d9      	b.n	800da0e <__ieee754_powf+0x72>
 800da5a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800da5e:	d102      	bne.n	800da66 <__ieee754_powf+0xca>
 800da60:	ee28 0a08 	vmul.f32	s0, s16, s16
 800da64:	e7ec      	b.n	800da40 <__ieee754_powf+0xa4>
 800da66:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800da6a:	eeb0 0a48 	vmov.f32	s0, s16
 800da6e:	d108      	bne.n	800da82 <__ieee754_powf+0xe6>
 800da70:	f1b8 0f00 	cmp.w	r8, #0
 800da74:	db05      	blt.n	800da82 <__ieee754_powf+0xe6>
 800da76:	ecbd 8b02 	vpop	{d8}
 800da7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da7e:	f000 ba4d 	b.w	800df1c <__ieee754_sqrtf>
 800da82:	f000 fa50 	bl	800df26 <fabsf>
 800da86:	b124      	cbz	r4, 800da92 <__ieee754_powf+0xf6>
 800da88:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800da8c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800da90:	d117      	bne.n	800dac2 <__ieee754_powf+0x126>
 800da92:	2d00      	cmp	r5, #0
 800da94:	bfbc      	itt	lt
 800da96:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800da9a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800da9e:	f1b8 0f00 	cmp.w	r8, #0
 800daa2:	dacd      	bge.n	800da40 <__ieee754_powf+0xa4>
 800daa4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800daa8:	ea54 0306 	orrs.w	r3, r4, r6
 800daac:	d104      	bne.n	800dab8 <__ieee754_powf+0x11c>
 800daae:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dab2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800dab6:	e7c3      	b.n	800da40 <__ieee754_powf+0xa4>
 800dab8:	2e01      	cmp	r6, #1
 800daba:	d1c1      	bne.n	800da40 <__ieee754_powf+0xa4>
 800dabc:	eeb1 0a40 	vneg.f32	s0, s0
 800dac0:	e7be      	b.n	800da40 <__ieee754_powf+0xa4>
 800dac2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800dac6:	3801      	subs	r0, #1
 800dac8:	ea56 0300 	orrs.w	r3, r6, r0
 800dacc:	d104      	bne.n	800dad8 <__ieee754_powf+0x13c>
 800dace:	ee38 8a48 	vsub.f32	s16, s16, s16
 800dad2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800dad6:	e7b3      	b.n	800da40 <__ieee754_powf+0xa4>
 800dad8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800dadc:	dd6d      	ble.n	800dbba <__ieee754_powf+0x21e>
 800dade:	4b9a      	ldr	r3, [pc, #616]	; (800dd48 <__ieee754_powf+0x3ac>)
 800dae0:	429c      	cmp	r4, r3
 800dae2:	dc06      	bgt.n	800daf2 <__ieee754_powf+0x156>
 800dae4:	2d00      	cmp	r5, #0
 800dae6:	daa9      	bge.n	800da3c <__ieee754_powf+0xa0>
 800dae8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800dd4c <__ieee754_powf+0x3b0>
 800daec:	ee20 0a00 	vmul.f32	s0, s0, s0
 800daf0:	e7a6      	b.n	800da40 <__ieee754_powf+0xa4>
 800daf2:	4b97      	ldr	r3, [pc, #604]	; (800dd50 <__ieee754_powf+0x3b4>)
 800daf4:	429c      	cmp	r4, r3
 800daf6:	dd02      	ble.n	800dafe <__ieee754_powf+0x162>
 800daf8:	2d00      	cmp	r5, #0
 800dafa:	dcf5      	bgt.n	800dae8 <__ieee754_powf+0x14c>
 800dafc:	e79e      	b.n	800da3c <__ieee754_powf+0xa0>
 800dafe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800db02:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db06:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800dd54 <__ieee754_powf+0x3b8>
 800db0a:	eef1 6a40 	vneg.f32	s13, s0
 800db0e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800db12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800db1a:	eee7 7a40 	vfms.f32	s15, s14, s0
 800db1e:	ee60 0a00 	vmul.f32	s1, s0, s0
 800db22:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800dd58 <__ieee754_powf+0x3bc>
 800db26:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800db2a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800dd5c <__ieee754_powf+0x3c0>
 800db2e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800db32:	eee0 7a07 	vfma.f32	s15, s0, s14
 800db36:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800dd60 <__ieee754_powf+0x3c4>
 800db3a:	eeb0 6a67 	vmov.f32	s12, s15
 800db3e:	eea0 6a07 	vfma.f32	s12, s0, s14
 800db42:	ee16 3a10 	vmov	r3, s12
 800db46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800db4a:	f023 030f 	bic.w	r3, r3, #15
 800db4e:	ee00 3a90 	vmov	s1, r3
 800db52:	eee6 0a87 	vfma.f32	s1, s13, s14
 800db56:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800db5a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800db5e:	f025 050f 	bic.w	r5, r5, #15
 800db62:	ee07 5a10 	vmov	s14, r5
 800db66:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800db6a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800db6e:	ee07 3a90 	vmov	s15, r3
 800db72:	eee7 0a27 	vfma.f32	s1, s14, s15
 800db76:	3e01      	subs	r6, #1
 800db78:	ea56 0200 	orrs.w	r2, r6, r0
 800db7c:	ee07 5a10 	vmov	s14, r5
 800db80:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db84:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800db88:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800db8c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800db90:	ee17 4a10 	vmov	r4, s14
 800db94:	bf08      	it	eq
 800db96:	eeb0 8a40 	vmoveq.f32	s16, s0
 800db9a:	2c00      	cmp	r4, #0
 800db9c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dba0:	f340 8184 	ble.w	800deac <__ieee754_powf+0x510>
 800dba4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800dba8:	f340 80fc 	ble.w	800dda4 <__ieee754_powf+0x408>
 800dbac:	eddf 7a67 	vldr	s15, [pc, #412]	; 800dd4c <__ieee754_powf+0x3b0>
 800dbb0:	ee28 0a27 	vmul.f32	s0, s16, s15
 800dbb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dbb8:	e742      	b.n	800da40 <__ieee754_powf+0xa4>
 800dbba:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800dbbe:	bfbf      	itttt	lt
 800dbc0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800dd64 <__ieee754_powf+0x3c8>
 800dbc4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800dbc8:	f06f 0217 	mvnlt.w	r2, #23
 800dbcc:	ee17 4a90 	vmovlt	r4, s15
 800dbd0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800dbd4:	bfa8      	it	ge
 800dbd6:	2200      	movge	r2, #0
 800dbd8:	3b7f      	subs	r3, #127	; 0x7f
 800dbda:	4413      	add	r3, r2
 800dbdc:	4a62      	ldr	r2, [pc, #392]	; (800dd68 <__ieee754_powf+0x3cc>)
 800dbde:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800dbe2:	4294      	cmp	r4, r2
 800dbe4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800dbe8:	dd06      	ble.n	800dbf8 <__ieee754_powf+0x25c>
 800dbea:	4a60      	ldr	r2, [pc, #384]	; (800dd6c <__ieee754_powf+0x3d0>)
 800dbec:	4294      	cmp	r4, r2
 800dbee:	f340 80a5 	ble.w	800dd3c <__ieee754_powf+0x3a0>
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800dbf8:	2400      	movs	r4, #0
 800dbfa:	4a5d      	ldr	r2, [pc, #372]	; (800dd70 <__ieee754_powf+0x3d4>)
 800dbfc:	00a7      	lsls	r7, r4, #2
 800dbfe:	443a      	add	r2, r7
 800dc00:	ee07 1a90 	vmov	s15, r1
 800dc04:	ed92 7a00 	vldr	s14, [r2]
 800dc08:	4a5a      	ldr	r2, [pc, #360]	; (800dd74 <__ieee754_powf+0x3d8>)
 800dc0a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800dc0e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800dc12:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800dc16:	1049      	asrs	r1, r1, #1
 800dc18:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800dc1c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800dc20:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800dc24:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800dc28:	ee06 1a10 	vmov	s12, r1
 800dc2c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800dc30:	ee14 ca90 	vmov	ip, s9
 800dc34:	ea02 0c0c 	and.w	ip, r2, ip
 800dc38:	ee05 ca10 	vmov	s10, ip
 800dc3c:	eeb1 4a45 	vneg.f32	s8, s10
 800dc40:	eee4 5a06 	vfma.f32	s11, s8, s12
 800dc44:	ee36 6a47 	vsub.f32	s12, s12, s14
 800dc48:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800dd78 <__ieee754_powf+0x3dc>
 800dc4c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800dc50:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800dc54:	eee4 5a06 	vfma.f32	s11, s8, s12
 800dc58:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800dc5c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800dc60:	eddf 5a46 	vldr	s11, [pc, #280]	; 800dd7c <__ieee754_powf+0x3e0>
 800dc64:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800dc68:	eddf 5a45 	vldr	s11, [pc, #276]	; 800dd80 <__ieee754_powf+0x3e4>
 800dc6c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800dc70:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800dd54 <__ieee754_powf+0x3b8>
 800dc74:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800dc78:	eddf 5a42 	vldr	s11, [pc, #264]	; 800dd84 <__ieee754_powf+0x3e8>
 800dc7c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800dc80:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800dd88 <__ieee754_powf+0x3ec>
 800dc84:	ee75 6a24 	vadd.f32	s13, s10, s9
 800dc88:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800dc8c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800dc90:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800dc94:	eef0 7a65 	vmov.f32	s15, s11
 800dc98:	eee3 6a87 	vfma.f32	s13, s7, s14
 800dc9c:	eee5 7a05 	vfma.f32	s15, s10, s10
 800dca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dca4:	ee17 1a90 	vmov	r1, s15
 800dca8:	4011      	ands	r1, r2
 800dcaa:	ee07 1a90 	vmov	s15, r1
 800dcae:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800dcb2:	eddf 5a36 	vldr	s11, [pc, #216]	; 800dd8c <__ieee754_powf+0x3f0>
 800dcb6:	eea4 7a05 	vfma.f32	s14, s8, s10
 800dcba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800dcbe:	ee27 7a24 	vmul.f32	s14, s14, s9
 800dcc2:	eea7 7a86 	vfma.f32	s14, s15, s12
 800dcc6:	eeb0 6a47 	vmov.f32	s12, s14
 800dcca:	eea5 6a27 	vfma.f32	s12, s10, s15
 800dcce:	ee16 1a10 	vmov	r1, s12
 800dcd2:	4011      	ands	r1, r2
 800dcd4:	ee06 1a90 	vmov	s13, r1
 800dcd8:	eee4 6a27 	vfma.f32	s13, s8, s15
 800dcdc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800dd90 <__ieee754_powf+0x3f4>
 800dce0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800dce4:	ee06 1a10 	vmov	s12, r1
 800dce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcec:	eddf 7a29 	vldr	s15, [pc, #164]	; 800dd94 <__ieee754_powf+0x3f8>
 800dcf0:	4929      	ldr	r1, [pc, #164]	; (800dd98 <__ieee754_powf+0x3fc>)
 800dcf2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800dcf6:	4439      	add	r1, r7
 800dcf8:	edd1 7a00 	vldr	s15, [r1]
 800dcfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd00:	ee07 3a90 	vmov	s15, r3
 800dd04:	eef0 0a47 	vmov.f32	s1, s14
 800dd08:	4b24      	ldr	r3, [pc, #144]	; (800dd9c <__ieee754_powf+0x400>)
 800dd0a:	eee6 0a25 	vfma.f32	s1, s12, s11
 800dd0e:	443b      	add	r3, r7
 800dd10:	ed93 5a00 	vldr	s10, [r3]
 800dd14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dd18:	ee70 0a85 	vadd.f32	s1, s1, s10
 800dd1c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800dd20:	ee17 3a90 	vmov	r3, s15
 800dd24:	4013      	ands	r3, r2
 800dd26:	ee07 3a90 	vmov	s15, r3
 800dd2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dd2e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800dd32:	eee6 7a65 	vfms.f32	s15, s12, s11
 800dd36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd3a:	e70e      	b.n	800db5a <__ieee754_powf+0x1be>
 800dd3c:	2401      	movs	r4, #1
 800dd3e:	e75c      	b.n	800dbfa <__ieee754_powf+0x25e>
 800dd40:	0800e841 	.word	0x0800e841
 800dd44:	00000000 	.word	0x00000000
 800dd48:	3f7ffff7 	.word	0x3f7ffff7
 800dd4c:	7149f2ca 	.word	0x7149f2ca
 800dd50:	3f800007 	.word	0x3f800007
 800dd54:	3eaaaaab 	.word	0x3eaaaaab
 800dd58:	36eca570 	.word	0x36eca570
 800dd5c:	3fb8aa3b 	.word	0x3fb8aa3b
 800dd60:	3fb8aa00 	.word	0x3fb8aa00
 800dd64:	4b800000 	.word	0x4b800000
 800dd68:	001cc471 	.word	0x001cc471
 800dd6c:	005db3d6 	.word	0x005db3d6
 800dd70:	0800e874 	.word	0x0800e874
 800dd74:	fffff000 	.word	0xfffff000
 800dd78:	3e6c3255 	.word	0x3e6c3255
 800dd7c:	3e53f142 	.word	0x3e53f142
 800dd80:	3e8ba305 	.word	0x3e8ba305
 800dd84:	3edb6db7 	.word	0x3edb6db7
 800dd88:	3f19999a 	.word	0x3f19999a
 800dd8c:	3f763800 	.word	0x3f763800
 800dd90:	3f76384f 	.word	0x3f76384f
 800dd94:	369dc3a0 	.word	0x369dc3a0
 800dd98:	0800e884 	.word	0x0800e884
 800dd9c:	0800e87c 	.word	0x0800e87c
 800dda0:	3338aa3c 	.word	0x3338aa3c
 800dda4:	f040 8092 	bne.w	800decc <__ieee754_powf+0x530>
 800dda8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800dda0 <__ieee754_powf+0x404>
 800ddac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ddb0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ddb4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbc:	f73f aef6 	bgt.w	800dbac <__ieee754_powf+0x210>
 800ddc0:	15db      	asrs	r3, r3, #23
 800ddc2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800ddc6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ddca:	4103      	asrs	r3, r0
 800ddcc:	4423      	add	r3, r4
 800ddce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ddd2:	4947      	ldr	r1, [pc, #284]	; (800def0 <__ieee754_powf+0x554>)
 800ddd4:	3a7f      	subs	r2, #127	; 0x7f
 800ddd6:	4111      	asrs	r1, r2
 800ddd8:	ea23 0101 	bic.w	r1, r3, r1
 800dddc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800dde0:	ee07 1a10 	vmov	s14, r1
 800dde4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800dde8:	f1c2 0217 	rsb	r2, r2, #23
 800ddec:	4110      	asrs	r0, r2
 800ddee:	2c00      	cmp	r4, #0
 800ddf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ddf4:	bfb8      	it	lt
 800ddf6:	4240      	neglt	r0, r0
 800ddf8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ddfc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800def4 <__ieee754_powf+0x558>
 800de00:	ee17 3a10 	vmov	r3, s14
 800de04:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800de08:	f023 030f 	bic.w	r3, r3, #15
 800de0c:	ee07 3a10 	vmov	s14, r3
 800de10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de14:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800de18:	eddf 7a37 	vldr	s15, [pc, #220]	; 800def8 <__ieee754_powf+0x55c>
 800de1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de20:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800de24:	eddf 6a35 	vldr	s13, [pc, #212]	; 800defc <__ieee754_powf+0x560>
 800de28:	eeb0 0a67 	vmov.f32	s0, s15
 800de2c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800de30:	eeb0 6a40 	vmov.f32	s12, s0
 800de34:	eea7 6a66 	vfms.f32	s12, s14, s13
 800de38:	ee20 7a00 	vmul.f32	s14, s0, s0
 800de3c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800de40:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800df00 <__ieee754_powf+0x564>
 800de44:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800df04 <__ieee754_powf+0x568>
 800de48:	eea7 6a26 	vfma.f32	s12, s14, s13
 800de4c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800df08 <__ieee754_powf+0x56c>
 800de50:	eee6 6a07 	vfma.f32	s13, s12, s14
 800de54:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800df0c <__ieee754_powf+0x570>
 800de58:	eea6 6a87 	vfma.f32	s12, s13, s14
 800de5c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800df10 <__ieee754_powf+0x574>
 800de60:	eee6 6a07 	vfma.f32	s13, s12, s14
 800de64:	eeb0 6a40 	vmov.f32	s12, s0
 800de68:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800de6c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800de70:	eeb0 7a46 	vmov.f32	s14, s12
 800de74:	ee77 6a66 	vsub.f32	s13, s14, s13
 800de78:	ee20 6a06 	vmul.f32	s12, s0, s12
 800de7c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800de80:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800de84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800de8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800de90:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800de94:	ee10 3a10 	vmov	r3, s0
 800de98:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800de9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dea0:	da1a      	bge.n	800ded8 <__ieee754_powf+0x53c>
 800dea2:	f000 f8b1 	bl	800e008 <scalbnf>
 800dea6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800deaa:	e5c9      	b.n	800da40 <__ieee754_powf+0xa4>
 800deac:	4a19      	ldr	r2, [pc, #100]	; (800df14 <__ieee754_powf+0x578>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	dd02      	ble.n	800deb8 <__ieee754_powf+0x51c>
 800deb2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800df18 <__ieee754_powf+0x57c>
 800deb6:	e67b      	b.n	800dbb0 <__ieee754_powf+0x214>
 800deb8:	d108      	bne.n	800decc <__ieee754_powf+0x530>
 800deba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800debe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800dec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dec6:	f6ff af7b 	blt.w	800ddc0 <__ieee754_powf+0x424>
 800deca:	e7f2      	b.n	800deb2 <__ieee754_powf+0x516>
 800decc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ded0:	f73f af76 	bgt.w	800ddc0 <__ieee754_powf+0x424>
 800ded4:	2000      	movs	r0, #0
 800ded6:	e78f      	b.n	800ddf8 <__ieee754_powf+0x45c>
 800ded8:	ee00 3a10 	vmov	s0, r3
 800dedc:	e7e3      	b.n	800dea6 <__ieee754_powf+0x50a>
 800dede:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dee2:	e5ad      	b.n	800da40 <__ieee754_powf+0xa4>
 800dee4:	eeb0 0a68 	vmov.f32	s0, s17
 800dee8:	e5aa      	b.n	800da40 <__ieee754_powf+0xa4>
 800deea:	eeb0 0a48 	vmov.f32	s0, s16
 800deee:	e5a7      	b.n	800da40 <__ieee754_powf+0xa4>
 800def0:	007fffff 	.word	0x007fffff
 800def4:	3f317218 	.word	0x3f317218
 800def8:	35bfbe8c 	.word	0x35bfbe8c
 800defc:	3f317200 	.word	0x3f317200
 800df00:	3331bb4c 	.word	0x3331bb4c
 800df04:	b5ddea0e 	.word	0xb5ddea0e
 800df08:	388ab355 	.word	0x388ab355
 800df0c:	bb360b61 	.word	0xbb360b61
 800df10:	3e2aaaab 	.word	0x3e2aaaab
 800df14:	43160000 	.word	0x43160000
 800df18:	0da24260 	.word	0x0da24260

0800df1c <__ieee754_sqrtf>:
 800df1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800df20:	4770      	bx	lr

0800df22 <matherr>:
 800df22:	2000      	movs	r0, #0
 800df24:	4770      	bx	lr

0800df26 <fabsf>:
 800df26:	ee10 3a10 	vmov	r3, s0
 800df2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df2e:	ee00 3a10 	vmov	s0, r3
 800df32:	4770      	bx	lr

0800df34 <finitef>:
 800df34:	ee10 3a10 	vmov	r3, s0
 800df38:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800df3c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800df40:	bfac      	ite	ge
 800df42:	2000      	movge	r0, #0
 800df44:	2001      	movlt	r0, #1
 800df46:	4770      	bx	lr

0800df48 <nanf>:
 800df48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800df50 <nanf+0x8>
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	7fc00000 	.word	0x7fc00000

0800df54 <rintf>:
 800df54:	b513      	push	{r0, r1, r4, lr}
 800df56:	ee10 1a10 	vmov	r1, s0
 800df5a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df5e:	0ddc      	lsrs	r4, r3, #23
 800df60:	3c7f      	subs	r4, #127	; 0x7f
 800df62:	2c16      	cmp	r4, #22
 800df64:	dc46      	bgt.n	800dff4 <rintf+0xa0>
 800df66:	b32b      	cbz	r3, 800dfb4 <rintf+0x60>
 800df68:	2c00      	cmp	r4, #0
 800df6a:	ee10 2a10 	vmov	r2, s0
 800df6e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800df72:	da21      	bge.n	800dfb8 <rintf+0x64>
 800df74:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800df78:	425b      	negs	r3, r3
 800df7a:	4a21      	ldr	r2, [pc, #132]	; (800e000 <rintf+0xac>)
 800df7c:	0a5b      	lsrs	r3, r3, #9
 800df7e:	0d09      	lsrs	r1, r1, #20
 800df80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df84:	0509      	lsls	r1, r1, #20
 800df86:	430b      	orrs	r3, r1
 800df88:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800df8c:	ee07 3a90 	vmov	s15, r3
 800df90:	edd2 6a00 	vldr	s13, [r2]
 800df94:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800df98:	ed8d 7a01 	vstr	s14, [sp, #4]
 800df9c:	eddd 7a01 	vldr	s15, [sp, #4]
 800dfa0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dfa4:	ee17 3a90 	vmov	r3, s15
 800dfa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfac:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800dfb0:	ee00 3a10 	vmov	s0, r3
 800dfb4:	b002      	add	sp, #8
 800dfb6:	bd10      	pop	{r4, pc}
 800dfb8:	4b12      	ldr	r3, [pc, #72]	; (800e004 <rintf+0xb0>)
 800dfba:	4123      	asrs	r3, r4
 800dfbc:	4219      	tst	r1, r3
 800dfbe:	d0f9      	beq.n	800dfb4 <rintf+0x60>
 800dfc0:	085b      	lsrs	r3, r3, #1
 800dfc2:	4219      	tst	r1, r3
 800dfc4:	d006      	beq.n	800dfd4 <rintf+0x80>
 800dfc6:	ea21 0203 	bic.w	r2, r1, r3
 800dfca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dfce:	fa43 f404 	asr.w	r4, r3, r4
 800dfd2:	4322      	orrs	r2, r4
 800dfd4:	4b0a      	ldr	r3, [pc, #40]	; (800e000 <rintf+0xac>)
 800dfd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dfda:	ed90 7a00 	vldr	s14, [r0]
 800dfde:	ee07 2a90 	vmov	s15, r2
 800dfe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfe6:	edcd 7a01 	vstr	s15, [sp, #4]
 800dfea:	ed9d 0a01 	vldr	s0, [sp, #4]
 800dfee:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dff2:	e7df      	b.n	800dfb4 <rintf+0x60>
 800dff4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dff8:	d3dc      	bcc.n	800dfb4 <rintf+0x60>
 800dffa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dffe:	e7d9      	b.n	800dfb4 <rintf+0x60>
 800e000:	0800e88c 	.word	0x0800e88c
 800e004:	007fffff 	.word	0x007fffff

0800e008 <scalbnf>:
 800e008:	b508      	push	{r3, lr}
 800e00a:	ee10 2a10 	vmov	r2, s0
 800e00e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e012:	ed2d 8b02 	vpush	{d8}
 800e016:	eef0 0a40 	vmov.f32	s1, s0
 800e01a:	d004      	beq.n	800e026 <scalbnf+0x1e>
 800e01c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e020:	d306      	bcc.n	800e030 <scalbnf+0x28>
 800e022:	ee70 0a00 	vadd.f32	s1, s0, s0
 800e026:	ecbd 8b02 	vpop	{d8}
 800e02a:	eeb0 0a60 	vmov.f32	s0, s1
 800e02e:	bd08      	pop	{r3, pc}
 800e030:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e034:	d21c      	bcs.n	800e070 <scalbnf+0x68>
 800e036:	4b1f      	ldr	r3, [pc, #124]	; (800e0b4 <scalbnf+0xac>)
 800e038:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e0b8 <scalbnf+0xb0>
 800e03c:	4298      	cmp	r0, r3
 800e03e:	ee60 0a27 	vmul.f32	s1, s0, s15
 800e042:	db10      	blt.n	800e066 <scalbnf+0x5e>
 800e044:	ee10 2a90 	vmov	r2, s1
 800e048:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800e04c:	3b19      	subs	r3, #25
 800e04e:	4403      	add	r3, r0
 800e050:	2bfe      	cmp	r3, #254	; 0xfe
 800e052:	dd0f      	ble.n	800e074 <scalbnf+0x6c>
 800e054:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800e0bc <scalbnf+0xb4>
 800e058:	eeb0 0a48 	vmov.f32	s0, s16
 800e05c:	f000 f834 	bl	800e0c8 <copysignf>
 800e060:	ee60 0a08 	vmul.f32	s1, s0, s16
 800e064:	e7df      	b.n	800e026 <scalbnf+0x1e>
 800e066:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e0c0 <scalbnf+0xb8>
 800e06a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e06e:	e7da      	b.n	800e026 <scalbnf+0x1e>
 800e070:	0ddb      	lsrs	r3, r3, #23
 800e072:	e7ec      	b.n	800e04e <scalbnf+0x46>
 800e074:	2b00      	cmp	r3, #0
 800e076:	dd06      	ble.n	800e086 <scalbnf+0x7e>
 800e078:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e07c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e080:	ee00 3a90 	vmov	s1, r3
 800e084:	e7cf      	b.n	800e026 <scalbnf+0x1e>
 800e086:	f113 0f16 	cmn.w	r3, #22
 800e08a:	da06      	bge.n	800e09a <scalbnf+0x92>
 800e08c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e090:	4298      	cmp	r0, r3
 800e092:	dcdf      	bgt.n	800e054 <scalbnf+0x4c>
 800e094:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800e0c0 <scalbnf+0xb8>
 800e098:	e7de      	b.n	800e058 <scalbnf+0x50>
 800e09a:	3319      	adds	r3, #25
 800e09c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e0a0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e0a4:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e0c4 <scalbnf+0xbc>
 800e0a8:	ee07 3a10 	vmov	s14, r3
 800e0ac:	ee67 0a27 	vmul.f32	s1, s14, s15
 800e0b0:	e7b9      	b.n	800e026 <scalbnf+0x1e>
 800e0b2:	bf00      	nop
 800e0b4:	ffff3cb0 	.word	0xffff3cb0
 800e0b8:	4c000000 	.word	0x4c000000
 800e0bc:	7149f2ca 	.word	0x7149f2ca
 800e0c0:	0da24260 	.word	0x0da24260
 800e0c4:	33000000 	.word	0x33000000

0800e0c8 <copysignf>:
 800e0c8:	ee10 3a10 	vmov	r3, s0
 800e0cc:	ee10 2a90 	vmov	r2, s1
 800e0d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0d4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	ee00 3a10 	vmov	s0, r3
 800e0de:	4770      	bx	lr

0800e0e0 <_init>:
 800e0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0e2:	bf00      	nop
 800e0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0e6:	bc08      	pop	{r3}
 800e0e8:	469e      	mov	lr, r3
 800e0ea:	4770      	bx	lr

0800e0ec <_fini>:
 800e0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ee:	bf00      	nop
 800e0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0f2:	bc08      	pop	{r3}
 800e0f4:	469e      	mov	lr, r3
 800e0f6:	4770      	bx	lr
